{
  "version": 3,
  "sources": ["../../@libp2p/websockets/src/constants.ts", "../../@libp2p/websockets/src/filters.ts"],
  "sourcesContent": ["// p2p multi-address code\nexport const CODE_P2P = 421\nexport const CODE_CIRCUIT = 290\n\nexport const CODE_TCP = 6\nexport const CODE_WS = 477\nexport const CODE_WSS = 478\n\n// Time to wait for a connection to close gracefully before destroying it manually\nexport const CLOSE_TIMEOUT = 500\n", "import * as mafmt from '@multiformats/mafmt'\nimport {\n  CODE_CIRCUIT,\n  CODE_P2P,\n  CODE_TCP,\n  CODE_WS,\n  CODE_WSS\n} from './constants.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport function all (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P)\n\n    return mafmt.WebSockets.matches(testMa) ||\n      mafmt.WebSocketsSecure.matches(testMa)\n  })\n}\n\nexport function wss (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P)\n\n    return mafmt.WebSocketsSecure.matches(testMa)\n  })\n}\n\nexport function dnsWss (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P)\n\n    return mafmt.WebSocketsSecure.matches(testMa) &&\n      mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS))\n  })\n}\n\nexport function dnsWsOrWss (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P)\n\n    // WS\n    if (mafmt.WebSockets.matches(testMa)) {\n      return mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WS))\n    }\n\n    // WSS\n    return mafmt.WebSocketsSecure.matches(testMa) &&\n      mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS))\n  })\n}\n"],
  "mappings": ";;;;;;;AACO,IAAM,WAAW;AACjB,IAAM,eAAe;AAErB,IAAM,WAAW;AACjB,IAAM,UAAU;AAChB,IAAM,WAAW;AAGjB,IAAM,gBAAgB;;;ACCvB,SAAU,IAAK,YAAuB;AAC1C,SAAO,WAAW,OAAO,CAAC,OAAM;AAC9B,QAAI,GAAG,WAAU,EAAG,SAAS,YAAY,GAAG;AAC1C,aAAO;IACT;AAEA,UAAM,SAAS,GAAG,gBAAgB,QAAQ;AAE1C,WAAa,WAAW,QAAQ,MAAM,KAC9B,iBAAiB,QAAQ,MAAM;EACzC,CAAC;AACH;AAEM,SAAU,IAAK,YAAuB;AAC1C,SAAO,WAAW,OAAO,CAAC,OAAM;AAC9B,QAAI,GAAG,WAAU,EAAG,SAAS,YAAY,GAAG;AAC1C,aAAO;IACT;AAEA,UAAM,SAAS,GAAG,gBAAgB,QAAQ;AAE1C,WAAa,iBAAiB,QAAQ,MAAM;EAC9C,CAAC;AACH;AAEM,SAAU,OAAQ,YAAuB;AAC7C,SAAO,WAAW,OAAO,CAAC,OAAM;AAC9B,QAAI,GAAG,WAAU,EAAG,SAAS,YAAY,GAAG;AAC1C,aAAO;IACT;AAEA,UAAM,SAAS,GAAG,gBAAgB,QAAQ;AAE1C,WAAa,iBAAiB,QAAQ,MAAM,KACpC,IAAI,QAAQ,OAAO,gBAAgB,QAAQ,EAAE,gBAAgB,QAAQ,CAAC;EAChF,CAAC;AACH;AAEM,SAAU,WAAY,YAAuB;AACjD,SAAO,WAAW,OAAO,CAAC,OAAM;AAC9B,QAAI,GAAG,WAAU,EAAG,SAAS,YAAY,GAAG;AAC1C,aAAO;IACT;AAEA,UAAM,SAAS,GAAG,gBAAgB,QAAQ;AAG1C,QAAU,WAAW,QAAQ,MAAM,GAAG;AACpC,aAAa,IAAI,QAAQ,OAAO,gBAAgB,QAAQ,EAAE,gBAAgB,OAAO,CAAC;IACpF;AAGA,WAAa,iBAAiB,QAAQ,MAAM,KACpC,IAAI,QAAQ,OAAO,gBAAgB,QAAQ,EAAE,gBAAgB,QAAQ,CAAC;EAChF,CAAC;AACH;",
  "names": []
}
