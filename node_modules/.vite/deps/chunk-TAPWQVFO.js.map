{
  "version": 3,
  "sources": ["../../protons-runtime/src/utils/float.ts", "../../protons-runtime/src/utils/longbits.ts", "../../protons-runtime/src/utils/utf8.ts", "../../protons-runtime/src/utils/reader.ts", "../../protons-runtime/src/decode.ts", "../../protons-runtime/src/utils/pool.ts", "../../protons-runtime/src/utils/writer.ts", "../../protons-runtime/src/encode.ts", "../../protons-runtime/src/codec.ts", "../../protons-runtime/src/codecs/enum.ts", "../../protons-runtime/src/codecs/message.ts"],
  "sourcesContent": ["const f32 = new Float32Array([-0])\nconst f8b = new Uint8Array(f32.buffer)\n\n/**\n * Writes a 32 bit float to a buffer using little endian byte order\n */\nexport function writeFloatLE (val: number, buf: Uint8Array, pos: number): void {\n  f32[0] = val\n  buf[pos] = f8b[0]\n  buf[pos + 1] = f8b[1]\n  buf[pos + 2] = f8b[2]\n  buf[pos + 3] = f8b[3]\n}\n\n/**\n * Writes a 32 bit float to a buffer using big endian byte order\n */\nexport function writeFloatBE (val: number, buf: Uint8Array, pos: number): void {\n  f32[0] = val\n  buf[pos] = f8b[3]\n  buf[pos + 1] = f8b[2]\n  buf[pos + 2] = f8b[1]\n  buf[pos + 3] = f8b[0]\n}\n\n/**\n * Reads a 32 bit float from a buffer using little endian byte order\n */\nexport function readFloatLE (buf: Uint8Array, pos: number): number {\n  f8b[0] = buf[pos]\n  f8b[1] = buf[pos + 1]\n  f8b[2] = buf[pos + 2]\n  f8b[3] = buf[pos + 3]\n  return f32[0]\n}\n\n/**\n * Reads a 32 bit float from a buffer using big endian byte order\n */\nexport function readFloatBE (buf: Uint8Array, pos: number): number {\n  f8b[3] = buf[pos]\n  f8b[2] = buf[pos + 1]\n  f8b[1] = buf[pos + 2]\n  f8b[0] = buf[pos + 3]\n  return f32[0]\n}\n\nconst f64 = new Float64Array([-0])\nconst d8b = new Uint8Array(f64.buffer)\n\n/**\n * Writes a 64 bit double to a buffer using little endian byte order\n */\nexport function writeDoubleLE (val: number, buf: Uint8Array, pos: number): void {\n  f64[0] = val\n  buf[pos] = d8b[0]\n  buf[pos + 1] = d8b[1]\n  buf[pos + 2] = d8b[2]\n  buf[pos + 3] = d8b[3]\n  buf[pos + 4] = d8b[4]\n  buf[pos + 5] = d8b[5]\n  buf[pos + 6] = d8b[6]\n  buf[pos + 7] = d8b[7]\n}\n\n/**\n * Writes a 64 bit double to a buffer using big endian byte order\n */\nexport function writeDoubleBE (val: number, buf: Uint8Array, pos: number): void {\n  f64[0] = val\n  buf[pos] = d8b[7]\n  buf[pos + 1] = d8b[6]\n  buf[pos + 2] = d8b[5]\n  buf[pos + 3] = d8b[4]\n  buf[pos + 4] = d8b[3]\n  buf[pos + 5] = d8b[2]\n  buf[pos + 6] = d8b[1]\n  buf[pos + 7] = d8b[0]\n}\n\n/**\n * Reads a 64 bit double from a buffer using little endian byte order\n */\nexport function readDoubleLE (buf: Uint8Array, pos: number): number {\n  d8b[0] = buf[pos]\n  d8b[1] = buf[pos + 1]\n  d8b[2] = buf[pos + 2]\n  d8b[3] = buf[pos + 3]\n  d8b[4] = buf[pos + 4]\n  d8b[5] = buf[pos + 5]\n  d8b[6] = buf[pos + 6]\n  d8b[7] = buf[pos + 7]\n  return f64[0]\n}\n\n/**\n * Reads a 64 bit double from a buffer using big endian byte order\n */\nexport function readDoubleBE (buf: Uint8Array, pos: number): number {\n  d8b[7] = buf[pos]\n  d8b[6] = buf[pos + 1]\n  d8b[5] = buf[pos + 2]\n  d8b[4] = buf[pos + 3]\n  d8b[3] = buf[pos + 4]\n  d8b[2] = buf[pos + 5]\n  d8b[1] = buf[pos + 6]\n  d8b[0] = buf[pos + 7]\n  return f64[0]\n}\n", "// the largest BigInt we can safely downcast to a Number\nconst MAX_SAFE_NUMBER_INTEGER = BigInt(Number.MAX_SAFE_INTEGER)\nconst MIN_SAFE_NUMBER_INTEGER = BigInt(Number.MIN_SAFE_INTEGER)\n\n/**\n * Constructs new long bits.\n *\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @function Object() { [native code] }\n * @param {number} lo - Low 32 bits, unsigned\n * @param {number} hi - High 32 bits, unsigned\n */\nexport class LongBits {\n  public lo: number\n  public hi: number\n\n  constructor (lo: number, hi: number) {\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits\n     */\n    this.lo = lo | 0\n\n    /**\n     * High bits\n     */\n    this.hi = hi | 0\n  }\n\n  /**\n   * Converts this long bits to a possibly unsafe JavaScript number\n   */\n  toNumber (unsigned: boolean = false): number {\n    if (!unsigned && (this.hi >>> 31) > 0) {\n      const lo = ~this.lo + 1 >>> 0\n      let hi = ~this.hi >>> 0\n      if (lo === 0) {\n        hi = hi + 1 >>> 0\n      }\n      return -(lo + hi * 4294967296)\n    }\n    return this.lo + this.hi * 4294967296\n  }\n\n  /**\n   * Converts this long bits to a bigint\n   */\n  toBigInt (unsigned: boolean = false): bigint {\n    if (unsigned) {\n      return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n)\n    }\n\n    if ((this.hi >>> 31) !== 0) {\n      const lo = ~this.lo + 1 >>> 0\n      let hi = ~this.hi >>> 0\n      if (lo === 0) {\n        hi = hi + 1 >>> 0\n      }\n      return -(BigInt(lo) + (BigInt(hi) << 32n))\n    }\n\n    return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n)\n  }\n\n  /**\n   * Converts this long bits to a string\n   */\n  toString (unsigned: boolean = false): string {\n    return this.toBigInt(unsigned).toString()\n  }\n\n  /**\n   * Zig-zag encodes this long bits\n   */\n  zzEncode (): this {\n    const mask = this.hi >> 31\n    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0\n    this.lo = (this.lo << 1 ^ mask) >>> 0\n    return this\n  }\n\n  /**\n   * Zig-zag decodes this long bits\n   */\n  zzDecode (): this {\n    const mask = -(this.lo & 1)\n    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0\n    this.hi = (this.hi >>> 1 ^ mask) >>> 0\n    return this\n  }\n\n  /**\n   * Calculates the length of this longbits when encoded as a varint.\n   */\n  length (): number {\n    const part0 = this.lo\n    const part1 = (this.lo >>> 28 | this.hi << 4) >>> 0\n    const part2 = this.hi >>> 24\n    return part2 === 0\n      ? part1 === 0\n        ? part0 < 16384\n          ? part0 < 128 ? 1 : 2\n          : part0 < 2097152 ? 3 : 4\n        : part1 < 16384\n          ? part1 < 128 ? 5 : 6\n          : part1 < 2097152 ? 7 : 8\n      : part2 < 128 ? 9 : 10\n  }\n\n  /**\n   * Constructs new long bits from the specified number\n   */\n  static fromBigInt (value: bigint): LongBits {\n    if (value === 0n) {\n      return zero\n    }\n\n    if (value < MAX_SAFE_NUMBER_INTEGER && value > MIN_SAFE_NUMBER_INTEGER) {\n      return this.fromNumber(Number(value))\n    }\n\n    const negative = value < 0n\n\n    if (negative) {\n      value = -value\n    }\n\n    let hi = value >> 32n\n    let lo = value - (hi << 32n)\n\n    if (negative) {\n      hi = ~hi | 0n\n      lo = ~lo | 0n\n\n      if (++lo > TWO_32) {\n        lo = 0n\n        if (++hi > TWO_32) { hi = 0n }\n      }\n    }\n\n    return new LongBits(Number(lo), Number(hi))\n  }\n\n  /**\n   * Constructs new long bits from the specified number\n   */\n  static fromNumber (value: number): LongBits {\n    if (value === 0) { return zero }\n    const sign = value < 0\n    if (sign) { value = -value }\n    let lo = value >>> 0\n    let hi = (value - lo) / 4294967296 >>> 0\n    if (sign) {\n      hi = ~hi >>> 0\n      lo = ~lo >>> 0\n      if (++lo > 4294967295) {\n        lo = 0\n        if (++hi > 4294967295) { hi = 0 }\n      }\n    }\n    return new LongBits(lo, hi)\n  }\n\n  /**\n   * Constructs new long bits from a number, long or string\n   */\n  static from (value: bigint | number | string | { low: number, high: number }): LongBits {\n    if (typeof value === 'number') {\n      return LongBits.fromNumber(value)\n    }\n    if (typeof value === 'bigint') {\n      return LongBits.fromBigInt(value)\n    }\n    if (typeof value === 'string') {\n      return LongBits.fromBigInt(BigInt(value))\n    }\n    return value.low != null || value.high != null ? new LongBits(value.low >>> 0, value.high >>> 0) : zero\n  }\n}\n\nconst zero = new LongBits(0, 0)\nzero.toBigInt = function () { return 0n }\nzero.zzEncode = zero.zzDecode = function () { return this }\nzero.length = function () { return 1 }\n\nconst TWO_32 = 4294967296n\n", "/**\n * Calculates the UTF8 byte length of a string\n */\nexport function length (string: string): number {\n  let len = 0\n  let c = 0\n  for (let i = 0; i < string.length; ++i) {\n    c = string.charCodeAt(i)\n\n    if (c < 128) {\n      len += 1\n    } else if (c < 2048) {\n      len += 2\n    } else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n      ++i\n      len += 4\n    } else {\n      len += 3\n    }\n  }\n\n  return len\n}\n\n/**\n * Reads UTF8 bytes as a string\n */\nexport function read (buffer: Uint8Array, start: number, end: number): string {\n  const len = end - start\n\n  if (len < 1) {\n    return ''\n  }\n\n  let parts: string[] | undefined\n  const chunk: number[] = []\n  let i = 0 // char offset\n  let t: number // temporary\n\n  while (start < end) {\n    t = buffer[start++]\n\n    if (t < 128) {\n      chunk[i++] = t\n    } else if (t > 191 && t < 224) {\n      chunk[i++] = (t & 31) << 6 | buffer[start++] & 63\n    } else if (t > 239 && t < 365) {\n      t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000\n      chunk[i++] = 0xD800 + (t >> 10)\n      chunk[i++] = 0xDC00 + (t & 1023)\n    } else {\n      chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63\n    }\n\n    if (i > 8191) {\n      (parts ?? (parts = [])).push(String.fromCharCode.apply(String, chunk))\n      i = 0\n    }\n  }\n\n  if (parts != null) {\n    if (i > 0) {\n      parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)))\n    }\n\n    return parts.join('')\n  }\n\n  return String.fromCharCode.apply(String, chunk.slice(0, i))\n}\n\n/**\n * Writes a string as UTF8 bytes\n */\nexport function write (string: string, buffer: Uint8Array, offset: number): number {\n  const start = offset\n  let c1 // character 1\n  let c2 // character 2\n\n  for (let i = 0; i < string.length; ++i) {\n    c1 = string.charCodeAt(i)\n\n    if (c1 < 128) {\n      buffer[offset++] = c1\n    } else if (c1 < 2048) {\n      buffer[offset++] = c1 >> 6 | 192\n      buffer[offset++] = c1 & 63 | 128\n    } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n      c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF)\n      ++i\n      buffer[offset++] = c1 >> 18 | 240\n      buffer[offset++] = c1 >> 12 & 63 | 128\n      buffer[offset++] = c1 >> 6 & 63 | 128\n      buffer[offset++] = c1 & 63 | 128\n    } else {\n      buffer[offset++] = c1 >> 12 | 224\n      buffer[offset++] = c1 >> 6 & 63 | 128\n      buffer[offset++] = c1 & 63 | 128\n    }\n  }\n\n  return offset - start\n}\n", "import { decodeUint8Array, encodingLength } from 'uint8-varint'\nimport { readFloatLE, readDoubleLE } from './float.js'\nimport { LongBits } from './longbits.js'\nimport * as utf8 from './utf8.js'\nimport type { Reader } from '../index.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\n/* istanbul ignore next */\nfunction indexOutOfRange (reader: Reader, writeLength?: number): RangeError {\n  return RangeError(`index out of range: ${reader.pos} + ${writeLength ?? 1} > ${reader.len}`)\n}\n\nfunction readFixed32End (buf: Uint8Array, end: number): number { // note that this uses `end`, not `pos`\n  return (buf[end - 4] |\n        buf[end - 3] << 8 |\n        buf[end - 2] << 16 |\n        buf[end - 1] << 24) >>> 0\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n */\nexport class Uint8ArrayReader implements Reader {\n  public buf: Uint8Array\n  public pos: number\n  public len: number\n\n  public _slice = Uint8Array.prototype.subarray\n\n  constructor (buffer: Uint8Array) {\n    /**\n     * Read buffer\n     */\n    this.buf = buffer\n\n    /**\n     * Read buffer position\n     */\n    this.pos = 0\n\n    /**\n     * Read buffer length\n     */\n    this.len = buffer.length\n  }\n\n  /**\n   * Reads a varint as an unsigned 32 bit value\n   */\n  uint32 (): number {\n    let value = 4294967295\n\n    value = (this.buf[this.pos] & 127) >>> 0; if (this.buf[this.pos++] < 128) return value\n    value = (value | (this.buf[this.pos] & 127) << 7) >>> 0; if (this.buf[this.pos++] < 128) return value\n    value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value\n    value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value\n    value = (value | (this.buf[this.pos] & 15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value\n\n    if ((this.pos += 5) > this.len) {\n      this.pos = this.len\n      throw indexOutOfRange(this, 10)\n    }\n\n    return value\n  }\n\n  /**\n   * Reads a varint as a signed 32 bit value\n   */\n  int32 (): number {\n    return this.uint32() | 0\n  }\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 32 bit value\n   */\n  sint32 (): number {\n    const value = this.uint32()\n    return value >>> 1 ^ -(value & 1) | 0\n  }\n\n  /**\n   * Reads a varint as a boolean\n   */\n  bool (): boolean {\n    return this.uint32() !== 0\n  }\n\n  /**\n   * Reads fixed 32 bits as an unsigned 32 bit integer\n   */\n  fixed32 (): number {\n    if (this.pos + 4 > this.len) { throw indexOutOfRange(this, 4) }\n\n    const res = readFixed32End(this.buf, this.pos += 4)\n\n    return res\n  }\n\n  /**\n   * Reads fixed 32 bits as a signed 32 bit integer\n   */\n  sfixed32 (): number {\n    if (this.pos + 4 > this.len) {\n      throw indexOutOfRange(this, 4)\n    }\n\n    const res = readFixed32End(this.buf, this.pos += 4) | 0\n\n    return res\n  }\n\n  /**\n   * Reads a float (32 bit) as a number\n   */\n  float (): number {\n    if (this.pos + 4 > this.len) {\n      throw indexOutOfRange(this, 4)\n    }\n\n    const value = readFloatLE(this.buf, this.pos)\n    this.pos += 4\n    return value\n  }\n\n  /**\n   * Reads a double (64 bit float) as a number\n   */\n  double (): number {\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len) { throw indexOutOfRange(this, 4) }\n\n    const value = readDoubleLE(this.buf, this.pos)\n    this.pos += 8\n    return value\n  }\n\n  /**\n   * Reads a sequence of bytes preceded by its length as a varint\n   */\n  bytes (): Uint8Array {\n    const length = this.uint32()\n    const start = this.pos\n    const end = this.pos + length\n\n    /* istanbul ignore if */\n    if (end > this.len) {\n      throw indexOutOfRange(this, length)\n    }\n\n    this.pos += length\n\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n      ? new Uint8Array(0)\n      : this.buf.subarray(start, end)\n  }\n\n  /**\n   * Reads a string preceded by its byte length as a varint\n   */\n  string (): string {\n    const bytes = this.bytes()\n    return utf8.read(bytes, 0, bytes.length)\n  }\n\n  /**\n   * Skips the specified number of bytes if specified, otherwise skips a varint\n   */\n  skip (length?: number): this {\n    if (typeof length === 'number') {\n      /* istanbul ignore if */\n      if (this.pos + length > this.len) { throw indexOutOfRange(this, length) }\n      this.pos += length\n    } else {\n      do {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) {\n          throw indexOutOfRange(this)\n        }\n      } while ((this.buf[this.pos++] & 128) !== 0)\n    }\n    return this\n  }\n\n  /**\n   * Skips the next element of the specified wire type\n   */\n  skipType (wireType: number): this {\n    switch (wireType) {\n      case 0:\n        this.skip()\n        break\n      case 1:\n        this.skip(8)\n        break\n      case 2:\n        this.skip(this.uint32())\n        break\n      case 3:\n        while ((wireType = this.uint32() & 7) !== 4) {\n          this.skipType(wireType)\n        }\n        break\n      case 5:\n        this.skip(4)\n        break\n\n        /* istanbul ignore next */\n      default:\n        throw Error(`invalid wire type ${wireType} at offset ${this.pos}`)\n    }\n    return this\n  }\n\n  private readLongVarint (): LongBits {\n    // tends to deopt with local vars for octet etc.\n    const bits = new LongBits(0, 0)\n    let i = 0\n    if (this.len - this.pos > 4) { // fast route (lo)\n      for (; i < 4; ++i) {\n        // 1st..4th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0\n        if (this.buf[this.pos++] < 128) { return bits }\n      }\n      // 5th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0\n      if (this.buf[this.pos++] < 128) { return bits }\n      i = 0\n    } else {\n      for (; i < 3; ++i) {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) { throw indexOutOfRange(this) }\n        // 1st..3th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0\n        if (this.buf[this.pos++] < 128) { return bits }\n      }\n      // 4th\n      bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0\n      return bits\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n      for (; i < 5; ++i) {\n        // 6th..10th\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0\n        if (this.buf[this.pos++] < 128) { return bits }\n      }\n    } else {\n      for (; i < 5; ++i) {\n        if (this.pos >= this.len) {\n          throw indexOutOfRange(this)\n        }\n\n        // 6th..10th\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0\n        if (this.buf[this.pos++] < 128) { return bits }\n      }\n    }\n\n    throw Error('invalid varint encoding')\n  }\n\n  private readFixed64 (): LongBits {\n    if (this.pos + 8 > this.len) {\n      throw indexOutOfRange(this, 8)\n    }\n\n    const lo = readFixed32End(this.buf, this.pos += 4)\n    const hi = readFixed32End(this.buf, this.pos += 4)\n\n    return new LongBits(lo, hi)\n  }\n\n  /**\n   * Reads a varint as a signed 64 bit value\n   */\n  int64 (): bigint {\n    return this.readLongVarint().toBigInt()\n  }\n\n  /**\n   * Reads a varint as a signed 64 bit value returned as a possibly unsafe\n   * JavaScript number\n   */\n  int64Number (): number {\n    return this.readLongVarint().toNumber()\n  }\n\n  /**\n   * Reads a varint as a signed 64 bit value returned as a string\n   */\n  int64String (): string {\n    return this.readLongVarint().toString()\n  }\n\n  /**\n   * Reads a varint as an unsigned 64 bit value\n   */\n  uint64 (): bigint {\n    return this.readLongVarint().toBigInt(true)\n  }\n\n  /**\n   * Reads a varint as an unsigned 64 bit value returned as a possibly unsafe\n   * JavaScript number\n   */\n  uint64Number (): number {\n    const value = decodeUint8Array(this.buf, this.pos)\n    this.pos += encodingLength(value)\n    return value\n  }\n\n  /**\n   * Reads a varint as an unsigned 64 bit value returned as a string\n   */\n  uint64String (): string {\n    return this.readLongVarint().toString(true)\n  }\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 64 bit value\n   */\n  sint64 (): bigint {\n    return this.readLongVarint().zzDecode().toBigInt()\n  }\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 64 bit value returned as a\n   * possibly unsafe JavaScript number\n   */\n  sint64Number (): number {\n    return this.readLongVarint().zzDecode().toNumber()\n  }\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 64 bit value returned as a\n   * string\n   */\n  sint64String (): string {\n    return this.readLongVarint().zzDecode().toString()\n  }\n\n  /**\n   * Reads fixed 64 bits\n   */\n  fixed64 (): bigint {\n    return this.readFixed64().toBigInt()\n  }\n\n  /**\n   * Reads fixed 64 bits returned as a possibly unsafe JavaScript number\n   */\n  fixed64Number (): number {\n    return this.readFixed64().toNumber()\n  }\n\n  /**\n   * Reads fixed 64 bits returned as a string\n   */\n  fixed64String (): string {\n    return this.readFixed64().toString()\n  }\n\n  /**\n   * Reads zig-zag encoded fixed 64 bits\n   */\n  sfixed64 (): bigint {\n    return this.readFixed64().toBigInt()\n  }\n\n  /**\n   * Reads zig-zag encoded fixed 64 bits returned as a possibly unsafe\n   * JavaScript number\n   */\n  sfixed64Number (): number {\n    return this.readFixed64().toNumber()\n  }\n\n  /**\n   * Reads zig-zag encoded fixed 64 bits returned as a string\n   */\n  sfixed64String (): string {\n    return this.readFixed64().toString()\n  }\n}\n\nexport function createReader (buf: Uint8Array | Uint8ArrayList): Reader {\n  return new Uint8ArrayReader(buf instanceof Uint8Array ? buf : buf.subarray())\n}\n", "import { createReader } from './utils/reader.js'\nimport type { Codec, DecodeOptions } from './codec.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport function decodeMessage <T> (buf: Uint8Array | Uint8ArrayList, codec: Pick<Codec<T>, 'decode'>, opts?: DecodeOptions<T>): T {\n  const reader = createReader(buf)\n\n  return codec.decode(reader, undefined, opts)\n}\n", "import { allocUnsafe } from 'uint8arrays/alloc'\n\n/**\n * A general purpose buffer pool\n */\nexport default function pool (size?: number): (size: number) => Uint8Array {\n  const SIZE = size ?? 8192\n  const MAX = SIZE >>> 1\n  let slab: Uint8Array\n  let offset = SIZE\n  return function poolAlloc (size: number) {\n    if (size < 1 || size > MAX) {\n      return allocUnsafe(size)\n    }\n\n    if (offset + size > SIZE) {\n      slab = allocUnsafe(SIZE)\n      offset = 0\n    }\n\n    const buf = slab.subarray(offset, offset += size)\n\n    if ((offset & 7) !== 0) {\n      // align to 32 bit\n      offset = (offset | 7) + 1\n    }\n\n    return buf\n  }\n}\n", "import { encodeUint8Array, encodingLength } from 'uint8-varint'\nimport { allocUnsafe } from 'uint8arrays/alloc'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { writeFloatLE, writeDoubleLE } from './float.js'\nimport { LongBits } from './longbits.js'\nimport pool from './pool.js'\nimport * as utf8 from './utf8.js'\nimport type { Writer } from '../index.js'\n\ninterface WriterOperation<T> {\n  (val: T, buf: Uint8Array, pos: number): any\n}\n\n/**\n * Constructs a new writer operation instance.\n *\n * @classdesc Scheduled writer operation\n */\nclass Op<T> {\n  /**\n   * Function to call\n   */\n  public fn: WriterOperation<T>\n\n  /**\n   * Value byte length\n   */\n  public len: number\n\n  /**\n   * Next operation\n   */\n  public next?: Op<any>\n\n  /**\n   * Value to write\n   */\n  public val: T\n\n  constructor (fn: WriterOperation<T>, len: number, val: T) {\n    this.fn = fn\n    this.len = len\n    this.next = undefined\n    this.val = val // type varies\n  }\n}\n\n/* istanbul ignore next */\nfunction noop (): void {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance\n */\nclass State {\n  /**\n   * Current head\n   */\n  public head: Op<any>\n\n  /**\n   * Current tail\n   */\n  public tail: Op<any>\n\n  /**\n   * Current buffer length\n   */\n  public len: number\n\n  /**\n   * Next state\n   */\n  public next?: State\n\n  constructor (writer: Uint8ArrayWriter) {\n    this.head = writer.head\n    this.tail = writer.tail\n    this.len = writer.len\n    this.next = writer.states\n  }\n}\n\nconst bufferPool = pool()\n\n/**\n * Allocates a buffer of the specified size\n */\nfunction alloc (size: number): Uint8Array {\n  if (globalThis.Buffer != null) {\n    return allocUnsafe(size)\n  }\n\n  return bufferPool(size)\n}\n\n/**\n * When a value is written, the writer calculates its byte length and puts it into a linked\n * list of operations to perform when finish() is called. This both allows us to allocate\n * buffers of the exact required size and reduces the amount of work we have to do compared\n * to first calculating over objects and then encoding over objects. In our case, the encoding\n * part is just a linked list walk calling operations with already prepared values.\n */\nclass Uint8ArrayWriter implements Writer {\n  /**\n   * Current length\n   */\n  public len: number\n\n  /**\n   * Operations head\n   */\n  public head: Op<any>\n\n  /**\n   * Operations tail\n   */\n  public tail: Op<any>\n\n  /**\n   * Linked forked states\n   */\n  public states?: any\n\n  constructor () {\n    this.len = 0\n    this.head = new Op(noop, 0, 0)\n    this.tail = this.head\n    this.states = null\n  }\n\n  /**\n   * Pushes a new operation to the queue\n   */\n  _push (fn: WriterOperation<any>, len: number, val: any): this {\n    this.tail = this.tail.next = new Op(fn, len, val)\n    this.len += len\n\n    return this\n  }\n\n  /**\n   * Writes an unsigned 32 bit value as a varint\n   */\n  uint32 (value: number): this {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n      (value = value >>> 0) <\n                128\n        ? 1\n        : value < 16384\n          ? 2\n          : value < 2097152\n            ? 3\n            : value < 268435456\n              ? 4\n              : 5,\n      value)).len\n    return this\n  }\n\n  /**\n   * Writes a signed 32 bit value as a varint`\n   */\n  int32 (value: number): this {\n    return value < 0\n      ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n      : this.uint32(value)\n  }\n\n  /**\n   * Writes a 32 bit value as a varint, zig-zag encoded\n   */\n  sint32 (value: number): this {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as a varint\n   */\n  uint64 (value: bigint): this {\n    const bits = LongBits.fromBigInt(value)\n    return this._push(writeVarint64, bits.length(), bits)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as a varint\n   */\n  uint64Number (value: number): this {\n    return this._push(encodeUint8Array, encodingLength(value), value)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as a varint\n   */\n  uint64String (value: string): this {\n    return this.uint64(BigInt(value))\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint\n   */\n  int64 (value: bigint): this {\n    return this.uint64(value)\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint\n   */\n  int64Number (value: number): this {\n    return this.uint64Number(value)\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint\n   */\n  int64String (value: string): this {\n    return this.uint64String(value)\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint, zig-zag encoded\n   */\n  sint64 (value: bigint): this {\n    const bits = LongBits.fromBigInt(value).zzEncode()\n    return this._push(writeVarint64, bits.length(), bits)\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint, zig-zag encoded\n   */\n  sint64Number (value: number): this {\n    const bits = LongBits.fromNumber(value).zzEncode()\n    return this._push(writeVarint64, bits.length(), bits)\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint, zig-zag encoded\n   */\n  sint64String (value: string): this {\n    return this.sint64(BigInt(value))\n  }\n\n  /**\n   * Writes a boolish value as a varint\n   */\n  bool (value: boolean): this {\n    return this._push(writeByte, 1, value ? 1 : 0)\n  }\n\n  /**\n   * Writes an unsigned 32 bit value as fixed 32 bits\n   */\n  fixed32 (value: number): this {\n    return this._push(writeFixed32, 4, value >>> 0)\n  }\n\n  /**\n   * Writes a signed 32 bit value as fixed 32 bits\n   */\n  sfixed32 (value: number): this {\n    return this.fixed32(value)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as fixed 64 bits\n   */\n  fixed64 (value: bigint): this {\n    const bits = LongBits.fromBigInt(value)\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as fixed 64 bits\n   */\n  fixed64Number (value: number): this {\n    const bits = LongBits.fromNumber(value)\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as fixed 64 bits\n   */\n  fixed64String (value: string): this {\n    return this.fixed64(BigInt(value))\n  }\n\n  /**\n   * Writes a signed 64 bit value as fixed 64 bits\n   */\n  sfixed64 (value: bigint): this {\n    return this.fixed64(value)\n  }\n\n  /**\n   * Writes a signed 64 bit value as fixed 64 bits\n   */\n  sfixed64Number (value: number): this {\n    return this.fixed64Number(value)\n  }\n\n  /**\n   * Writes a signed 64 bit value as fixed 64 bits\n   */\n  sfixed64String (value: string): this {\n    return this.fixed64String(value)\n  }\n\n  /**\n   * Writes a float (32 bit)\n   */\n  float (value: number): this {\n    return this._push(writeFloatLE, 4, value)\n  }\n\n  /**\n   * Writes a double (64 bit float).\n   *\n   * @function\n   * @param {number} value - Value to write\n   * @returns {Writer} `this`\n   */\n  double (value: number): this {\n    return this._push(writeDoubleLE, 8, value)\n  }\n\n  /**\n   * Writes a sequence of bytes\n   */\n  bytes (value: Uint8Array): this {\n    const len = value.length >>> 0\n\n    if (len === 0) {\n      return this._push(writeByte, 1, 0)\n    }\n\n    return this.uint32(len)._push(writeBytes, len, value)\n  }\n\n  /**\n   * Writes a string\n   */\n  string (value: string): this {\n    const len = utf8.length(value)\n    return len !== 0\n      ? this.uint32(len)._push(utf8.write, len, value)\n      : this._push(writeByte, 1, 0)\n  }\n\n  /**\n   * Forks this writer's state by pushing it to a stack.\n   * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n   */\n  fork (): this {\n    this.states = new State(this)\n    this.head = this.tail = new Op(noop, 0, 0)\n    this.len = 0\n    return this\n  }\n\n  /**\n   * Resets this instance to the last state\n   */\n  reset (): this {\n    if (this.states != null) {\n      this.head = this.states.head\n      this.tail = this.states.tail\n      this.len = this.states.len\n      this.states = this.states.next\n    } else {\n      this.head = this.tail = new Op(noop, 0, 0)\n      this.len = 0\n    }\n    return this\n  }\n\n  /**\n   * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n   */\n  ldelim (): this {\n    const head = this.head\n    const tail = this.tail\n    const len = this.len\n    this.reset().uint32(len)\n    if (len !== 0) {\n      this.tail.next = head.next // skip noop\n      this.tail = tail\n      this.len += len\n    }\n    return this\n  }\n\n  /**\n   * Finishes the write operation\n   */\n  finish (): Uint8Array {\n    let head = this.head.next // skip noop\n    const buf = alloc(this.len)\n    let pos = 0\n    while (head != null) {\n      head.fn(head.val, buf, pos)\n      pos += head.len\n      head = head.next\n    }\n    // this.head = this.tail = null;\n    return buf\n  }\n}\n\nfunction writeByte (val: number, buf: Uint8Array, pos: number): void {\n  buf[pos] = val & 255\n}\n\nfunction writeVarint32 (val: number, buf: Uint8Array, pos: number): void {\n  while (val > 127) {\n    buf[pos++] = val & 127 | 128\n    val >>>= 7\n  }\n  buf[pos] = val\n}\n\n/**\n * Constructs a new varint writer operation instance.\n *\n * @classdesc Scheduled varint writer operation\n */\nclass VarintOp extends Op<number> {\n  public next?: Op<any>\n\n  constructor (len: number, val: number) {\n    super(writeVarint32, len, val)\n    this.next = undefined\n  }\n}\n\nfunction writeVarint64 (val: LongBits, buf: Uint8Array, pos: number): void {\n  while (val.hi !== 0) {\n    buf[pos++] = val.lo & 127 | 128\n    val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0\n    val.hi >>>= 7\n  }\n  while (val.lo > 127) {\n    buf[pos++] = val.lo & 127 | 128\n    val.lo = val.lo >>> 7\n  }\n  buf[pos++] = val.lo\n}\n\nfunction writeFixed32 (val: number, buf: Uint8Array, pos: number): void {\n  buf[pos] = val & 255\n  buf[pos + 1] = val >>> 8 & 255\n  buf[pos + 2] = val >>> 16 & 255\n  buf[pos + 3] = val >>> 24\n}\n\nfunction writeBytes (val: Uint8Array, buf: Uint8Array, pos: number): void {\n  buf.set(val, pos)\n}\n\nif (globalThis.Buffer != null) {\n  Uint8ArrayWriter.prototype.bytes = function (value: Uint8Array) {\n    const len = value.length >>> 0\n\n    this.uint32(len)\n\n    if (len > 0) {\n      this._push(writeBytesBuffer, len, value)\n    }\n\n    return this\n  }\n\n  Uint8ArrayWriter.prototype.string = function (value: string) {\n    const len = globalThis.Buffer.byteLength(value)\n\n    this.uint32(len)\n\n    if (len > 0) {\n      this._push(writeStringBuffer, len, value)\n    }\n\n    return this\n  }\n}\n\nfunction writeBytesBuffer (val: Uint8Array, buf: Uint8Array, pos: number): void {\n  buf.set(val, pos) // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n  // also works for plain array values\n}\n\nfunction writeStringBuffer (val: string, buf: Uint8Array, pos: number): void {\n  if (val.length < 40) {\n    // plain js is faster for short strings (probably due to redundant assertions)\n    utf8.write(val, buf, pos)\n    // @ts-expect-error buf isn't a Uint8Array?\n  } else if (buf.utf8Write != null) {\n    // @ts-expect-error buf isn't a Uint8Array?\n    buf.utf8Write(val, pos)\n  } else {\n    buf.set(uint8ArrayFromString(val), pos)\n  }\n}\n\n/**\n * Creates a new writer\n */\nexport function createWriter (): Writer {\n  return new Uint8ArrayWriter()\n}\n", "import { createWriter } from './utils/writer.js'\nimport type { Codec } from './codec.js'\n\nexport function encodeMessage <T> (message: Partial<T>, codec: Pick<Codec<T>, 'encode'>): Uint8Array {\n  const w = createWriter()\n\n  codec.encode(message, w, {\n    lengthDelimited: false\n  })\n\n  return w.finish()\n}\n", "import type { Writer, Reader } from './index.js'\n\n// https://developers.google.com/protocol-buffers/docs/encoding#structure\nexport enum CODEC_TYPES {\n  VARINT = 0,\n  BIT64,\n  LENGTH_DELIMITED,\n  START_GROUP,\n  END_GROUP,\n  BIT32\n}\n\nexport interface EncodeOptions {\n  lengthDelimited?: boolean\n  writeDefaults?: boolean\n}\n\nexport interface EncodeFunction<T> {\n  (value: Partial<T>, writer: Writer, opts?: EncodeOptions): void\n}\n\n// protobuf types that contain multiple values\ntype CollectionTypes = any[] | Map<any, any>\n\n// protobuf types that are not collections or messages\ntype PrimitiveTypes = boolean | number | string | bigint | Uint8Array\n\n// recursive array/map field length limits\ntype CollectionLimits <T> = {\n  [K in keyof T]: T[K] extends CollectionTypes ? number :\n    T[K] extends PrimitiveTypes ? never : Limits<T[K]>\n}\n\n// recursive array member array/map field length limits\ntype ArrayElementLimits <T> = {\n  [K in keyof T as `${string & K}$`]: T[K] extends Array<infer ElementType> ?\n      (ElementType extends PrimitiveTypes ? never : Limits<ElementType>) :\n      (T[K] extends PrimitiveTypes ? never : Limits<T[K]>)\n}\n\n// recursive map value array/map field length limits\ntype MapValueLimits <T> = {\n  [K in keyof T as `${string & K}$value`]: T[K] extends Map<any, infer MapValueType> ?\n      (MapValueType extends PrimitiveTypes ? never : Limits<MapValueType>) :\n      (T[K] extends PrimitiveTypes ? never : Limits<T[K]>)\n}\n\n// union of collection and array elements\ntype Limits<T> = Partial<CollectionLimits<T> & ArrayElementLimits<T> & MapValueLimits<T>>\n\nexport interface DecodeOptions<T> {\n  /**\n   * Runtime-specified limits for lengths of repeated/map fields\n   */\n  limits?: Limits<T>\n}\n\nexport interface DecodeFunction<T> {\n  (reader: Reader, length?: number, opts?: DecodeOptions<T>): T\n}\n\nexport interface Codec<T> {\n  name: string\n  type: CODEC_TYPES\n  encode: EncodeFunction<T>\n  decode: DecodeFunction<T>\n}\n\nexport function createCodec <T> (name: string, type: CODEC_TYPES, encode: EncodeFunction<T>, decode: DecodeFunction<T>): Codec<T> {\n  return {\n    name,\n    type,\n    encode,\n    decode\n  }\n}\n", "import { createCodec, CODEC_TYPES } from '../codec.js'\nimport type { DecodeFunction, EncodeFunction, Codec } from '../codec.js'\n\nexport function enumeration <T> (v: any): Codec<T> {\n  function findValue (val: string | number): number {\n    // Use the reverse mapping to look up the enum key for the stored value\n    // https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\n    if (v[val.toString()] == null) {\n      throw new Error('Invalid enum value')\n    }\n\n    return v[val]\n  }\n\n  const encode: EncodeFunction<number | string> = function enumEncode (val, writer) {\n    const enumValue = findValue(val)\n\n    writer.int32(enumValue)\n  }\n\n  const decode: DecodeFunction<number | string> = function enumDecode (reader) {\n    const val = reader.int32()\n\n    return findValue(val)\n  }\n\n  // @ts-expect-error yeah yeah\n  return createCodec('enum', CODEC_TYPES.VARINT, encode, decode)\n}\n", "import { createCodec, CODEC_TYPES, type EncodeFunction, type DecodeFunction, type Codec } from '../codec.js'\n\nexport interface Factory<A, T> {\n  new (obj: A): T\n}\n\nexport function message <T> (encode: EncodeFunction<T>, decode: DecodeFunction<T>): Codec<T> {\n  return createCodec('message', CODEC_TYPES.LENGTH_DELIMITED, encode, decode)\n}\n"],
  "mappings": "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",
  "names": ["length", "size", "message", "CODEC_TYPES"]
}
