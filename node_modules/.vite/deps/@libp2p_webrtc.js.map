{
  "version": 3,
  "sources": ["../../@multiformats/base-x/src/index.js", "../../multibase/src/util.js", "../../multibase/src/base.js", "../../multibase/src/rfc4648.js", "../../multibase/src/constants.js", "../../multibase/src/index.js", "../../varint/encode.js", "../../varint/decode.js", "../../varint/length.js", "../../varint/index.js", "../../multihashes/src/constants.js", "../../multihashes/node_modules/multiformats/esm/vendor/base-x.js", "../../multihashes/node_modules/multiformats/esm/src/bytes.js", "../../multihashes/node_modules/multiformats/esm/src/bases/base.js", "../../multihashes/node_modules/multiformats/esm/src/bases/identity.js", "../../multihashes/node_modules/multiformats/esm/src/bases/base2.js", "../../multihashes/node_modules/multiformats/esm/src/bases/base8.js", "../../multihashes/node_modules/multiformats/esm/src/bases/base10.js", "../../multihashes/node_modules/multiformats/esm/src/bases/base16.js", "../../multihashes/node_modules/multiformats/esm/src/bases/base32.js", "../../multihashes/node_modules/multiformats/esm/src/bases/base36.js", "../../multihashes/node_modules/multiformats/esm/src/bases/base58.js", "../../multihashes/node_modules/multiformats/esm/src/bases/base64.js", "../../multihashes/node_modules/multiformats/esm/src/bases/base256emoji.js", "../../multihashes/node_modules/multiformats/esm/vendor/varint.js", "../../multihashes/node_modules/multiformats/esm/src/varint.js", "../../multihashes/node_modules/multiformats/esm/src/hashes/digest.js", "../../multihashes/node_modules/multiformats/esm/src/hashes/hasher.js", "../../multihashes/node_modules/multiformats/esm/src/hashes/sha2-browser.js", "../../multihashes/node_modules/multiformats/esm/src/hashes/identity.js", "../../multihashes/node_modules/multiformats/esm/src/codecs/raw.js", "../../multihashes/node_modules/multiformats/esm/src/codecs/json.js", "../../multihashes/node_modules/multiformats/esm/src/cid.js", "../../multihashes/node_modules/multiformats/esm/src/index.js", "../../multihashes/node_modules/multiformats/esm/src/basics.js", "../../multihashes/node_modules/uint8arrays/esm/src/util/as-uint8array.js", "../../multihashes/node_modules/uint8arrays/esm/src/alloc.js", "../../multihashes/node_modules/uint8arrays/esm/src/util/bases.js", "../../multihashes/node_modules/uint8arrays/esm/src/to-string.js", "../../multihashes/node_modules/uint8arrays/esm/src/from-string.js", "../../multihashes/node_modules/uint8arrays/esm/src/concat.js", "../../multihashes/src/index.js", "../../@libp2p/webrtc/src/error.ts", "../../detect-browser/es/index.js", "../../@libp2p/webrtc/src/util.ts", "../../@libp2p/webrtc/src/maconn.ts", "../../p-event/index.js", "../../@libp2p/webrtc/src/pb/message.ts", "../../@libp2p/webrtc/src/stream.ts", "../../@libp2p/webrtc/src/muxer.ts", "../../@libp2p/webrtc/src/webrtc/index.browser.ts", "../../@libp2p/webrtc/src/private-to-private/pb/message.ts", "../../@libp2p/webrtc/src/private-to-private/util.ts", "../../@libp2p/webrtc/src/private-to-private/initiate-connection.ts", "../../@libp2p/webrtc/src/private-to-private/listener.ts", "../../@libp2p/webrtc/src/private-to-private/signaling-stream-handler.ts", "../../@libp2p/webrtc/src/private-to-private/transport.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/constants.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/crypto/js.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/crypto/index.browser.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/crypto.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/encoder.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/metrics.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/logger.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/errors.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/nonce.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/protocol.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/proto/payload.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/utils.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/performHandshake.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/streaming.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/noise.ts", "../../@libp2p/webrtc/node_modules/@chainsafe/libp2p-noise/src/index.ts", "../../@libp2p/webrtc/src/private-to-public/transport.ts", "../../@libp2p/webrtc/src/private-to-public/sdp.ts", "../../@libp2p/webrtc/src/private-to-public/util.ts", "../../@libp2p/webrtc/src/index.ts"],
  "sourcesContent": ["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "'use strict'\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrs, length) {\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrs) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = { decodeText, encodeText, concat }\n", "'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n", "'use strict'\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i])\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */\nconst rfc4648 = (bitsPerChar) => (alphabet) => {\n  return {\n    /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar)\n    }\n  }\n}\n\nmodule.exports = { rfc4648 }\n", "'use strict'\n\nconst baseX = require('@multiformats/base-x')\nconst Base = require('./base.js')\nconst { rfc4648 } = require('./rfc4648')\nconst { decodeText, encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import('./types').Codec} Codec */\n/** @typedef {import('./types').BaseName} BaseName */\n/** @typedef {import('./types').BaseCode} BaseCode */\n\n/** @type {CodecFactory} */\nconst identity = () => {\n  return {\n    encode: decodeText,\n    decode: encodeText\n  }\n}\n\n/**\n *\n * name, code, implementation, alphabet\n *\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\n */\nconst constants = [\n  ['identity', '\\x00', identity, ''],\n  ['base2', '0', rfc4648(1), '01'],\n  ['base8', '7', rfc4648(3), '01234567'],\n  ['base10', '9', baseX, '0123456789'],\n  ['base16', 'f', rfc4648(4), '0123456789abcdef'],\n  ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],\n  ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],\n  ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],\n  ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],\n  ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],\n  ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],\n  ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],\n  ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],\n  ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],\n  ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],\n  ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],\n  ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\n  ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\n  ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\n  ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\n  ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\n]\n\n/** @type {Record<BaseName,Base>} */\nconst names = constants.reduce((prev, tupple) => {\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\n  return prev\n}, /** @type {Record<BaseName,Base>} */({}))\n\n/** @type {Record<BaseCode,Base>} */\nconst codes = constants.reduce((prev, tupple) => {\n  prev[tupple[1]] = names[tupple[0]]\n  return prev\n}, /** @type {Record<BaseCode,Base>} */({}))\n\nmodule.exports = {\n  names,\n  codes\n}\n", "/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */\n'use strict'\n\nconst constants = require('./constants')\nconst { encodeText, decodeText, concat } = require('./util')\n\n/** @typedef {import('./base')} Base */\n/** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array')\n  }\n  const { name, codeBuf } = encoding(nameOrCode)\n  validEncode(name, buf)\n\n  return concat([codeBuf, buf], codeBuf.length + buf.length)\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n  const data = encodeText(enc.encode(buf))\n\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(/** @type {BaseCode} */(data[0]))\n  return enc.decode(data.substring(1))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */\nfunction isEncoded (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(/** @type {BaseCode} */(data[0]))\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(decodeText(buf))\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {\n    return constants.names[/** @type {BaseName} */(nameOrCode)]\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {\n    return constants.codes[/** @type {BaseCode} */(nameOrCode)]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  return encoding(/** @type {BaseCode} */(data[0]))\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nconst names = Object.freeze(constants.names)\nconst codes = Object.freeze(constants.codes)\nexports.names = names\nexports.codes = codes\n", "module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n", "module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n", "\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n", "module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n", "/* eslint quote-props: off */\n'use strict'\n\n/**\n * Names for all available hashes\n *\n * @typedef { \"identity\" | \"sha1\" | \"sha2-256\" | \"sha2-512\" | \"sha3-512\" | \"sha3-384\" | \"sha3-256\" | \"sha3-224\" | \"shake-128\" | \"shake-256\" | \"keccak-224\" | \"keccak-256\" | \"keccak-384\" | \"keccak-512\" | \"blake3\" | \"murmur3-128\" | \"murmur3-32\" | \"dbl-sha2-256\" | \"md4\" | \"md5\" | \"bmt\" | \"sha2-256-trunc254-padded\" | \"ripemd-128\" | \"ripemd-160\" | \"ripemd-256\" | \"ripemd-320\" | \"x11\" | \"kangarootwelve\" | \"sm3-256\" | \"blake2b-8\" | \"blake2b-16\" | \"blake2b-24\" | \"blake2b-32\" | \"blake2b-40\" | \"blake2b-48\" | \"blake2b-56\" | \"blake2b-64\" | \"blake2b-72\" | \"blake2b-80\" | \"blake2b-88\" | \"blake2b-96\" | \"blake2b-104\" | \"blake2b-112\" | \"blake2b-120\" | \"blake2b-128\" | \"blake2b-136\" | \"blake2b-144\" | \"blake2b-152\" | \"blake2b-160\" | \"blake2b-168\" | \"blake2b-176\" | \"blake2b-184\" | \"blake2b-192\" | \"blake2b-200\" | \"blake2b-208\" | \"blake2b-216\" | \"blake2b-224\" | \"blake2b-232\" | \"blake2b-240\" | \"blake2b-248\" | \"blake2b-256\" | \"blake2b-264\" | \"blake2b-272\" | \"blake2b-280\" | \"blake2b-288\" | \"blake2b-296\" | \"blake2b-304\" | \"blake2b-312\" | \"blake2b-320\" | \"blake2b-328\" | \"blake2b-336\" | \"blake2b-344\" | \"blake2b-352\" | \"blake2b-360\" | \"blake2b-368\" | \"blake2b-376\" | \"blake2b-384\" | \"blake2b-392\" | \"blake2b-400\" | \"blake2b-408\" | \"blake2b-416\" | \"blake2b-424\" | \"blake2b-432\" | \"blake2b-440\" | \"blake2b-448\" | \"blake2b-456\" | \"blake2b-464\" | \"blake2b-472\" | \"blake2b-480\" | \"blake2b-488\" | \"blake2b-496\" | \"blake2b-504\" | \"blake2b-512\" | \"blake2s-8\" | \"blake2s-16\" | \"blake2s-24\" | \"blake2s-32\" | \"blake2s-40\" | \"blake2s-48\" | \"blake2s-56\" | \"blake2s-64\" | \"blake2s-72\" | \"blake2s-80\" | \"blake2s-88\" | \"blake2s-96\" | \"blake2s-104\" | \"blake2s-112\" | \"blake2s-120\" | \"blake2s-128\" | \"blake2s-136\" | \"blake2s-144\" | \"blake2s-152\" | \"blake2s-160\" | \"blake2s-168\" | \"blake2s-176\" | \"blake2s-184\" | \"blake2s-192\" | \"blake2s-200\" | \"blake2s-208\" | \"blake2s-216\" | \"blake2s-224\" | \"blake2s-232\" | \"blake2s-240\" | \"blake2s-248\" | \"blake2s-256\" | \"skein256-8\" | \"skein256-16\" | \"skein256-24\" | \"skein256-32\" | \"skein256-40\" | \"skein256-48\" | \"skein256-56\" | \"skein256-64\" | \"skein256-72\" | \"skein256-80\" | \"skein256-88\" | \"skein256-96\" | \"skein256-104\" | \"skein256-112\" | \"skein256-120\" | \"skein256-128\" | \"skein256-136\" | \"skein256-144\" | \"skein256-152\" | \"skein256-160\" | \"skein256-168\" | \"skein256-176\" | \"skein256-184\" | \"skein256-192\" | \"skein256-200\" | \"skein256-208\" | \"skein256-216\" | \"skein256-224\" | \"skein256-232\" | \"skein256-240\" | \"skein256-248\" | \"skein256-256\" | \"skein512-8\" | \"skein512-16\" | \"skein512-24\" | \"skein512-32\" | \"skein512-40\" | \"skein512-48\" | \"skein512-56\" | \"skein512-64\" | \"skein512-72\" | \"skein512-80\" | \"skein512-88\" | \"skein512-96\" | \"skein512-104\" | \"skein512-112\" | \"skein512-120\" | \"skein512-128\" | \"skein512-136\" | \"skein512-144\" | \"skein512-152\" | \"skein512-160\" | \"skein512-168\" | \"skein512-176\" | \"skein512-184\" | \"skein512-192\" | \"skein512-200\" | \"skein512-208\" | \"skein512-216\" | \"skein512-224\" | \"skein512-232\" | \"skein512-240\" | \"skein512-248\" | \"skein512-256\" | \"skein512-264\" | \"skein512-272\" | \"skein512-280\" | \"skein512-288\" | \"skein512-296\" | \"skein512-304\" | \"skein512-312\" | \"skein512-320\" | \"skein512-328\" | \"skein512-336\" | \"skein512-344\" | \"skein512-352\" | \"skein512-360\" | \"skein512-368\" | \"skein512-376\" | \"skein512-384\" | \"skein512-392\" | \"skein512-400\" | \"skein512-408\" | \"skein512-416\" | \"skein512-424\" | \"skein512-432\" | \"skein512-440\" | \"skein512-448\" | \"skein512-456\" | \"skein512-464\" | \"skein512-472\" | \"skein512-480\" | \"skein512-488\" | \"skein512-496\" | \"skein512-504\" | \"skein512-512\" | \"skein1024-8\" | \"skein1024-16\" | \"skein1024-24\" | \"skein1024-32\" | \"skein1024-40\" | \"skein1024-48\" | \"skein1024-56\" | \"skein1024-64\" | \"skein1024-72\" | \"skein1024-80\" | \"skein1024-88\" | \"skein1024-96\" | \"skein1024-104\" | \"skein1024-112\" | \"skein1024-120\" | \"skein1024-128\" | \"skein1024-136\" | \"skein1024-144\" | \"skein1024-152\" | \"skein1024-160\" | \"skein1024-168\" | \"skein1024-176\" | \"skein1024-184\" | \"skein1024-192\" | \"skein1024-200\" | \"skein1024-208\" | \"skein1024-216\" | \"skein1024-224\" | \"skein1024-232\" | \"skein1024-240\" | \"skein1024-248\" | \"skein1024-256\" | \"skein1024-264\" | \"skein1024-272\" | \"skein1024-280\" | \"skein1024-288\" | \"skein1024-296\" | \"skein1024-304\" | \"skein1024-312\" | \"skein1024-320\" | \"skein1024-328\" | \"skein1024-336\" | \"skein1024-344\" | \"skein1024-352\" | \"skein1024-360\" | \"skein1024-368\" | \"skein1024-376\" | \"skein1024-384\" | \"skein1024-392\" | \"skein1024-400\" | \"skein1024-408\" | \"skein1024-416\" | \"skein1024-424\" | \"skein1024-432\" | \"skein1024-440\" | \"skein1024-448\" | \"skein1024-456\" | \"skein1024-464\" | \"skein1024-472\" | \"skein1024-480\" | \"skein1024-488\" | \"skein1024-496\" | \"skein1024-504\" | \"skein1024-512\" | \"skein1024-520\" | \"skein1024-528\" | \"skein1024-536\" | \"skein1024-544\" | \"skein1024-552\" | \"skein1024-560\" | \"skein1024-568\" | \"skein1024-576\" | \"skein1024-584\" | \"skein1024-592\" | \"skein1024-600\" | \"skein1024-608\" | \"skein1024-616\" | \"skein1024-624\" | \"skein1024-632\" | \"skein1024-640\" | \"skein1024-648\" | \"skein1024-656\" | \"skein1024-664\" | \"skein1024-672\" | \"skein1024-680\" | \"skein1024-688\" | \"skein1024-696\" | \"skein1024-704\" | \"skein1024-712\" | \"skein1024-720\" | \"skein1024-728\" | \"skein1024-736\" | \"skein1024-744\" | \"skein1024-752\" | \"skein1024-760\" | \"skein1024-768\" | \"skein1024-776\" | \"skein1024-784\" | \"skein1024-792\" | \"skein1024-800\" | \"skein1024-808\" | \"skein1024-816\" | \"skein1024-824\" | \"skein1024-832\" | \"skein1024-840\" | \"skein1024-848\" | \"skein1024-856\" | \"skein1024-864\" | \"skein1024-872\" | \"skein1024-880\" | \"skein1024-888\" | \"skein1024-896\" | \"skein1024-904\" | \"skein1024-912\" | \"skein1024-920\" | \"skein1024-928\" | \"skein1024-936\" | \"skein1024-944\" | \"skein1024-952\" | \"skein1024-960\" | \"skein1024-968\" | \"skein1024-976\" | \"skein1024-984\" | \"skein1024-992\" | \"skein1024-1000\" | \"skein1024-1008\" | \"skein1024-1016\" | \"skein1024-1024\" | \"poseidon-bls12_381-a2-fc1\" | \"poseidon-bls12_381-a2-fc1-sc\" } HashName\n */\n/**\n * Codes for all available hashes\n *\n * @typedef { 0x00 | 0x11 | 0x12 | 0x13 | 0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1a | 0x1b | 0x1c | 0x1d | 0x1e | 0x22 | 0x23 | 0x56 | 0xd4 | 0xd5 | 0xd6 | 0x1012 | 0x1052 | 0x1053 | 0x1054 | 0x1055 | 0x1100 | 0x1d01 | 0x534d | 0xb201 | 0xb202 | 0xb203 | 0xb204 | 0xb205 | 0xb206 | 0xb207 | 0xb208 | 0xb209 | 0xb20a | 0xb20b | 0xb20c | 0xb20d | 0xb20e | 0xb20f | 0xb210 | 0xb211 | 0xb212 | 0xb213 | 0xb214 | 0xb215 | 0xb216 | 0xb217 | 0xb218 | 0xb219 | 0xb21a | 0xb21b | 0xb21c | 0xb21d | 0xb21e | 0xb21f | 0xb220 | 0xb221 | 0xb222 | 0xb223 | 0xb224 | 0xb225 | 0xb226 | 0xb227 | 0xb228 | 0xb229 | 0xb22a | 0xb22b | 0xb22c | 0xb22d | 0xb22e | 0xb22f | 0xb230 | 0xb231 | 0xb232 | 0xb233 | 0xb234 | 0xb235 | 0xb236 | 0xb237 | 0xb238 | 0xb239 | 0xb23a | 0xb23b | 0xb23c | 0xb23d | 0xb23e | 0xb23f | 0xb240 | 0xb241 | 0xb242 | 0xb243 | 0xb244 | 0xb245 | 0xb246 | 0xb247 | 0xb248 | 0xb249 | 0xb24a | 0xb24b | 0xb24c | 0xb24d | 0xb24e | 0xb24f | 0xb250 | 0xb251 | 0xb252 | 0xb253 | 0xb254 | 0xb255 | 0xb256 | 0xb257 | 0xb258 | 0xb259 | 0xb25a | 0xb25b | 0xb25c | 0xb25d | 0xb25e | 0xb25f | 0xb260 | 0xb301 | 0xb302 | 0xb303 | 0xb304 | 0xb305 | 0xb306 | 0xb307 | 0xb308 | 0xb309 | 0xb30a | 0xb30b | 0xb30c | 0xb30d | 0xb30e | 0xb30f | 0xb310 | 0xb311 | 0xb312 | 0xb313 | 0xb314 | 0xb315 | 0xb316 | 0xb317 | 0xb318 | 0xb319 | 0xb31a | 0xb31b | 0xb31c | 0xb31d | 0xb31e | 0xb31f | 0xb320 | 0xb321 | 0xb322 | 0xb323 | 0xb324 | 0xb325 | 0xb326 | 0xb327 | 0xb328 | 0xb329 | 0xb32a | 0xb32b | 0xb32c | 0xb32d | 0xb32e | 0xb32f | 0xb330 | 0xb331 | 0xb332 | 0xb333 | 0xb334 | 0xb335 | 0xb336 | 0xb337 | 0xb338 | 0xb339 | 0xb33a | 0xb33b | 0xb33c | 0xb33d | 0xb33e | 0xb33f | 0xb340 | 0xb341 | 0xb342 | 0xb343 | 0xb344 | 0xb345 | 0xb346 | 0xb347 | 0xb348 | 0xb349 | 0xb34a | 0xb34b | 0xb34c | 0xb34d | 0xb34e | 0xb34f | 0xb350 | 0xb351 | 0xb352 | 0xb353 | 0xb354 | 0xb355 | 0xb356 | 0xb357 | 0xb358 | 0xb359 | 0xb35a | 0xb35b | 0xb35c | 0xb35d | 0xb35e | 0xb35f | 0xb360 | 0xb361 | 0xb362 | 0xb363 | 0xb364 | 0xb365 | 0xb366 | 0xb367 | 0xb368 | 0xb369 | 0xb36a | 0xb36b | 0xb36c | 0xb36d | 0xb36e | 0xb36f | 0xb370 | 0xb371 | 0xb372 | 0xb373 | 0xb374 | 0xb375 | 0xb376 | 0xb377 | 0xb378 | 0xb379 | 0xb37a | 0xb37b | 0xb37c | 0xb37d | 0xb37e | 0xb37f | 0xb380 | 0xb381 | 0xb382 | 0xb383 | 0xb384 | 0xb385 | 0xb386 | 0xb387 | 0xb388 | 0xb389 | 0xb38a | 0xb38b | 0xb38c | 0xb38d | 0xb38e | 0xb38f | 0xb390 | 0xb391 | 0xb392 | 0xb393 | 0xb394 | 0xb395 | 0xb396 | 0xb397 | 0xb398 | 0xb399 | 0xb39a | 0xb39b | 0xb39c | 0xb39d | 0xb39e | 0xb39f | 0xb3a0 | 0xb3a1 | 0xb3a2 | 0xb3a3 | 0xb3a4 | 0xb3a5 | 0xb3a6 | 0xb3a7 | 0xb3a8 | 0xb3a9 | 0xb3aa | 0xb3ab | 0xb3ac | 0xb3ad | 0xb3ae | 0xb3af | 0xb3b0 | 0xb3b1 | 0xb3b2 | 0xb3b3 | 0xb3b4 | 0xb3b5 | 0xb3b6 | 0xb3b7 | 0xb3b8 | 0xb3b9 | 0xb3ba | 0xb3bb | 0xb3bc | 0xb3bd | 0xb3be | 0xb3bf | 0xb3c0 | 0xb3c1 | 0xb3c2 | 0xb3c3 | 0xb3c4 | 0xb3c5 | 0xb3c6 | 0xb3c7 | 0xb3c8 | 0xb3c9 | 0xb3ca | 0xb3cb | 0xb3cc | 0xb3cd | 0xb3ce | 0xb3cf | 0xb3d0 | 0xb3d1 | 0xb3d2 | 0xb3d3 | 0xb3d4 | 0xb3d5 | 0xb3d6 | 0xb3d7 | 0xb3d8 | 0xb3d9 | 0xb3da | 0xb3db | 0xb3dc | 0xb3dd | 0xb3de | 0xb3df | 0xb3e0 | 0xb401 | 0xb402 } HashCode\n */\n\n/**\n * @type { Record<HashName,HashCode> }\n */\nconst names = Object.freeze({\n  'identity': 0x00,\n  'sha1': 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  'sha3-512': 0x14,\n  'sha3-384': 0x15,\n  'sha3-256': 0x16,\n  'sha3-224': 0x17,\n  'shake-128': 0x18,\n  'shake-256': 0x19,\n  'keccak-224': 0x1a,\n  'keccak-256': 0x1b,\n  'keccak-384': 0x1c,\n  'keccak-512': 0x1d,\n  'blake3': 0x1e,\n  'murmur3-128': 0x22,\n  'murmur3-32': 0x23,\n  'dbl-sha2-256': 0x56,\n  'md4': 0xd4,\n  'md5': 0xd5,\n  'bmt': 0xd6,\n  'sha2-256-trunc254-padded': 0x1012,\n  'ripemd-128': 0x1052,\n  'ripemd-160': 0x1053,\n  'ripemd-256': 0x1054,\n  'ripemd-320': 0x1055,\n  'x11': 0x1100,\n  'kangarootwelve': 0x1d01,\n  'sm3-256': 0x534d,\n  'blake2b-8': 0xb201,\n  'blake2b-16': 0xb202,\n  'blake2b-24': 0xb203,\n  'blake2b-32': 0xb204,\n  'blake2b-40': 0xb205,\n  'blake2b-48': 0xb206,\n  'blake2b-56': 0xb207,\n  'blake2b-64': 0xb208,\n  'blake2b-72': 0xb209,\n  'blake2b-80': 0xb20a,\n  'blake2b-88': 0xb20b,\n  'blake2b-96': 0xb20c,\n  'blake2b-104': 0xb20d,\n  'blake2b-112': 0xb20e,\n  'blake2b-120': 0xb20f,\n  'blake2b-128': 0xb210,\n  'blake2b-136': 0xb211,\n  'blake2b-144': 0xb212,\n  'blake2b-152': 0xb213,\n  'blake2b-160': 0xb214,\n  'blake2b-168': 0xb215,\n  'blake2b-176': 0xb216,\n  'blake2b-184': 0xb217,\n  'blake2b-192': 0xb218,\n  'blake2b-200': 0xb219,\n  'blake2b-208': 0xb21a,\n  'blake2b-216': 0xb21b,\n  'blake2b-224': 0xb21c,\n  'blake2b-232': 0xb21d,\n  'blake2b-240': 0xb21e,\n  'blake2b-248': 0xb21f,\n  'blake2b-256': 0xb220,\n  'blake2b-264': 0xb221,\n  'blake2b-272': 0xb222,\n  'blake2b-280': 0xb223,\n  'blake2b-288': 0xb224,\n  'blake2b-296': 0xb225,\n  'blake2b-304': 0xb226,\n  'blake2b-312': 0xb227,\n  'blake2b-320': 0xb228,\n  'blake2b-328': 0xb229,\n  'blake2b-336': 0xb22a,\n  'blake2b-344': 0xb22b,\n  'blake2b-352': 0xb22c,\n  'blake2b-360': 0xb22d,\n  'blake2b-368': 0xb22e,\n  'blake2b-376': 0xb22f,\n  'blake2b-384': 0xb230,\n  'blake2b-392': 0xb231,\n  'blake2b-400': 0xb232,\n  'blake2b-408': 0xb233,\n  'blake2b-416': 0xb234,\n  'blake2b-424': 0xb235,\n  'blake2b-432': 0xb236,\n  'blake2b-440': 0xb237,\n  'blake2b-448': 0xb238,\n  'blake2b-456': 0xb239,\n  'blake2b-464': 0xb23a,\n  'blake2b-472': 0xb23b,\n  'blake2b-480': 0xb23c,\n  'blake2b-488': 0xb23d,\n  'blake2b-496': 0xb23e,\n  'blake2b-504': 0xb23f,\n  'blake2b-512': 0xb240,\n  'blake2s-8': 0xb241,\n  'blake2s-16': 0xb242,\n  'blake2s-24': 0xb243,\n  'blake2s-32': 0xb244,\n  'blake2s-40': 0xb245,\n  'blake2s-48': 0xb246,\n  'blake2s-56': 0xb247,\n  'blake2s-64': 0xb248,\n  'blake2s-72': 0xb249,\n  'blake2s-80': 0xb24a,\n  'blake2s-88': 0xb24b,\n  'blake2s-96': 0xb24c,\n  'blake2s-104': 0xb24d,\n  'blake2s-112': 0xb24e,\n  'blake2s-120': 0xb24f,\n  'blake2s-128': 0xb250,\n  'blake2s-136': 0xb251,\n  'blake2s-144': 0xb252,\n  'blake2s-152': 0xb253,\n  'blake2s-160': 0xb254,\n  'blake2s-168': 0xb255,\n  'blake2s-176': 0xb256,\n  'blake2s-184': 0xb257,\n  'blake2s-192': 0xb258,\n  'blake2s-200': 0xb259,\n  'blake2s-208': 0xb25a,\n  'blake2s-216': 0xb25b,\n  'blake2s-224': 0xb25c,\n  'blake2s-232': 0xb25d,\n  'blake2s-240': 0xb25e,\n  'blake2s-248': 0xb25f,\n  'blake2s-256': 0xb260,\n  'skein256-8': 0xb301,\n  'skein256-16': 0xb302,\n  'skein256-24': 0xb303,\n  'skein256-32': 0xb304,\n  'skein256-40': 0xb305,\n  'skein256-48': 0xb306,\n  'skein256-56': 0xb307,\n  'skein256-64': 0xb308,\n  'skein256-72': 0xb309,\n  'skein256-80': 0xb30a,\n  'skein256-88': 0xb30b,\n  'skein256-96': 0xb30c,\n  'skein256-104': 0xb30d,\n  'skein256-112': 0xb30e,\n  'skein256-120': 0xb30f,\n  'skein256-128': 0xb310,\n  'skein256-136': 0xb311,\n  'skein256-144': 0xb312,\n  'skein256-152': 0xb313,\n  'skein256-160': 0xb314,\n  'skein256-168': 0xb315,\n  'skein256-176': 0xb316,\n  'skein256-184': 0xb317,\n  'skein256-192': 0xb318,\n  'skein256-200': 0xb319,\n  'skein256-208': 0xb31a,\n  'skein256-216': 0xb31b,\n  'skein256-224': 0xb31c,\n  'skein256-232': 0xb31d,\n  'skein256-240': 0xb31e,\n  'skein256-248': 0xb31f,\n  'skein256-256': 0xb320,\n  'skein512-8': 0xb321,\n  'skein512-16': 0xb322,\n  'skein512-24': 0xb323,\n  'skein512-32': 0xb324,\n  'skein512-40': 0xb325,\n  'skein512-48': 0xb326,\n  'skein512-56': 0xb327,\n  'skein512-64': 0xb328,\n  'skein512-72': 0xb329,\n  'skein512-80': 0xb32a,\n  'skein512-88': 0xb32b,\n  'skein512-96': 0xb32c,\n  'skein512-104': 0xb32d,\n  'skein512-112': 0xb32e,\n  'skein512-120': 0xb32f,\n  'skein512-128': 0xb330,\n  'skein512-136': 0xb331,\n  'skein512-144': 0xb332,\n  'skein512-152': 0xb333,\n  'skein512-160': 0xb334,\n  'skein512-168': 0xb335,\n  'skein512-176': 0xb336,\n  'skein512-184': 0xb337,\n  'skein512-192': 0xb338,\n  'skein512-200': 0xb339,\n  'skein512-208': 0xb33a,\n  'skein512-216': 0xb33b,\n  'skein512-224': 0xb33c,\n  'skein512-232': 0xb33d,\n  'skein512-240': 0xb33e,\n  'skein512-248': 0xb33f,\n  'skein512-256': 0xb340,\n  'skein512-264': 0xb341,\n  'skein512-272': 0xb342,\n  'skein512-280': 0xb343,\n  'skein512-288': 0xb344,\n  'skein512-296': 0xb345,\n  'skein512-304': 0xb346,\n  'skein512-312': 0xb347,\n  'skein512-320': 0xb348,\n  'skein512-328': 0xb349,\n  'skein512-336': 0xb34a,\n  'skein512-344': 0xb34b,\n  'skein512-352': 0xb34c,\n  'skein512-360': 0xb34d,\n  'skein512-368': 0xb34e,\n  'skein512-376': 0xb34f,\n  'skein512-384': 0xb350,\n  'skein512-392': 0xb351,\n  'skein512-400': 0xb352,\n  'skein512-408': 0xb353,\n  'skein512-416': 0xb354,\n  'skein512-424': 0xb355,\n  'skein512-432': 0xb356,\n  'skein512-440': 0xb357,\n  'skein512-448': 0xb358,\n  'skein512-456': 0xb359,\n  'skein512-464': 0xb35a,\n  'skein512-472': 0xb35b,\n  'skein512-480': 0xb35c,\n  'skein512-488': 0xb35d,\n  'skein512-496': 0xb35e,\n  'skein512-504': 0xb35f,\n  'skein512-512': 0xb360,\n  'skein1024-8': 0xb361,\n  'skein1024-16': 0xb362,\n  'skein1024-24': 0xb363,\n  'skein1024-32': 0xb364,\n  'skein1024-40': 0xb365,\n  'skein1024-48': 0xb366,\n  'skein1024-56': 0xb367,\n  'skein1024-64': 0xb368,\n  'skein1024-72': 0xb369,\n  'skein1024-80': 0xb36a,\n  'skein1024-88': 0xb36b,\n  'skein1024-96': 0xb36c,\n  'skein1024-104': 0xb36d,\n  'skein1024-112': 0xb36e,\n  'skein1024-120': 0xb36f,\n  'skein1024-128': 0xb370,\n  'skein1024-136': 0xb371,\n  'skein1024-144': 0xb372,\n  'skein1024-152': 0xb373,\n  'skein1024-160': 0xb374,\n  'skein1024-168': 0xb375,\n  'skein1024-176': 0xb376,\n  'skein1024-184': 0xb377,\n  'skein1024-192': 0xb378,\n  'skein1024-200': 0xb379,\n  'skein1024-208': 0xb37a,\n  'skein1024-216': 0xb37b,\n  'skein1024-224': 0xb37c,\n  'skein1024-232': 0xb37d,\n  'skein1024-240': 0xb37e,\n  'skein1024-248': 0xb37f,\n  'skein1024-256': 0xb380,\n  'skein1024-264': 0xb381,\n  'skein1024-272': 0xb382,\n  'skein1024-280': 0xb383,\n  'skein1024-288': 0xb384,\n  'skein1024-296': 0xb385,\n  'skein1024-304': 0xb386,\n  'skein1024-312': 0xb387,\n  'skein1024-320': 0xb388,\n  'skein1024-328': 0xb389,\n  'skein1024-336': 0xb38a,\n  'skein1024-344': 0xb38b,\n  'skein1024-352': 0xb38c,\n  'skein1024-360': 0xb38d,\n  'skein1024-368': 0xb38e,\n  'skein1024-376': 0xb38f,\n  'skein1024-384': 0xb390,\n  'skein1024-392': 0xb391,\n  'skein1024-400': 0xb392,\n  'skein1024-408': 0xb393,\n  'skein1024-416': 0xb394,\n  'skein1024-424': 0xb395,\n  'skein1024-432': 0xb396,\n  'skein1024-440': 0xb397,\n  'skein1024-448': 0xb398,\n  'skein1024-456': 0xb399,\n  'skein1024-464': 0xb39a,\n  'skein1024-472': 0xb39b,\n  'skein1024-480': 0xb39c,\n  'skein1024-488': 0xb39d,\n  'skein1024-496': 0xb39e,\n  'skein1024-504': 0xb39f,\n  'skein1024-512': 0xb3a0,\n  'skein1024-520': 0xb3a1,\n  'skein1024-528': 0xb3a2,\n  'skein1024-536': 0xb3a3,\n  'skein1024-544': 0xb3a4,\n  'skein1024-552': 0xb3a5,\n  'skein1024-560': 0xb3a6,\n  'skein1024-568': 0xb3a7,\n  'skein1024-576': 0xb3a8,\n  'skein1024-584': 0xb3a9,\n  'skein1024-592': 0xb3aa,\n  'skein1024-600': 0xb3ab,\n  'skein1024-608': 0xb3ac,\n  'skein1024-616': 0xb3ad,\n  'skein1024-624': 0xb3ae,\n  'skein1024-632': 0xb3af,\n  'skein1024-640': 0xb3b0,\n  'skein1024-648': 0xb3b1,\n  'skein1024-656': 0xb3b2,\n  'skein1024-664': 0xb3b3,\n  'skein1024-672': 0xb3b4,\n  'skein1024-680': 0xb3b5,\n  'skein1024-688': 0xb3b6,\n  'skein1024-696': 0xb3b7,\n  'skein1024-704': 0xb3b8,\n  'skein1024-712': 0xb3b9,\n  'skein1024-720': 0xb3ba,\n  'skein1024-728': 0xb3bb,\n  'skein1024-736': 0xb3bc,\n  'skein1024-744': 0xb3bd,\n  'skein1024-752': 0xb3be,\n  'skein1024-760': 0xb3bf,\n  'skein1024-768': 0xb3c0,\n  'skein1024-776': 0xb3c1,\n  'skein1024-784': 0xb3c2,\n  'skein1024-792': 0xb3c3,\n  'skein1024-800': 0xb3c4,\n  'skein1024-808': 0xb3c5,\n  'skein1024-816': 0xb3c6,\n  'skein1024-824': 0xb3c7,\n  'skein1024-832': 0xb3c8,\n  'skein1024-840': 0xb3c9,\n  'skein1024-848': 0xb3ca,\n  'skein1024-856': 0xb3cb,\n  'skein1024-864': 0xb3cc,\n  'skein1024-872': 0xb3cd,\n  'skein1024-880': 0xb3ce,\n  'skein1024-888': 0xb3cf,\n  'skein1024-896': 0xb3d0,\n  'skein1024-904': 0xb3d1,\n  'skein1024-912': 0xb3d2,\n  'skein1024-920': 0xb3d3,\n  'skein1024-928': 0xb3d4,\n  'skein1024-936': 0xb3d5,\n  'skein1024-944': 0xb3d6,\n  'skein1024-952': 0xb3d7,\n  'skein1024-960': 0xb3d8,\n  'skein1024-968': 0xb3d9,\n  'skein1024-976': 0xb3da,\n  'skein1024-984': 0xb3db,\n  'skein1024-992': 0xb3dc,\n  'skein1024-1000': 0xb3dd,\n  'skein1024-1008': 0xb3de,\n  'skein1024-1016': 0xb3df,\n  'skein1024-1024': 0xb3e0,\n  'poseidon-bls12_381-a2-fc1': 0xb401,\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402\n})\n\nmodule.exports = { names }\n", "function base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;", "const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};", "import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};", "import { from } from './base.js';\nimport {\n  fromString,\n  toString\n} from '../bytes.js';\nexport const identity = from({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => toString(buf),\n  decode: str => fromString(str)\n});", "import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});", "import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});", "import { baseX } from './base.js';\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});", "import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});", "import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});", "import { baseX } from './base.js';\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});", "import { baseX } from './base.js';\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});", "import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});", "import { from } from './base.js';\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${ char }`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n  prefix: '\\uD83D\\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n});", "var encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;", "import varint from '../vendor/varint.js';\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset);\n  return [\n    code,\n    varint.decode.bytes\n  ];\n};\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset);\n  return target;\n};\nexport const encodingLength = int => {\n  return varint.encodingLength(int);\n};", "import {\n  coerce,\n  equals as equalBytes\n} from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}", "import * as Digest from './digest.js';\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? Digest.create(this.code, result) : result.then(digest => Digest.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}", "import { from } from './hasher.js';\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});", "import { coerce } from '../bytes.js';\nimport * as Digest from './digest.js';\nconst code = 0;\nconst name = 'identity';\nconst encode = coerce;\nconst digest = input => Digest.create(code, encode(input));\nexport const identity = {\n  code,\n  name,\n  encode,\n  digest\n};", "import { coerce } from '../bytes.js';\nexport const name = 'raw';\nexport const code = 85;\nexport const encode = node => coerce(node);\nexport const decode = data => coerce(data);", "const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 512;\nexport const encode = node => textEncoder.encode(JSON.stringify(node));\nexport const decode = data => JSON.parse(textDecoder.decode(data));", "import * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport class CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = Digest.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = Digest.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(`${ base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58btc.prefix: {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.prefix: {\n      const decoder = base || base32;\n      return [\n        base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;", "import { CID } from './cid.js';\nimport * as varint from './varint.js';\nimport * as bytes from './bytes.js';\nimport * as hasher from './hashes/hasher.js';\nimport * as digest from './hashes/digest.js';\nexport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes\n};", "import * as identityBase from './bases/identity.js';\nimport * as base2 from './bases/base2.js';\nimport * as base8 from './bases/base8.js';\nimport * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as sha2 from './hashes/sha2.js';\nimport * as identity from './hashes/identity.js';\nimport * as raw from './codecs/raw.js';\nimport * as json from './codecs/json.js';\nimport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes\n} from './index.js';\nconst bases = {\n  ...identityBase,\n  ...base2,\n  ...base8,\n  ...base10,\n  ...base16,\n  ...base32,\n  ...base36,\n  ...base58,\n  ...base64,\n  ...base256emoji\n};\nconst hashes = {\n  ...sha2,\n  ...identity\n};\nconst codecs = {\n  raw,\n  json\n};\nexport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes,\n  hashes,\n  bases,\n  codecs\n};", "export function asUint8Array(buf) {\n  if (globalThis.Buffer != null) {\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  return buf;\n}", "import { asUint8Array } from './util/as-uint8array.js';\nexport function alloc(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n    return asUint8Array(globalThis.Buffer.alloc(size));\n  }\n  return new Uint8Array(size);\n}\nexport function allocUnsafe(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size));\n  }\n  return new Uint8Array(size);\n}", "import { bases } from 'multiformats/basics';\nimport { allocUnsafe } from '../alloc.js';\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = allocUnsafe(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...bases\n};\nexport default BASES;", "import bases from './util/bases.js';\nexport function toString(array, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n  }\n  return base.encoder.encode(array).substring(1);\n}", "import bases from './util/bases.js';\nimport { asUint8Array } from './util/as-uint8array.js';\nexport function fromString(string, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n  }\n  return base.decoder.decode(`${ base.prefix }${ string }`);\n}", "import { allocUnsafe } from './alloc.js';\nimport { asUint8Array } from './util/as-uint8array.js';\nexport function concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n  const output = allocUnsafe(length);\n  let offset = 0;\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n  return asUint8Array(output);\n}", "/**\n * Multihash implementation in JavaScript.\n */\n'use strict'\n\nconst multibase = require('multibase')\nconst varint = require('varint')\nconst { names } = require('./constants')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\n\nconst codes = /** @type {import('./types').CodeNameMap} */({})\n\n// eslint-disable-next-line guard-for-in\nfor (const key in names) {\n  const name = /** @type {HashName} */(key)\n  codes[names[name]] = name\n}\nObject.freeze(codes)\n\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nfunction toHexString (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return uint8ArrayToString(hash, 'base16')\n}\n\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Uint8Array}\n */\nfunction fromHexString (hash) {\n  return uint8ArrayFromString(hash, 'base16')\n}\n\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nfunction toB58String (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return uint8ArrayToString(multibase.encode('base58btc', hash)).slice(1)\n}\n\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Uint8Array} hash\n * @returns {Uint8Array}\n */\nfunction fromB58String (hash) {\n  const encoded = hash instanceof Uint8Array\n    ? uint8ArrayToString(hash)\n    : hash\n\n  return multibase.decode('z' + encoded)\n}\n\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Uint8Array} bytes\n * @returns {{code: HashCode, name: HashName, length: number, digest: Uint8Array}} result\n */\nfunction decode (bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new Error('multihash must be a Uint8Array')\n  }\n\n  if (bytes.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.')\n  }\n\n  const code = /** @type {HashCode} */(varint.decode(bytes))\n  if (!isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\n  }\n  bytes = bytes.slice(varint.decode.bytes)\n\n  const len = varint.decode(bytes)\n  if (len < 0) {\n    throw new Error(`multihash invalid length: ${len}`)\n  }\n  bytes = bytes.slice(varint.decode.bytes)\n\n  if (bytes.length !== len) {\n    throw new Error(`multihash length inconsistent: 0x${uint8ArrayToString(bytes, 'base16')}`)\n  }\n\n  return {\n    code,\n    name: codes[code],\n    length: len,\n    digest: bytes\n  }\n}\n\n/**\n * Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Uint8Array} digest\n * @param {HashName | HashCode} code\n * @param {number} [length]\n * @returns {Uint8Array}\n */\nfunction encode (digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code')\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = coerceCode(code)\n\n  if (!(digest instanceof Uint8Array)) {\n    throw new Error('digest should be a Uint8Array')\n  }\n\n  if (length == null) {\n    length = digest.length\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.')\n  }\n\n  const hash = varint.encode(hashfn)\n  const len = varint.encode(length)\n  return uint8ArrayConcat([hash, len, digest], hash.length + len.length + digest.length)\n}\n\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n *\n * @param {HashName | number} name\n * @returns {number}\n */\nfunction coerceCode (name) {\n  let code = name\n\n  if (typeof name === 'string') {\n    if (names[name] === undefined) {\n      throw new Error(`Unrecognized hash function named: ${name}`)\n    }\n    code = names[name]\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\n  }\n\n  // @ts-ignore\n  if (codes[code] === undefined && !isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`)\n  }\n\n  return code\n}\n\n/**\n * Checks if a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction isAppCode (code) {\n  return code > 0 && code < 0x10\n}\n\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {HashCode} code\n * @returns {boolean}\n */\nfunction isValidCode (code) {\n  if (isAppCode(code)) {\n    return true\n  }\n\n  if (codes[code]) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {void}\n * @throws {Error}\n */\nfunction validate (multihash) {\n  decode(multihash) // throws if bad.\n}\n\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n * @throws {Error}\n */\nfunction prefix (multihash) {\n  validate(multihash)\n\n  return multihash.subarray(0, 2)\n}\n\nmodule.exports = {\n  names,\n  codes,\n  toHexString,\n  fromHexString,\n  toB58String,\n  fromB58String,\n  decode,\n  encode,\n  coerceCode,\n  isAppCode,\n  validate,\n  prefix,\n  isValidCode\n}\n\n/**\n * @typedef { import(\"./constants\").HashCode } HashCode\n * @typedef { import(\"./constants\").HashName } HashName\n */\n", "import { CodeError } from '@libp2p/interface'\nimport type { Direction } from '@libp2p/interface'\n\nexport enum codes {\n  ERR_ALREADY_ABORTED = 'ERR_ALREADY_ABORTED',\n  ERR_DATA_CHANNEL = 'ERR_DATA_CHANNEL',\n  ERR_CONNECTION_CLOSED = 'ERR_CONNECTION_CLOSED',\n  ERR_HASH_NOT_SUPPORTED = 'ERR_HASH_NOT_SUPPORTED',\n  ERR_INVALID_MULTIADDR = 'ERR_INVALID_MULTIADDR',\n  ERR_INVALID_FINGERPRINT = 'ERR_INVALID_FINGERPRINT',\n  ERR_INVALID_PARAMETERS = 'ERR_INVALID_PARAMETERS',\n  ERR_NOT_IMPLEMENTED = 'ERR_NOT_IMPLEMENTED',\n  ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS = 'ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS',\n  ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS = 'ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS',\n}\n\nexport class WebRTCTransportError extends CodeError {\n  constructor (msg: string, code?: string) {\n    super(`WebRTC transport error: ${msg}`, code ?? '')\n    this.name = 'WebRTCTransportError'\n  }\n}\n\nexport class ConnectionClosedError extends WebRTCTransportError {\n  constructor (state: RTCPeerConnectionState, msg: string) {\n    super(`peerconnection moved to state: ${state}: ${msg}`, codes.ERR_CONNECTION_CLOSED)\n    this.name = 'WebRTC/ConnectionClosed'\n  }\n}\n\nexport function connectionClosedError (state: RTCPeerConnectionState, msg: string): ConnectionClosedError {\n  return new ConnectionClosedError(state, msg)\n}\n\nexport class DataChannelError extends WebRTCTransportError {\n  constructor (streamLabel: string, msg: string) {\n    super(`[stream: ${streamLabel}] data channel error: ${msg}`, codes.ERR_DATA_CHANNEL)\n    this.name = 'WebRTC/DataChannelError'\n  }\n}\n\nexport function dataChannelError (streamLabel: string, msg: string): DataChannelError {\n  return new DataChannelError(streamLabel, msg)\n}\n\nexport class InappropriateMultiaddrError extends WebRTCTransportError {\n  constructor (msg: string) {\n    super(`There was a problem with the Multiaddr which was passed in: ${msg}`, codes.ERR_INVALID_MULTIADDR)\n    this.name = 'WebRTC/InappropriateMultiaddrError'\n  }\n}\n\nexport function inappropriateMultiaddr (msg: string): InappropriateMultiaddrError {\n  return new InappropriateMultiaddrError(msg)\n}\n\nexport class InvalidArgumentError extends WebRTCTransportError {\n  constructor (msg: string) {\n    super(`There was a problem with a provided argument: ${msg}`, codes.ERR_INVALID_PARAMETERS)\n    this.name = 'WebRTC/InvalidArgumentError'\n  }\n}\n\nexport function invalidArgument (msg: string): InvalidArgumentError {\n  return new InvalidArgumentError(msg)\n}\n\nexport class InvalidFingerprintError extends WebRTCTransportError {\n  constructor (fingerprint: string, source: string) {\n    super(`Invalid fingerprint \"${fingerprint}\" within ${source}`, codes.ERR_INVALID_FINGERPRINT)\n    this.name = 'WebRTC/InvalidFingerprintError'\n  }\n}\n\nexport function invalidFingerprint (fingerprint: string, source: string): InvalidFingerprintError {\n  return new InvalidFingerprintError(fingerprint, source)\n}\n\nexport class OperationAbortedError extends WebRTCTransportError {\n  constructor (context: string, abortReason: string) {\n    super(`Signalled to abort because (${abortReason}}) ${context}`, codes.ERR_ALREADY_ABORTED)\n    this.name = 'WebRTC/OperationAbortedError'\n  }\n}\n\nexport function operationAborted (context: string, reason: string): OperationAbortedError {\n  return new OperationAbortedError(context, reason)\n}\n\nexport class OverStreamLimitError extends WebRTCTransportError {\n  constructor (msg: string) {\n    const code = msg.startsWith('inbound') ? codes.ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS : codes.ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS\n    super(msg, code)\n    this.name = 'WebRTC/OverStreamLimitError'\n  }\n}\n\nexport function overStreamLimit (dir: Direction, proto: string): OverStreamLimitError {\n  return new OverStreamLimitError(`${dir} stream limit reached for protocol - ${proto}`)\n}\n\nexport class UnimplementedError extends WebRTCTransportError {\n  constructor (methodName: string) {\n    super(`A method (${methodName}) was called though it has been intentionally left unimplemented.`, codes.ERR_NOT_IMPLEMENTED)\n    this.name = 'WebRTC/UnimplementedError'\n  }\n}\n\nexport function unimplemented (methodName: string): UnimplementedError {\n  return new UnimplementedError(methodName)\n}\n\nexport class UnsupportedHashAlgorithmError extends WebRTCTransportError {\n  constructor (algo: string) {\n    super(`unsupported hash algorithm: ${algo}`, codes.ERR_HASH_NOT_SUPPORTED)\n    this.name = 'WebRTC/UnsupportedHashAlgorithmError'\n  }\n}\n\nexport function unsupportedHashAlgorithm (algorithm: string): UnsupportedHashAlgorithmError {\n  return new UnsupportedHashAlgorithmError(algorithm)\n}\n", "var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar BrowserInfo = /** @class */ (function () {\n    function BrowserInfo(name, version, os) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.type = 'browser';\n    }\n    return BrowserInfo;\n}());\nexport { BrowserInfo };\nvar NodeInfo = /** @class */ (function () {\n    function NodeInfo(version) {\n        this.version = version;\n        this.type = 'node';\n        this.name = 'node';\n        this.os = process.platform;\n    }\n    return NodeInfo;\n}());\nexport { NodeInfo };\nvar SearchBotDeviceInfo = /** @class */ (function () {\n    function SearchBotDeviceInfo(name, version, os, bot) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.bot = bot;\n        this.type = 'bot-device';\n    }\n    return SearchBotDeviceInfo;\n}());\nexport { SearchBotDeviceInfo };\nvar BotInfo = /** @class */ (function () {\n    function BotInfo() {\n        this.type = 'bot';\n        this.bot = true; // NOTE: deprecated test name instead\n        this.name = 'bot';\n        this.version = null;\n        this.os = null;\n    }\n    return BotInfo;\n}());\nexport { BotInfo };\nvar ReactNativeInfo = /** @class */ (function () {\n    function ReactNativeInfo() {\n        this.type = 'react-native';\n        this.name = 'react-native';\n        this.version = null;\n        this.os = null;\n    }\n    return ReactNativeInfo;\n}());\nexport { ReactNativeInfo };\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [\n    ['aol', /AOLShield\\/([0-9\\._]+)/],\n    ['edge', /Edge\\/([0-9\\._]+)/],\n    ['edge-ios', /EdgiOS\\/([0-9\\._]+)/],\n    ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n    ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n    ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n    ['silk', /\\bSilk\\/([0-9._-]+)\\b/],\n    ['miui', /MiuiBrowser\\/([0-9\\.]+)$/],\n    ['beaker', /BeakerBrowser\\/([0-9\\.]+)/],\n    ['edge-chromium', /EdgA?\\/([0-9\\.]+)/],\n    [\n        'chromium-webview',\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/,\n    ],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n    ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n    ['fxios', /FxiOS\\/([0-9\\.]+)/],\n    ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/],\n    ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/],\n    ['pie', /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/],\n    ['pie', /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/],\n    ['netfront', /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/],\n    ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n    ['android', /Android\\s([0-9\\.]+)/],\n    ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9\\._]+).*Safari/],\n    ['facebook', /FB[AS]V\\/([0-9\\.]+)/],\n    ['instagram', /Instagram\\s([0-9\\.]+)/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/],\n    ['curl', /^curl\\/([0-9\\.]+)$/],\n    ['searchbot', SEARCHBOX_UA_REGEX],\n];\nvar operatingSystemRules = [\n    ['iOS', /iP(hone|od|ad)/],\n    ['Android OS', /Android/],\n    ['BlackBerry OS', /BlackBerry|BB10/],\n    ['Windows Mobile', /IEMobile/],\n    ['Amazon OS', /Kindle/],\n    ['Windows 3.11', /Win16/],\n    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n    ['Windows 98', /(Windows 98)|(Win98)/],\n    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n    ['Windows Server 2003', /(Windows NT 5.2)/],\n    ['Windows Vista', /(Windows NT 6.0)/],\n    ['Windows 7', /(Windows NT 6.1)/],\n    ['Windows 8', /(Windows NT 6.2)/],\n    ['Windows 8.1', /(Windows NT 6.3)/],\n    ['Windows 10', /(Windows NT 10.0)/],\n    ['Windows ME', /Windows ME/],\n    ['Windows CE', /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],\n    ['Open BSD', /OpenBSD/],\n    ['Sun OS', /SunOS/],\n    ['Chrome OS', /CrOS/],\n    ['Linux', /(Linux)|(X11)/],\n    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n    ['QNX', /QNX/],\n    ['BeOS', /BeOS/],\n    ['OS/2', /OS\\/2/],\n];\nexport function detect(userAgent) {\n    if (!!userAgent) {\n        return parseUserAgent(userAgent);\n    }\n    if (typeof document === 'undefined' &&\n        typeof navigator !== 'undefined' &&\n        navigator.product === 'ReactNative') {\n        return new ReactNativeInfo();\n    }\n    if (typeof navigator !== 'undefined') {\n        return parseUserAgent(navigator.userAgent);\n    }\n    return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n    // opted for using reduce here rather than Array#first with a regex.test call\n    // this is primarily because using the reduce we only perform the regex\n    // execution once rather than once for the test and for the exec again below\n    // probably something that needs to be benchmarked though\n    return (ua !== '' &&\n        userAgentRules.reduce(function (matched, _a) {\n            var browser = _a[0], regex = _a[1];\n            if (matched) {\n                return matched;\n            }\n            var uaMatch = regex.exec(ua);\n            return !!uaMatch && [browser, uaMatch];\n        }, false));\n}\nexport function browserName(ua) {\n    var data = matchUserAgent(ua);\n    return data ? data[0] : null;\n}\nexport function parseUserAgent(ua) {\n    var matchedRule = matchUserAgent(ua);\n    if (!matchedRule) {\n        return null;\n    }\n    var name = matchedRule[0], match = matchedRule[1];\n    if (name === 'searchbot') {\n        return new BotInfo();\n    }\n    // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)\n    var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);\n    if (versionParts) {\n        if (versionParts.length < REQUIRED_VERSION_PARTS) {\n            versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);\n        }\n    }\n    else {\n        versionParts = [];\n    }\n    var version = versionParts.join('.');\n    var os = detectOS(ua);\n    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n    if (searchBotMatch && searchBotMatch[1]) {\n        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n    }\n    return new BrowserInfo(name, version, os);\n}\nexport function detectOS(ua) {\n    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];\n        var match = regex.exec(ua);\n        if (match) {\n            return os;\n        }\n    }\n    return null;\n}\nexport function getNodeVersion() {\n    var isNode = typeof process !== 'undefined' && process.version;\n    return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n    var output = [];\n    for (var ii = 0; ii < count; ii++) {\n        output.push('0');\n    }\n    return output;\n}\n", "import { detect } from 'detect-browser'\nimport pDefer from 'p-defer'\nimport pTimeout from 'p-timeout'\nimport type { LoggerOptions } from '@libp2p/interface'\n\nconst browser = detect()\nexport const isFirefox = ((browser != null) && browser.name === 'firefox')\n\nexport const nopSource = async function * nop (): AsyncGenerator<Uint8Array, any, unknown> {}\n\nexport const nopSink = async (_: any): Promise<void> => {}\n\nexport const DATA_CHANNEL_DRAIN_TIMEOUT = 30 * 1000\n\nexport function drainAndClose (channel: RTCDataChannel, direction: string, drainTimeout: number = DATA_CHANNEL_DRAIN_TIMEOUT, options: LoggerOptions): void {\n  if (channel.readyState !== 'open') {\n    return\n  }\n\n  void Promise.resolve()\n    .then(async () => {\n      // wait for bufferedAmount to become zero\n      if (channel.bufferedAmount > 0) {\n        options.log('%s drain channel with %d buffered bytes', direction, channel.bufferedAmount)\n        const deferred = pDefer()\n        let drained = false\n\n        channel.bufferedAmountLowThreshold = 0\n\n        const closeListener = (): void => {\n          if (!drained) {\n            options.log('%s drain channel closed before drain', direction)\n            deferred.resolve()\n          }\n        }\n\n        channel.addEventListener('close', closeListener, {\n          once: true\n        })\n\n        channel.addEventListener('bufferedamountlow', () => {\n          drained = true\n          channel.removeEventListener('close', closeListener)\n          deferred.resolve()\n        })\n\n        await pTimeout(deferred.promise, {\n          milliseconds: drainTimeout\n        })\n      }\n    })\n    .then(async () => {\n      // only close if the channel is still open\n      if (channel.readyState === 'open') {\n        channel.close()\n      }\n    })\n    .catch(err => {\n      options.log.error('error closing outbound stream', err)\n    })\n}\n\nexport interface AbortPromiseOptions {\n  signal?: AbortSignal\n  message?: string\n}\n", "import { nopSink, nopSource } from './util.js'\nimport type { ComponentLogger, Logger, MultiaddrConnection, MultiaddrConnectionTimeline, CounterGroup } from '@libp2p/interface'\nimport type { AbortOptions, Multiaddr } from '@multiformats/multiaddr'\nimport type { Source, Sink } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\ninterface WebRTCMultiaddrConnectionInit {\n  /**\n   * WebRTC Peer Connection\n   */\n  peerConnection: RTCPeerConnection\n\n  /**\n   * The multiaddr address used to communicate with the remote peer\n   */\n  remoteAddr: Multiaddr\n\n  /**\n   * Holds the relevant events timestamps of the connection\n   */\n  timeline: MultiaddrConnectionTimeline\n\n  /**\n   * Optional metrics counter group for this connection\n   */\n  metrics?: CounterGroup\n}\n\nexport interface WebRTCMultiaddrConnectionComponents {\n  logger: ComponentLogger\n}\n\nexport class WebRTCMultiaddrConnection implements MultiaddrConnection {\n  readonly log: Logger\n\n  /**\n   * WebRTC Peer Connection\n   */\n  readonly peerConnection: RTCPeerConnection\n\n  /**\n   * The multiaddr address used to communicate with the remote peer\n   */\n  remoteAddr: Multiaddr\n\n  /**\n   * Holds the lifecycle times of the connection\n   */\n  timeline: MultiaddrConnectionTimeline\n\n  /**\n   * Optional metrics counter group for this connection\n   */\n  metrics?: CounterGroup\n\n  /**\n   * The stream source, a no-op as the transport natively supports multiplexing\n   */\n  source: AsyncGenerator<Uint8Array, any, unknown> = nopSource()\n\n  /**\n   * The stream destination, a no-op as the transport natively supports multiplexing\n   */\n  sink: Sink<Source<Uint8Array | Uint8ArrayList>, Promise<void>> = nopSink\n\n  constructor (components: WebRTCMultiaddrConnectionComponents, init: WebRTCMultiaddrConnectionInit) {\n    this.log = components.logger.forComponent('libp2p:webrtc:maconn')\n    this.remoteAddr = init.remoteAddr\n    this.timeline = init.timeline\n    this.peerConnection = init.peerConnection\n\n    const initialState = this.peerConnection.connectionState\n\n    this.peerConnection.onconnectionstatechange = () => {\n      this.log.trace('peer connection state change', this.peerConnection.connectionState, 'initial state', initialState)\n\n      if (this.peerConnection.connectionState === 'disconnected' || this.peerConnection.connectionState === 'failed' || this.peerConnection.connectionState === 'closed') {\n        // nothing else to do but close the connection\n        this.timeline.close = Date.now()\n      }\n    }\n  }\n\n  async close (options?: AbortOptions): Promise<void> {\n    this.log.trace('closing connection')\n\n    this.peerConnection.close()\n    this.timeline.close = Date.now()\n    this.metrics?.increment({ close: true })\n  }\n\n  abort (err: Error): void {\n    this.log.error('closing connection due to error', err)\n\n    this.peerConnection.close()\n    this.timeline.close = Date.now()\n    this.metrics?.increment({ abort: true })\n  }\n}\n", "import pTimeout from 'p-timeout';\n\nconst normalizeEmitter = emitter => {\n\tconst addListener = emitter.addEventListener || emitter.on || emitter.addListener;\n\tconst removeListener = emitter.removeEventListener || emitter.off || emitter.removeListener;\n\n\tif (!addListener || !removeListener) {\n\t\tthrow new TypeError('Emitter is not compatible');\n\t}\n\n\treturn {\n\t\taddListener: addListener.bind(emitter),\n\t\tremoveListener: removeListener.bind(emitter),\n\t};\n};\n\nexport function pEventMultiple(emitter, event, options) {\n\tlet cancel;\n\tconst returnValue = new Promise((resolve, reject) => {\n\t\toptions = {\n\t\t\trejectionEvents: ['error'],\n\t\t\tmultiArgs: false,\n\t\t\tresolveImmediately: false,\n\t\t\t...options,\n\t\t};\n\n\t\tif (!(options.count >= 0 && (options.count === Number.POSITIVE_INFINITY || Number.isInteger(options.count)))) {\n\t\t\tthrow new TypeError('The `count` option should be at least 0 or more');\n\t\t}\n\n\t\toptions.signal?.throwIfAborted();\n\n\t\t// Allow multiple events\n\t\tconst events = [event].flat();\n\n\t\tconst items = [];\n\t\tconst {addListener, removeListener} = normalizeEmitter(emitter);\n\n\t\tconst onItem = (...arguments_) => {\n\t\t\tconst value = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\t\t// eslint-disable-next-line unicorn/no-array-callback-reference\n\t\t\tif (options.filter && !options.filter(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\titems.push(value);\n\n\t\t\tif (options.count === items.length) {\n\t\t\t\tcancel();\n\t\t\t\tresolve(items);\n\t\t\t}\n\t\t};\n\n\t\tconst rejectHandler = error => {\n\t\t\tcancel();\n\t\t\treject(error);\n\t\t};\n\n\t\tcancel = () => {\n\t\t\tfor (const event of events) {\n\t\t\t\tremoveListener(event, onItem);\n\t\t\t}\n\n\t\t\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\t\t\tremoveListener(rejectionEvent, rejectHandler);\n\t\t\t}\n\t\t};\n\n\t\tfor (const event of events) {\n\t\t\taddListener(event, onItem);\n\t\t}\n\n\t\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\t\taddListener(rejectionEvent, rejectHandler);\n\t\t}\n\n\t\tif (options.signal) {\n\t\t\toptions.signal.addEventListener('abort', () => {\n\t\t\t\trejectHandler(options.signal.reason);\n\t\t\t}, {once: true});\n\t\t}\n\n\t\tif (options.resolveImmediately) {\n\t\t\tresolve(items);\n\t\t}\n\t});\n\n\treturnValue.cancel = cancel;\n\n\tif (typeof options.timeout === 'number') {\n\t\tconst timeout = pTimeout(returnValue, {milliseconds: options.timeout});\n\t\ttimeout.cancel = cancel;\n\t\treturn timeout;\n\t}\n\n\treturn returnValue;\n}\n\nexport function pEvent(emitter, event, options) {\n\tif (typeof options === 'function') {\n\t\toptions = {filter: options};\n\t}\n\n\toptions = {\n\t\t...options,\n\t\tcount: 1,\n\t\tresolveImmediately: false,\n\t};\n\n\tconst arrayPromise = pEventMultiple(emitter, event, options);\n\tconst promise = arrayPromise.then(array => array[0]);\n\tpromise.cancel = arrayPromise.cancel;\n\n\treturn promise;\n}\n\nexport function pEventIterator(emitter, event, options) {\n\tif (typeof options === 'function') {\n\t\toptions = {filter: options};\n\t}\n\n\t// Allow multiple events\n\tconst events = [event].flat();\n\n\toptions = {\n\t\trejectionEvents: ['error'],\n\t\tresolutionEvents: [],\n\t\tlimit: Number.POSITIVE_INFINITY,\n\t\tmultiArgs: false,\n\t\t...options,\n\t};\n\n\tconst {limit} = options;\n\tconst isValidLimit = limit >= 0 && (limit === Number.POSITIVE_INFINITY || Number.isInteger(limit));\n\tif (!isValidLimit) {\n\t\tthrow new TypeError('The `limit` option should be a non-negative integer or Infinity');\n\t}\n\n\toptions.signal?.throwIfAborted();\n\n\tif (limit === 0) {\n\t\t// Return an empty async iterator to avoid any further cost\n\t\treturn {\n\t\t\t[Symbol.asyncIterator]() {\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tasync next() {\n\t\t\t\treturn {\n\t\t\t\t\tdone: true,\n\t\t\t\t\tvalue: undefined,\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n\n\tconst {addListener, removeListener} = normalizeEmitter(emitter);\n\n\tlet isDone = false;\n\tlet error;\n\tlet hasPendingError = false;\n\tconst nextQueue = [];\n\tconst valueQueue = [];\n\tlet eventCount = 0;\n\tlet isLimitReached = false;\n\n\tconst valueHandler = (...arguments_) => {\n\t\teventCount++;\n\t\tisLimitReached = eventCount === limit;\n\n\t\tconst value = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\tif (nextQueue.length > 0) {\n\t\t\tconst {resolve} = nextQueue.shift();\n\n\t\t\tresolve({done: false, value});\n\n\t\t\tif (isLimitReached) {\n\t\t\t\tcancel();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueQueue.push(value);\n\n\t\tif (isLimitReached) {\n\t\t\tcancel();\n\t\t}\n\t};\n\n\tconst cancel = () => {\n\t\tisDone = true;\n\n\t\tfor (const event of events) {\n\t\t\tremoveListener(event, valueHandler);\n\t\t}\n\n\t\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\t\tremoveListener(rejectionEvent, rejectHandler);\n\t\t}\n\n\t\tfor (const resolutionEvent of options.resolutionEvents) {\n\t\t\tremoveListener(resolutionEvent, resolveHandler);\n\t\t}\n\n\t\twhile (nextQueue.length > 0) {\n\t\t\tconst {resolve} = nextQueue.shift();\n\t\t\tresolve({done: true, value: undefined});\n\t\t}\n\t};\n\n\tconst rejectHandler = (...arguments_) => {\n\t\terror = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\tif (nextQueue.length > 0) {\n\t\t\tconst {reject} = nextQueue.shift();\n\t\t\treject(error);\n\t\t} else {\n\t\t\thasPendingError = true;\n\t\t}\n\n\t\tcancel();\n\t};\n\n\tconst resolveHandler = (...arguments_) => {\n\t\tconst value = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\t// eslint-disable-next-line unicorn/no-array-callback-reference\n\t\tif (options.filter && !options.filter(value)) {\n\t\t\tcancel();\n\t\t\treturn;\n\t\t}\n\n\t\tif (nextQueue.length > 0) {\n\t\t\tconst {resolve} = nextQueue.shift();\n\t\t\tresolve({done: true, value});\n\t\t} else {\n\t\t\tvalueQueue.push(value);\n\t\t}\n\n\t\tcancel();\n\t};\n\n\tfor (const event of events) {\n\t\taddListener(event, valueHandler);\n\t}\n\n\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\taddListener(rejectionEvent, rejectHandler);\n\t}\n\n\tfor (const resolutionEvent of options.resolutionEvents) {\n\t\taddListener(resolutionEvent, resolveHandler);\n\t}\n\n\tif (options.signal) {\n\t\toptions.signal.addEventListener('abort', () => {\n\t\t\trejectHandler(options.signal.reason);\n\t\t}, {once: true});\n\t}\n\n\treturn {\n\t\t[Symbol.asyncIterator]() {\n\t\t\treturn this;\n\t\t},\n\t\tasync next() {\n\t\t\tif (valueQueue.length > 0) {\n\t\t\t\tconst value = valueQueue.shift();\n\t\t\t\treturn {\n\t\t\t\t\tdone: isDone && valueQueue.length === 0 && !isLimitReached,\n\t\t\t\t\tvalue,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (hasPendingError) {\n\t\t\t\thasPendingError = false;\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tif (isDone) {\n\t\t\t\treturn {\n\t\t\t\t\tdone: true,\n\t\t\t\t\tvalue: undefined,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tnextQueue.push({resolve, reject});\n\t\t\t});\n\t\t},\n\t\tasync return(value) {\n\t\t\tcancel();\n\t\t\treturn {\n\t\t\t\tdone: isDone,\n\t\t\t\tvalue,\n\t\t\t};\n\t\t},\n\t};\n}\n\nexport {TimeoutError} from 'p-timeout';\n", "/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime'\nimport type { Codec } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface Message {\n  flag?: Message.Flag\n  message?: Uint8Array\n}\n\nexport namespace Message {\n  export enum Flag {\n    FIN = 'FIN',\n    STOP_SENDING = 'STOP_SENDING',\n    RESET = 'RESET',\n    FIN_ACK = 'FIN_ACK'\n  }\n\n  enum __FlagValues {\n    FIN = 0,\n    STOP_SENDING = 1,\n    RESET = 2,\n    FIN_ACK = 3\n  }\n\n  export namespace Flag {\n    export const codec = (): Codec<Flag> => {\n      return enumeration<Flag>(__FlagValues)\n    }\n  }\n\n  let _codec: Codec<Message>\n\n  export const codec = (): Codec<Message> => {\n    if (_codec == null) {\n      _codec = message<Message>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.flag != null) {\n          w.uint32(8)\n          Message.Flag.codec().encode(obj.flag, w)\n        }\n\n        if (obj.message != null) {\n          w.uint32(18)\n          w.bytes(obj.message)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1:\n              obj.flag = Message.Flag.codec().decode(reader)\n              break\n            case 2:\n              obj.message = reader.bytes()\n              break\n            default:\n              reader.skipType(tag & 7)\n              break\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Message>): Uint8Array => {\n    return encodeMessage(obj, Message.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList): Message => {\n    return decodeMessage(buf, Message.codec())\n  }\n}\n", "import { CodeError } from '@libp2p/interface'\nimport { AbstractStream, type AbstractStreamInit } from '@libp2p/utils/abstract-stream'\nimport * as lengthPrefixed from 'it-length-prefixed'\nimport { type Pushable, pushable } from 'it-pushable'\nimport pDefer from 'p-defer'\nimport { pEvent, TimeoutError } from 'p-event'\nimport pTimeout from 'p-timeout'\nimport { raceSignal } from 'race-signal'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { Message } from './pb/message.js'\nimport type { DataChannelOptions } from './index.js'\nimport type { AbortOptions, ComponentLogger, Direction } from '@libp2p/interface'\nimport type { DeferredPromise } from 'p-defer'\n\nexport interface WebRTCStreamInit extends AbstractStreamInit, DataChannelOptions {\n  /**\n   * The network channel used for bidirectional peer-to-peer transfers of\n   * arbitrary data\n   *\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel}\n   */\n  channel: RTCDataChannel\n\n  logger: ComponentLogger\n}\n\n/**\n * How much can be buffered to the DataChannel at once\n */\nexport const MAX_BUFFERED_AMOUNT = 16 * 1024 * 1024\n\n/**\n * How long time we wait for the 'bufferedamountlow' event to be emitted\n */\nexport const BUFFERED_AMOUNT_LOW_TIMEOUT = 30 * 1000\n\n/**\n * protobuf field definition overhead\n */\nexport const PROTOBUF_OVERHEAD = 5\n\n/**\n * Length of varint, in bytes\n */\nexport const VARINT_LENGTH = 2\n\n/**\n * Max message size that can be sent to the DataChannel\n */\nexport const MAX_MESSAGE_SIZE = 16 * 1024\n\n/**\n * When closing streams we send a FIN then wait for the remote to\n * reply with a FIN_ACK. If that does not happen within this timeout\n * we close the stream anyway.\n */\nexport const FIN_ACK_TIMEOUT = 5000\n\n/**\n * When sending data messages, if the channel is not in the \"open\" state, wait\n * this long for the \"open\" event to fire.\n */\nexport const OPEN_TIMEOUT = 5000\n\nexport class WebRTCStream extends AbstractStream {\n  /**\n   * The data channel used to send and receive data\n   */\n  private readonly channel: RTCDataChannel\n\n  /**\n   * push data from the underlying datachannel to the length prefix decoder\n   * and then the protobuf decoder.\n   */\n  private readonly incomingData: Pushable<Uint8Array>\n\n  private readonly maxBufferedAmount: number\n\n  private readonly bufferedAmountLowEventTimeout: number\n\n  /**\n   * The maximum size of a message in bytes\n   */\n  private readonly maxMessageSize: number\n\n  /**\n   * When this promise is resolved, the remote has sent us a FIN flag\n   */\n  private readonly receiveFinAck: DeferredPromise<void>\n  private readonly finAckTimeout: number\n  private readonly openTimeout: number\n\n  constructor (init: WebRTCStreamInit) {\n    // override onEnd to send/receive FIN_ACK before closing the stream\n    const originalOnEnd = init.onEnd\n    init.onEnd = (err?: Error): void => {\n      this.log.trace('readable and writeable ends closed', this.status)\n\n      void Promise.resolve(async () => {\n        if (this.timeline.abort != null || this.timeline.reset !== null) {\n          return\n        }\n\n        // wait for FIN_ACK if we haven't received it already\n        try {\n          await pTimeout(this.receiveFinAck.promise, {\n            milliseconds: this.finAckTimeout\n          })\n        } catch (err) {\n          this.log.error('error receiving FIN_ACK', err)\n        }\n      })\n        .then(() => {\n        // stop processing incoming messages\n          this.incomingData.end()\n\n          // final cleanup\n          originalOnEnd?.(err)\n        })\n        .catch(err => {\n          this.log.error('error ending stream', err)\n        })\n    }\n\n    super(init)\n\n    this.channel = init.channel\n    this.channel.binaryType = 'arraybuffer'\n    this.incomingData = pushable<Uint8Array>()\n    this.bufferedAmountLowEventTimeout = init.bufferedAmountLowEventTimeout ?? BUFFERED_AMOUNT_LOW_TIMEOUT\n    this.maxBufferedAmount = init.maxBufferedAmount ?? MAX_BUFFERED_AMOUNT\n    this.maxMessageSize = (init.maxMessageSize ?? MAX_MESSAGE_SIZE) - PROTOBUF_OVERHEAD - VARINT_LENGTH\n    this.receiveFinAck = pDefer()\n    this.finAckTimeout = init.closeTimeout ?? FIN_ACK_TIMEOUT\n    this.openTimeout = init.openTimeout ?? OPEN_TIMEOUT\n\n    // set up initial state\n    switch (this.channel.readyState) {\n      case 'open':\n        this.timeline.open = new Date().getTime()\n        break\n\n      case 'closed':\n      case 'closing':\n        if (this.timeline.close === undefined || this.timeline.close === 0) {\n          this.timeline.close = Date.now()\n        }\n        break\n      case 'connecting':\n        // noop\n        break\n\n      default:\n        this.log.error('unknown datachannel state %s', this.channel.readyState)\n        throw new CodeError('Unknown datachannel state', 'ERR_INVALID_STATE')\n    }\n\n    // handle RTCDataChannel events\n    this.channel.onopen = (_evt) => {\n      this.timeline.open = new Date().getTime()\n    }\n\n    this.channel.onclose = (_evt) => {\n      // if the channel has closed we'll never receive a FIN_ACK so resolve the\n      // promise so we don't try to wait later\n      this.receiveFinAck.resolve()\n\n      void this.close().catch(err => {\n        this.log.error('error closing stream after channel closed', err)\n      })\n    }\n\n    this.channel.onerror = (evt) => {\n      const err = (evt as RTCErrorEvent).error\n      this.abort(err)\n    }\n\n    this.channel.onmessage = async (event: MessageEvent<ArrayBuffer>) => {\n      const { data } = event\n\n      if (data === null || data.byteLength === 0) {\n        return\n      }\n\n      this.incomingData.push(new Uint8Array(data, 0, data.byteLength))\n    }\n\n    const self = this\n\n    // pipe framed protobuf messages through a length prefixed decoder, and\n    // surface data from the `Message.message` field through a source.\n    Promise.resolve().then(async () => {\n      for await (const buf of lengthPrefixed.decode(this.incomingData)) {\n        const message = self.processIncomingProtobuf(buf)\n\n        if (message != null) {\n          self.sourcePush(new Uint8ArrayList(message))\n        }\n      }\n    })\n      .catch(err => {\n        this.log.error('error processing incoming data channel messages', err)\n      })\n  }\n\n  sendNewStream (): void {\n    // opening new streams is handled by WebRTC so this is a noop\n  }\n\n  async _sendMessage (data: Uint8ArrayList, checkBuffer: boolean = true): Promise<void> {\n    if (checkBuffer && this.channel.bufferedAmount > this.maxBufferedAmount) {\n      try {\n        this.log('channel buffer is %d, wait for \"bufferedamountlow\" event', this.channel.bufferedAmount)\n        await pEvent(this.channel, 'bufferedamountlow', { timeout: this.bufferedAmountLowEventTimeout })\n      } catch (err: any) {\n        if (err instanceof TimeoutError) {\n          throw new CodeError(`Timed out waiting for DataChannel buffer to clear after ${this.bufferedAmountLowEventTimeout}ms`, 'ERR_BUFFER_CLEAR_TIMEOUT')\n        }\n\n        throw err\n      }\n    }\n\n    if (this.channel.readyState === 'closed' || this.channel.readyState === 'closing') {\n      throw new CodeError(`Invalid datachannel state - ${this.channel.readyState}`, 'ERR_INVALID_STATE')\n    }\n\n    if (this.channel.readyState !== 'open') {\n      this.log('channel state is \"%s\" and not \"open\", waiting for \"open\" event before sending data', this.channel.readyState)\n      await pEvent(this.channel, 'open', { timeout: this.openTimeout })\n      this.log('channel state is now \"%s\", sending data', this.channel.readyState)\n    }\n\n    // send message without copying data\n    this.channel.send(data.subarray())\n  }\n\n  async sendData (data: Uint8ArrayList): Promise<void> {\n    // sending messages is an async operation so use a copy of the list as it\n    // may be changed beneath us\n    data = data.sublist()\n\n    while (data.byteLength > 0) {\n      const toSend = Math.min(data.byteLength, this.maxMessageSize)\n      const buf = data.subarray(0, toSend)\n      const msgbuf = Message.encode({ message: buf })\n      const sendbuf = lengthPrefixed.encode.single(msgbuf)\n      await this._sendMessage(sendbuf)\n\n      data.consume(toSend)\n    }\n  }\n\n  async sendReset (): Promise<void> {\n    await this._sendFlag(Message.Flag.RESET)\n  }\n\n  async sendCloseWrite (options: AbortOptions): Promise<void> {\n    const sent = await this._sendFlag(Message.Flag.FIN)\n\n    if (sent) {\n      this.log.trace('awaiting FIN_ACK')\n      try {\n        await raceSignal(this.receiveFinAck.promise, options?.signal, {\n          errorMessage: 'sending close-write was aborted before FIN_ACK was received',\n          errorCode: 'ERR_FIN_ACK_NOT_RECEIVED'\n        })\n      } catch (err) {\n        this.log.error('failed to await FIN_ACK', err)\n      }\n    } else {\n      this.log.trace('sending FIN failed, not awaiting FIN_ACK')\n    }\n\n    // if we've attempted to receive a FIN_ACK, do not try again\n    this.receiveFinAck.resolve()\n  }\n\n  async sendCloseRead (): Promise<void> {\n    await this._sendFlag(Message.Flag.STOP_SENDING)\n  }\n\n  /**\n   * Handle incoming\n   */\n  private processIncomingProtobuf (buffer: Uint8ArrayList): Uint8Array | undefined {\n    const message = Message.decode(buffer)\n\n    if (message.flag !== undefined) {\n      this.log.trace('incoming flag %s, write status \"%s\", read status \"%s\"', message.flag, this.writeStatus, this.readStatus)\n\n      if (message.flag === Message.Flag.FIN) {\n        // We should expect no more data from the remote, stop reading\n        this.remoteCloseWrite()\n\n        this.log.trace('sending FIN_ACK')\n        void this._sendFlag(Message.Flag.FIN_ACK)\n          .catch(err => {\n            this.log.error('error sending FIN_ACK immediately', err)\n          })\n      }\n\n      if (message.flag === Message.Flag.RESET) {\n        // Stop reading and writing to the stream immediately\n        this.reset()\n      }\n\n      if (message.flag === Message.Flag.STOP_SENDING) {\n        // The remote has stopped reading\n        this.remoteCloseRead()\n      }\n\n      if (message.flag === Message.Flag.FIN_ACK) {\n        this.log.trace('received FIN_ACK')\n        this.receiveFinAck.resolve()\n      }\n    }\n\n    // ignore data messages if we've closed the readable end already\n    if (this.readStatus === 'ready') {\n      return message.message\n    }\n  }\n\n  private async _sendFlag (flag: Message.Flag): Promise<boolean> {\n    if (this.channel.readyState !== 'open') {\n      // flags can be sent while we or the remote are closing the datachannel so\n      // if the channel isn't open, don't try to send it but return false to let\n      // the caller know and act if they need to\n      this.log.trace('not sending flag %s because channel is \"%s\" and not \"open\"', this.channel.readyState, flag.toString())\n      return false\n    }\n\n    this.log.trace('sending flag %s', flag.toString())\n    const msgbuf = Message.encode({ flag })\n    const prefixedBuf = lengthPrefixed.encode.single(msgbuf)\n\n    try {\n      await this._sendMessage(prefixedBuf, false)\n\n      return true\n    } catch (err: any) {\n      this.log.error('could not send flag %s', flag.toString(), err)\n    }\n\n    return false\n  }\n}\n\nexport interface WebRTCStreamOptions extends DataChannelOptions {\n  /**\n   * The network channel used for bidirectional peer-to-peer transfers of\n   * arbitrary data\n   *\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel}\n   */\n  channel: RTCDataChannel\n\n  /**\n   * The stream direction\n   */\n  direction: Direction\n\n  /**\n   * A callback invoked when the channel ends\n   */\n  onEnd?(err?: Error | undefined): void\n\n  logger: ComponentLogger\n}\n\nexport function createStream (options: WebRTCStreamOptions): WebRTCStream {\n  const { channel, direction } = options\n\n  return new WebRTCStream({\n    id: direction === 'inbound' ? (`i${channel.id}`) : `r${channel.id}`,\n    log: options.logger.forComponent(`libp2p:webrtc:stream:${direction}:${channel.id}`),\n    ...options\n  })\n}\n", "import { createStream } from './stream.js'\nimport { drainAndClose, nopSink, nopSource } from './util.js'\nimport type { DataChannelOptions } from './index.js'\nimport type { ComponentLogger, Logger, Stream, CounterGroup, StreamMuxer, StreamMuxerFactory, StreamMuxerInit } from '@libp2p/interface'\nimport type { AbortOptions } from '@multiformats/multiaddr'\nimport type { Source, Sink } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nconst PROTOCOL = '/webrtc'\n\nexport interface DataChannelMuxerFactoryInit {\n  /**\n   * WebRTC Peer Connection\n   */\n  peerConnection: RTCPeerConnection\n\n  /**\n   * The protocol to use\n   */\n  protocol?: string\n\n  /**\n   * Optional metrics for this data channel muxer\n   */\n  metrics?: CounterGroup\n\n  dataChannelOptions?: DataChannelOptions\n}\n\nexport interface DataChannelMuxerFactoryComponents {\n  logger: ComponentLogger\n}\n\ninterface BufferedStream {\n  stream: Stream\n  channel: RTCDataChannel\n  onEnd(err?: Error): void\n}\n\nexport class DataChannelMuxerFactory implements StreamMuxerFactory {\n  public readonly protocol: string\n\n  /**\n   * WebRTC Peer Connection\n   */\n  private readonly peerConnection: RTCPeerConnection\n  private bufferedStreams: BufferedStream[] = []\n  private readonly metrics?: CounterGroup\n  private readonly dataChannelOptions?: DataChannelOptions\n  private readonly components: DataChannelMuxerFactoryComponents\n  private readonly log: Logger\n\n  constructor (components: DataChannelMuxerFactoryComponents, init: DataChannelMuxerFactoryInit) {\n    this.components = components\n    this.peerConnection = init.peerConnection\n    this.metrics = init.metrics\n    this.protocol = init.protocol ?? PROTOCOL\n    this.dataChannelOptions = init.dataChannelOptions ?? {}\n    this.log = components.logger.forComponent('libp2p:webrtc:datachannelmuxerfactory')\n\n    // store any datachannels opened before upgrade has been completed\n    this.peerConnection.ondatachannel = ({ channel }) => {\n      this.log.trace('incoming early datachannel with channel id %d and label \"%s\"', channel.id)\n\n      // 'init' channel is only used during connection establishment\n      if (channel.label === 'init') {\n        this.log.trace('closing early init channel')\n        channel.close()\n\n        return\n      }\n\n      // @ts-expect-error fields are set below\n      const bufferedStream: BufferedStream = {}\n\n      const stream = createStream({\n        channel,\n        direction: 'inbound',\n        onEnd: (err) => {\n          bufferedStream.onEnd(err)\n        },\n        logger: components.logger,\n        ...this.dataChannelOptions\n      })\n\n      bufferedStream.stream = stream\n      bufferedStream.channel = channel\n      bufferedStream.onEnd = () => {\n        this.bufferedStreams = this.bufferedStreams.filter(s => s.stream.id !== stream.id)\n      }\n\n      this.bufferedStreams.push(bufferedStream)\n    }\n  }\n\n  createStreamMuxer (init?: StreamMuxerInit): StreamMuxer {\n    return new DataChannelMuxer(this.components, {\n      ...init,\n      peerConnection: this.peerConnection,\n      dataChannelOptions: this.dataChannelOptions,\n      metrics: this.metrics,\n      streams: this.bufferedStreams,\n      protocol: this.protocol\n    })\n  }\n}\n\nexport interface DataChannelMuxerInit extends DataChannelMuxerFactoryInit, StreamMuxerInit {\n  streams: BufferedStream[]\n}\n\nexport interface DataChannelMuxerComponents {\n  logger: ComponentLogger\n}\n\n/**\n * A libp2p data channel stream muxer\n */\nexport class DataChannelMuxer implements StreamMuxer {\n  /**\n   * Array of streams in the data channel\n   */\n  public streams: Stream[]\n  public protocol: string\n\n  private readonly log: Logger\n  private readonly peerConnection: RTCPeerConnection\n  private readonly dataChannelOptions: DataChannelOptions\n  private readonly metrics?: CounterGroup\n  private readonly logger: ComponentLogger\n\n  constructor (components: DataChannelMuxerComponents, readonly init: DataChannelMuxerInit) {\n    this.log = components.logger.forComponent('libp2p:webrtc:muxer')\n    this.logger = components.logger\n    this.streams = init.streams.map(s => s.stream)\n    this.peerConnection = init.peerConnection\n    this.protocol = init.protocol ?? PROTOCOL\n    this.metrics = init.metrics\n    this.dataChannelOptions = init.dataChannelOptions ?? {}\n\n    /**\n     * Fired when a data channel has been added to the connection has been\n     * added by the remote peer.\n     *\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/datachannel_event}\n     */\n    this.peerConnection.ondatachannel = ({ channel }) => {\n      this.log.trace('incoming datachannel with channel id %d', channel.id)\n\n      // 'init' channel is only used during connection establishment\n      if (channel.label === 'init') {\n        this.log.trace('closing init channel')\n        channel.close()\n\n        return\n      }\n\n      const stream = createStream({\n        channel,\n        direction: 'inbound',\n        onEnd: () => {\n          this.log('incoming channel %s ended with state %s', channel.id, channel.readyState)\n          this.#onStreamEnd(stream, channel)\n        },\n        logger: this.logger,\n        ...this.dataChannelOptions\n      })\n\n      this.streams.push(stream)\n      this.metrics?.increment({ incoming_stream: true })\n      init?.onIncomingStream?.(stream)\n    }\n\n    // the DataChannelMuxer constructor is called during set up of the\n    // connection by the upgrader.\n    //\n    // If we invoke `init.onIncomingStream` immediately, the connection object\n    // will not be set up yet so add a tiny delay before letting the\n    // connection know about early streams\n    if (this.init.streams.length > 0) {\n      queueMicrotask(() => {\n        this.init.streams.forEach(bufferedStream => {\n          bufferedStream.onEnd = () => {\n            this.log('incoming early channel %s ended with state %s', bufferedStream.channel.id, bufferedStream.channel.readyState)\n            this.#onStreamEnd(bufferedStream.stream, bufferedStream.channel)\n          }\n\n          this.metrics?.increment({ incoming_stream: true })\n          this.init?.onIncomingStream?.(bufferedStream.stream)\n        })\n      })\n    }\n  }\n\n  #onStreamEnd (stream: Stream, channel: RTCDataChannel): void {\n    this.log.trace('stream %s %s %s onEnd', stream.direction, stream.id, stream.protocol)\n    drainAndClose(\n      channel,\n      `${stream.direction} ${stream.id} ${stream.protocol}`,\n      this.dataChannelOptions.drainTimeout, {\n        log: this.log\n      }\n    )\n    this.streams = this.streams.filter(s => s.id !== stream.id)\n    this.metrics?.increment({ stream_end: true })\n    this.init?.onStreamEnd?.(stream)\n  }\n\n  /**\n   * Gracefully close all tracked streams and stop the muxer\n   */\n  async close (options?: AbortOptions): Promise<void> {\n    try {\n      await Promise.all(\n        this.streams.map(async stream => stream.close(options))\n      )\n    } catch (err: any) {\n      this.abort(err)\n    }\n  }\n\n  /**\n   * Abort all tracked streams and stop the muxer\n   */\n  abort (err: Error): void {\n    for (const stream of this.streams) {\n      stream.abort(err)\n    }\n  }\n\n  /**\n   * The stream source, a no-op as the transport natively supports multiplexing\n   */\n  source: AsyncGenerator<Uint8Array, any, unknown> = nopSource()\n\n  /**\n   * The stream destination, a no-op as the transport natively supports multiplexing\n   */\n  sink: Sink<Source<Uint8Array | Uint8ArrayList>, Promise<void>> = nopSink\n\n  newStream (): Stream {\n    // The spec says the label SHOULD be an empty string: https://github.com/libp2p/specs/blob/master/webrtc/README.md#rtcdatachannel-label\n    const channel = this.peerConnection.createDataChannel('')\n\n    this.log.trace('opened outgoing datachannel with channel id %s', channel.id)\n\n    const stream = createStream({\n      channel,\n      direction: 'outbound',\n      onEnd: () => {\n        this.log('outgoing channel %s ended with state %s', channel.id, channel.readyState)\n        this.#onStreamEnd(stream, channel)\n      },\n      logger: this.logger,\n      ...this.dataChannelOptions\n    })\n    this.streams.push(stream)\n    this.metrics?.increment({ outgoing_stream: true })\n\n    return stream\n  }\n}\n", "export const RTCPeerConnection = globalThis.RTCPeerConnection\nexport const RTCSessionDescription = globalThis.RTCSessionDescription\nexport const RTCIceCandidate = globalThis.RTCIceCandidate\n", "/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime'\nimport type { Codec } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface Message {\n  type?: Message.Type\n  data?: string\n}\n\nexport namespace Message {\n  export enum Type {\n    SDP_OFFER = 'SDP_OFFER',\n    SDP_ANSWER = 'SDP_ANSWER',\n    ICE_CANDIDATE = 'ICE_CANDIDATE'\n  }\n\n  enum __TypeValues {\n    SDP_OFFER = 0,\n    SDP_ANSWER = 1,\n    ICE_CANDIDATE = 2\n  }\n\n  export namespace Type {\n    export const codec = (): Codec<Type> => {\n      return enumeration<Type>(__TypeValues)\n    }\n  }\n\n  let _codec: Codec<Message>\n\n  export const codec = (): Codec<Message> => {\n    if (_codec == null) {\n      _codec = message<Message>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.type != null) {\n          w.uint32(8)\n          Message.Type.codec().encode(obj.type, w)\n        }\n\n        if (obj.data != null) {\n          w.uint32(18)\n          w.string(obj.data)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1:\n              obj.type = Message.Type.codec().decode(reader)\n              break\n            case 2:\n              obj.data = reader.string()\n              break\n            default:\n              reader.skipType(tag & 7)\n              break\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Message>): Uint8Array => {\n    return encodeMessage(obj, Message.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList): Message => {\n    return decodeMessage(buf, Message.codec())\n  }\n}\n", "import { CodeError } from '@libp2p/interface'\nimport pDefer from 'p-defer'\nimport { isFirefox } from '../util.js'\nimport { RTCIceCandidate } from '../webrtc/index.js'\nimport { Message } from './pb/message.js'\nimport type { LoggerOptions, Stream } from '@libp2p/interface'\nimport type { AbortOptions, MessageStream } from 'it-protobuf-stream'\nimport type { DeferredPromise } from 'p-defer'\n\nexport interface ReadCandidatesOptions extends AbortOptions, LoggerOptions {\n  direction: string\n}\n\nexport const readCandidatesUntilConnected = async (pc: RTCPeerConnection, stream: MessageStream<Message, Stream>, options: ReadCandidatesOptions): Promise<void> => {\n  try {\n    const connectedPromise: DeferredPromise<void> = pDefer()\n    resolveOnConnected(pc, connectedPromise)\n\n    // read candidates until we are connected or we reach the end of the stream\n    while (true) {\n      // if we connect, stop trying to read from the stream\n      const message = await Promise.race([\n        connectedPromise.promise,\n        stream.read({\n          signal: options.signal\n        })\n      ])\n\n      // stream ended or we became connected\n      if (message == null) {\n        break\n      }\n\n      if (message.type !== Message.Type.ICE_CANDIDATE) {\n        throw new CodeError('ICE candidate message expected', 'ERR_NOT_ICE_CANDIDATE')\n      }\n\n      const candidateInit = JSON.parse(message.data ?? 'null')\n\n      // an empty string means this generation of candidates is complete, a null\n      // candidate means candidate gathering has finished\n      // see - https://www.w3.org/TR/webrtc/#rtcpeerconnectioniceevent\n      if (candidateInit === '' || candidateInit === null) {\n        options.log.trace('end-of-candidates received')\n\n        continue\n      }\n\n      const candidate = new RTCIceCandidate(candidateInit)\n\n      options.log.trace('%s received new ICE candidate', options.direction, candidate)\n\n      try {\n        await pc.addIceCandidate(candidate)\n      } catch (err) {\n        options.log.error('%s bad candidate received', options.direction, candidateInit, err)\n      }\n    }\n  } catch (err) {\n    options.log.error('%s error parsing ICE candidate', options.direction, err)\n\n    if (options.signal?.aborted === true) {\n      throw err\n    }\n  }\n}\n\nfunction getConnectionState (pc: RTCPeerConnection): string {\n  return isFirefox ? pc.iceConnectionState : pc.connectionState\n}\n\nfunction resolveOnConnected (pc: RTCPeerConnection, promise: DeferredPromise<void>): void {\n  pc[isFirefox ? 'oniceconnectionstatechange' : 'onconnectionstatechange'] = (_) => {\n    switch (getConnectionState(pc)) {\n      case 'connected':\n        promise.resolve()\n        break\n      case 'failed':\n      case 'disconnected':\n      case 'closed':\n        promise.reject(new CodeError('RTCPeerConnection was closed', 'ERR_CONNECTION_CLOSED_BEFORE_CONNECTED'))\n        break\n      default:\n        break\n    }\n  }\n}\n", "import { CodeError } from '@libp2p/interface'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { pbStream } from 'it-protobuf-stream'\nimport { type RTCPeerConnection, RTCSessionDescription } from '../webrtc/index.js'\nimport { Message } from './pb/message.js'\nimport { SIGNALING_PROTO_ID, splitAddr, type WebRTCTransportMetrics } from './transport.js'\nimport { readCandidatesUntilConnected } from './util.js'\nimport type { DataChannelOptions } from '../index.js'\nimport type { LoggerOptions, Connection } from '@libp2p/interface'\nimport type { ConnectionManager, IncomingStreamData, TransportManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface IncomingStreamOpts extends IncomingStreamData {\n  rtcConfiguration?: RTCConfiguration\n  dataChannelOptions?: Partial<DataChannelOptions>\n  signal: AbortSignal\n}\n\nexport interface ConnectOptions extends LoggerOptions {\n  peerConnection: RTCPeerConnection\n  multiaddr: Multiaddr\n  connectionManager: ConnectionManager\n  transportManager: TransportManager\n  dataChannelOptions?: Partial<DataChannelOptions>\n  signal?: AbortSignal\n  metrics?: WebRTCTransportMetrics\n}\n\nexport async function initiateConnection ({ peerConnection, signal, metrics, multiaddr: ma, connectionManager, transportManager, log }: ConnectOptions): Promise<{ remoteAddress: Multiaddr }> {\n  const { baseAddr } = splitAddr(ma)\n\n  metrics?.dialerEvents.increment({ open: true })\n\n  log.trace('dialing base address: %a', baseAddr)\n\n  const relayPeer = baseAddr.getPeerId()\n\n  if (relayPeer == null) {\n    throw new CodeError('Relay peer was missing', 'ERR_INVALID_ADDRESS')\n  }\n\n  const connections = connectionManager.getConnections(peerIdFromString(relayPeer))\n  let connection: Connection\n  let shouldCloseConnection = false\n\n  if (connections.length === 0) {\n    // use the transport manager to open a connection. Initiating a WebRTC\n    // connection takes place in the context of a dial - if we use the\n    // connection manager instead we can end up joining our own dial context\n    connection = await transportManager.dial(baseAddr, {\n      signal\n    })\n    // this connection is unmanaged by the connection manager so we should\n    // close it when we are done\n    shouldCloseConnection = true\n  } else {\n    connection = connections[0]\n  }\n\n  try {\n    const stream = await connection.newStream(SIGNALING_PROTO_ID, {\n      signal,\n      runOnTransientConnection: true\n    })\n\n    const messageStream = pbStream(stream).pb(Message)\n\n    try {\n      // we create the channel so that the RTCPeerConnection has a component for\n      // which to collect candidates. The label is not relevant to connection\n      // initiation but can be useful for debugging\n      const channel = peerConnection.createDataChannel('init')\n\n      // setup callback to write ICE candidates to the remote peer\n      peerConnection.onicecandidate = ({ candidate }) => {\n        // a null candidate means end-of-candidates, an empty string candidate\n        // means end-of-candidates for this generation, otherwise this should\n        // be a valid candidate object\n        // see - https://www.w3.org/TR/webrtc/#rtcpeerconnectioniceevent\n        const data = JSON.stringify(candidate?.toJSON() ?? null)\n\n        log.trace('initiator sending ICE candidate %s', data)\n\n        void messageStream.write({\n          type: Message.Type.ICE_CANDIDATE,\n          data\n        }, {\n          signal\n        })\n          .catch(err => {\n            log.error('error sending ICE candidate', err)\n          })\n      }\n      peerConnection.onicecandidateerror = (event) => {\n        log.error('initiator ICE candidate error', event)\n      }\n\n      // create an offer\n      const offerSdp = await peerConnection.createOffer().catch(err => {\n        log.error('could not execute createOffer', err)\n        throw new CodeError('Failed to set createOffer', 'ERR_SDP_HANDSHAKE_FAILED')\n      })\n\n      log.trace('initiator send SDP offer %s', offerSdp.sdp)\n\n      // write the offer to the stream\n      await messageStream.write({ type: Message.Type.SDP_OFFER, data: offerSdp.sdp }, {\n        signal\n      })\n\n      // set offer as local description\n      await peerConnection.setLocalDescription(offerSdp).catch(err => {\n        log.error('could not execute setLocalDescription', err)\n        throw new CodeError('Failed to set localDescription', 'ERR_SDP_HANDSHAKE_FAILED')\n      })\n\n      // read answer\n      const answerMessage = await messageStream.read({\n        signal\n      })\n\n      if (answerMessage.type !== Message.Type.SDP_ANSWER) {\n        throw new CodeError('Remote should send an SDP answer', 'ERR_SDP_HANDSHAKE_FAILED')\n      }\n\n      log.trace('initiator receive SDP answer %s', answerMessage.data)\n\n      const answerSdp = new RTCSessionDescription({ type: 'answer', sdp: answerMessage.data })\n      await peerConnection.setRemoteDescription(answerSdp).catch(err => {\n        log.error('could not execute setRemoteDescription', err)\n        throw new CodeError('Failed to set remoteDescription', 'ERR_SDP_HANDSHAKE_FAILED')\n      })\n\n      log.trace('initiator read candidates until connected')\n\n      await readCandidatesUntilConnected(peerConnection, messageStream, {\n        direction: 'initiator',\n        signal,\n        log\n      })\n\n      log.trace('initiator connected, closing init channel')\n      channel.close()\n\n      log.trace('initiator closing signalling stream')\n      await messageStream.unwrap().unwrap().close({\n        signal\n      })\n\n      log.trace('initiator connected to remote address %s', ma)\n\n      return {\n        remoteAddress: ma\n      }\n    } catch (err: any) {\n      peerConnection.close()\n      stream.abort(err)\n      throw err\n    } finally {\n      peerConnection.onicecandidate = null\n      peerConnection.onicecandidateerror = null\n    }\n  } finally {\n    // if we had to open a connection to perform the SDP handshake\n    // close it because it's not tracked by the connection manager\n    if (shouldCloseConnection) {\n      try {\n        await connection.close({\n          signal\n        })\n      } catch (err: any) {\n        connection.abort(err)\n      }\n    }\n  }\n}\n", "import { TypedEventEmitter } from '@libp2p/interface'\nimport { Circuit } from '@multiformats/mafmt'\nimport type { PeerId, ListenerEvents, Listener } from '@libp2p/interface'\nimport type { TransportManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface WebRTCPeerListenerComponents {\n  peerId: PeerId\n  transportManager: TransportManager\n}\n\nexport interface WebRTCPeerListenerInit {\n  shutdownController: AbortController\n}\n\nexport class WebRTCPeerListener extends TypedEventEmitter<ListenerEvents> implements Listener {\n  private readonly peerId: PeerId\n  private readonly transportManager: TransportManager\n  private readonly shutdownController: AbortController\n\n  constructor (components: WebRTCPeerListenerComponents, init: WebRTCPeerListenerInit) {\n    super()\n\n    this.peerId = components.peerId\n    this.transportManager = components.transportManager\n\n    this.shutdownController = init.shutdownController\n  }\n\n  async listen (): Promise<void> {\n    this.safeDispatchEvent('listening', {})\n  }\n\n  getAddrs (): Multiaddr[] {\n    return this.transportManager\n      .getListeners()\n      .filter(l => l !== this)\n      .map(l => l.getAddrs()\n        .filter(ma => Circuit.matches(ma))\n        .map(ma => {\n          return ma.encapsulate(`/webrtc/p2p/${this.peerId}`)\n        })\n      )\n      .flat()\n  }\n\n  async close (): Promise<void> {\n    this.shutdownController.abort()\n    this.safeDispatchEvent('close', {})\n  }\n}\n", "import { CodeError } from '@libp2p/interface'\nimport { multiaddr, type Multiaddr } from '@multiformats/multiaddr'\nimport { pbStream } from 'it-protobuf-stream'\nimport { type RTCPeerConnection, RTCSessionDescription } from '../webrtc/index.js'\nimport { Message } from './pb/message.js'\nimport { readCandidatesUntilConnected } from './util.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { IncomingStreamData } from '@libp2p/interface-internal'\n\nexport interface IncomingStreamOpts extends IncomingStreamData {\n  peerConnection: RTCPeerConnection\n  signal: AbortSignal\n  log: Logger\n}\n\nexport async function handleIncomingStream ({ peerConnection, stream, signal, connection, log }: IncomingStreamOpts): Promise<{ remoteAddress: Multiaddr }> {\n  log.trace('new inbound signaling stream')\n\n  const messageStream = pbStream(stream).pb(Message)\n\n  try {\n    // candidate callbacks\n    peerConnection.onicecandidate = ({ candidate }) => {\n      // a null candidate means end-of-candidates, an empty string candidate\n      // means end-of-candidates for this generation, otherwise this should\n      // be a valid candidate object\n      // see - https://www.w3.org/TR/webrtc/#rtcpeerconnectioniceevent\n      const data = JSON.stringify(candidate?.toJSON() ?? null)\n\n      log.trace('recipient sending ICE candidate %s', data)\n\n      messageStream.write({\n        type: Message.Type.ICE_CANDIDATE,\n        data\n      }, {\n        signal\n      })\n        .catch(err => {\n          log.error('error sending ICE candidate', err)\n        })\n    }\n\n    // read an SDP offer\n    const pbOffer = await messageStream.read({\n      signal\n    })\n\n    if (pbOffer.type !== Message.Type.SDP_OFFER) {\n      throw new CodeError(`expected message type SDP_OFFER, received: ${pbOffer.type ?? 'undefined'} `, 'ERR_SDP_HANDSHAKE_FAILED')\n    }\n\n    log.trace('recipient receive SDP offer %s', pbOffer.data)\n\n    const offer = new RTCSessionDescription({\n      type: 'offer',\n      sdp: pbOffer.data\n    })\n\n    await peerConnection.setRemoteDescription(offer).catch(err => {\n      log.error('could not execute setRemoteDescription', err)\n      throw new CodeError('Failed to set remoteDescription', 'ERR_SDP_HANDSHAKE_FAILED')\n    })\n\n    // create and write an SDP answer\n    const answer = await peerConnection.createAnswer().catch(err => {\n      log.error('could not execute createAnswer', err)\n      throw new CodeError('Failed to create answer', 'ERR_SDP_HANDSHAKE_FAILED')\n    })\n\n    log.trace('recipient send SDP answer %s', answer.sdp)\n\n    // write the answer to the remote\n    await messageStream.write({ type: Message.Type.SDP_ANSWER, data: answer.sdp }, {\n      signal\n    })\n\n    await peerConnection.setLocalDescription(answer).catch(err => {\n      log.error('could not execute setLocalDescription', err)\n      throw new CodeError('Failed to set localDescription', 'ERR_SDP_HANDSHAKE_FAILED')\n    })\n\n    log.trace('recipient read candidates until connected')\n\n    // wait until candidates are connected\n    await readCandidatesUntilConnected(peerConnection, messageStream, {\n      direction: 'recipient',\n      signal,\n      log\n    })\n  } catch (err: any) {\n    if (peerConnection.connectionState !== 'connected') {\n      log.error('error while handling signaling stream from peer %a', connection.remoteAddr, err)\n\n      peerConnection.close()\n      throw err\n    } else {\n      log('error while handling signaling stream from peer %a, ignoring as the RTCPeerConnection is already connected', connection.remoteAddr, err)\n    }\n  }\n\n  const remoteAddress = multiaddr(`/webrtc/p2p/${connection.remoteAddr.getPeerId()}`)\n\n  log.trace('recipient connected to remote address %s', remoteAddress)\n\n  return { remoteAddress }\n}\n", "import { CodeError, setMaxListeners } from '@libp2p/interface'\nimport { type CreateListenerOptions, type DialOptions, transportSymbol, type Transport, type Listener, type Upgrader, type ComponentLogger, type Logger, type Connection, type PeerId, type CounterGroup, type Metrics, type Startable } from '@libp2p/interface'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { multiaddr, type Multiaddr } from '@multiformats/multiaddr'\nimport { WebRTC } from '@multiformats/multiaddr-matcher'\nimport { codes } from '../error.js'\nimport { WebRTCMultiaddrConnection } from '../maconn.js'\nimport { DataChannelMuxerFactory } from '../muxer.js'\nimport { RTCPeerConnection } from '../webrtc/index.js'\nimport { initiateConnection } from './initiate-connection.js'\nimport { WebRTCPeerListener } from './listener.js'\nimport { handleIncomingStream } from './signaling-stream-handler.js'\nimport type { DataChannelOptions } from '../index.js'\nimport type { IncomingStreamData, Registrar, ConnectionManager, TransportManager } from '@libp2p/interface-internal'\n\nconst WEBRTC_TRANSPORT = '/webrtc'\nconst CIRCUIT_RELAY_TRANSPORT = '/p2p-circuit'\nexport const SIGNALING_PROTO_ID = '/webrtc-signaling/0.0.1'\nconst INBOUND_CONNECTION_TIMEOUT = 30 * 1000\n\nexport interface WebRTCTransportInit {\n  rtcConfiguration?: RTCConfiguration\n  dataChannel?: DataChannelOptions\n\n  /**\n   * Inbound connections must complete the upgrade within this many ms\n   * (default: 30s)\n   */\n  inboundConnectionTimeout?: number\n}\n\nexport interface WebRTCTransportComponents {\n  peerId: PeerId\n  registrar: Registrar\n  upgrader: Upgrader\n  transportManager: TransportManager\n  connectionManager: ConnectionManager\n  metrics?: Metrics\n  logger: ComponentLogger\n}\n\nexport interface WebRTCTransportMetrics {\n  dialerEvents: CounterGroup\n  listenerEvents: CounterGroup\n}\n\nexport class WebRTCTransport implements Transport, Startable {\n  private readonly log: Logger\n  private _started = false\n  private readonly metrics?: WebRTCTransportMetrics\n  private readonly shutdownController: AbortController\n\n  constructor (\n    private readonly components: WebRTCTransportComponents,\n    private readonly init: WebRTCTransportInit = {}\n  ) {\n    this.log = components.logger.forComponent('libp2p:webrtc')\n    this.shutdownController = new AbortController()\n    setMaxListeners(Infinity, this.shutdownController.signal)\n\n    if (components.metrics != null) {\n      this.metrics = {\n        dialerEvents: components.metrics.registerCounterGroup('libp2p_webrtc_dialer_events_total', {\n          label: 'event',\n          help: 'Total count of WebRTC dialer events by type'\n        }),\n        listenerEvents: components.metrics.registerCounterGroup('libp2p_webrtc_listener_events_total', {\n          label: 'event',\n          help: 'Total count of WebRTC listener events by type'\n        })\n      }\n    }\n  }\n\n  isStarted (): boolean {\n    return this._started\n  }\n\n  async start (): Promise<void> {\n    await this.components.registrar.handle(SIGNALING_PROTO_ID, (data: IncomingStreamData) => {\n      this._onProtocol(data).catch(err => { this.log.error('failed to handle incoming connect from %p', data.connection.remotePeer, err) })\n    }, {\n      runOnTransientConnection: true\n    })\n    this._started = true\n  }\n\n  async stop (): Promise<void> {\n    await this.components.registrar.unhandle(SIGNALING_PROTO_ID)\n    this._started = false\n  }\n\n  createListener (options: CreateListenerOptions): Listener {\n    return new WebRTCPeerListener(this.components, {\n      shutdownController: this.shutdownController\n    })\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/webrtc'\n\n  readonly [transportSymbol] = true\n\n  /**\n   * Filter check for all Multiaddrs that this transport can listen on\n   */\n  listenFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    return multiaddrs.filter(WebRTC.exactMatch)\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can dial\n   */\n  dialFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    return this.listenFilter(multiaddrs)\n  }\n\n  /*\n   * dial connects to a remote via the circuit relay or any other protocol\n   * and proceeds to upgrade to a webrtc connection.\n   * multiaddr of the form: <multiaddr>/webrtc/p2p/<destination-peer>\n   * For a circuit relay, this will be of the form\n   * <relay address>/p2p/<relay-peer>/p2p-circuit/webrtc/p2p/<destination-peer>\n  */\n  async dial (ma: Multiaddr, options: DialOptions): Promise<Connection> {\n    this.log.trace('dialing address: %a', ma)\n\n    const peerConnection = new RTCPeerConnection(this.init.rtcConfiguration)\n    const muxerFactory = new DataChannelMuxerFactory(this.components, {\n      peerConnection,\n      dataChannelOptions: this.init.dataChannel\n    })\n\n    const { remoteAddress } = await initiateConnection({\n      peerConnection,\n      multiaddr: ma,\n      dataChannelOptions: this.init.dataChannel,\n      signal: options.signal,\n      connectionManager: this.components.connectionManager,\n      transportManager: this.components.transportManager,\n      log: this.log\n    })\n\n    const webRTCConn = new WebRTCMultiaddrConnection(this.components, {\n      peerConnection,\n      timeline: { open: Date.now() },\n      remoteAddr: remoteAddress,\n      metrics: this.metrics?.dialerEvents\n    })\n\n    const connection = await options.upgrader.upgradeOutbound(webRTCConn, {\n      skipProtection: true,\n      skipEncryption: true,\n      muxerFactory\n    })\n\n    // close the connection on shut down\n    this._closeOnShutdown(peerConnection, webRTCConn)\n\n    return connection\n  }\n\n  async _onProtocol ({ connection, stream }: IncomingStreamData): Promise<void> {\n    const signal = AbortSignal.timeout(this.init.inboundConnectionTimeout ?? INBOUND_CONNECTION_TIMEOUT)\n    const peerConnection = new RTCPeerConnection(this.init.rtcConfiguration)\n    const muxerFactory = new DataChannelMuxerFactory(this.components, {\n      peerConnection,\n      dataChannelOptions: this.init.dataChannel\n    })\n\n    try {\n      const { remoteAddress } = await handleIncomingStream({\n        peerConnection,\n        connection,\n        stream,\n        signal,\n        log: this.log\n      })\n\n      const webRTCConn = new WebRTCMultiaddrConnection(this.components, {\n        peerConnection,\n        timeline: { open: (new Date()).getTime() },\n        remoteAddr: remoteAddress,\n        metrics: this.metrics?.listenerEvents\n      })\n\n      // close the connection on shut down\n      this._closeOnShutdown(peerConnection, webRTCConn)\n\n      await this.components.upgrader.upgradeInbound(webRTCConn, {\n        skipEncryption: true,\n        skipProtection: true,\n        muxerFactory\n      })\n\n      // close the stream if SDP messages have been exchanged successfully\n      await stream.close({\n        signal\n      })\n    } catch (err: any) {\n      stream.abort(err)\n      throw err\n    }\n  }\n\n  private _closeOnShutdown (pc: RTCPeerConnection, webRTCConn: WebRTCMultiaddrConnection): void {\n    // close the connection on shut down\n    const shutDownListener = (): void => {\n      webRTCConn.close()\n        .catch(err => {\n          this.log.error('could not close WebRTCMultiaddrConnection', err)\n        })\n    }\n\n    this.shutdownController.signal.addEventListener('abort', shutDownListener)\n\n    pc.addEventListener('close', () => {\n      this.shutdownController.signal.removeEventListener('abort', shutDownListener)\n    })\n  }\n}\n\nexport function splitAddr (ma: Multiaddr): { baseAddr: Multiaddr, peerId: PeerId } {\n  const addrs = ma.toString().split(WEBRTC_TRANSPORT + '/')\n  if (addrs.length !== 2) {\n    throw new CodeError('webrtc protocol was not present in multiaddr', codes.ERR_INVALID_MULTIADDR)\n  }\n\n  if (!addrs[0].includes(CIRCUIT_RELAY_TRANSPORT)) {\n    throw new CodeError('p2p-circuit protocol was not present in multiaddr', codes.ERR_INVALID_MULTIADDR)\n  }\n\n  // look for remote peerId\n  let remoteAddr = multiaddr(addrs[0])\n  const destination = multiaddr('/' + addrs[1])\n\n  const destinationIdString = destination.getPeerId()\n  if (destinationIdString == null) {\n    throw new CodeError('destination peer id was missing', codes.ERR_INVALID_MULTIADDR)\n  }\n\n  const lastProtoInRemote = remoteAddr.protos().pop()\n  if (lastProtoInRemote === undefined) {\n    throw new CodeError('invalid multiaddr', codes.ERR_INVALID_MULTIADDR)\n  }\n  if (lastProtoInRemote.name !== 'p2p') {\n    remoteAddr = remoteAddr.encapsulate(`/p2p/${destinationIdString}`)\n  }\n\n  return { baseAddr: remoteAddr, peerId: peerIdFromString(destinationIdString) }\n}\n", "export const NOISE_MSG_MAX_LENGTH_BYTES = 65535\nexport const NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG = NOISE_MSG_MAX_LENGTH_BYTES - 16\n\nexport const DUMP_SESSION_KEYS = Boolean(globalThis.process?.env?.DUMP_SESSION_KEYS)\n", "import { chacha20poly1305 } from '@noble/ciphers/chacha'\nimport { x25519 } from '@noble/curves/ed25519'\nimport { extract, expand } from '@noble/hashes/hkdf'\nimport { sha256 } from '@noble/hashes/sha256'\nimport type { ICryptoInterface } from '../crypto.js'\nimport type { KeyPair } from '../types.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport const pureJsCrypto: ICryptoInterface = {\n  hashSHA256 (data: Uint8Array | Uint8ArrayList): Uint8Array {\n    return sha256(data.subarray())\n  },\n\n  getHKDF (ck: Uint8Array, ikm: Uint8Array): [Uint8Array, Uint8Array, Uint8Array] {\n    const prk = extract(sha256, ikm, ck)\n    const okmU8Array = expand(sha256, prk, undefined, 96)\n    const okm = okmU8Array\n\n    const k1 = okm.subarray(0, 32)\n    const k2 = okm.subarray(32, 64)\n    const k3 = okm.subarray(64, 96)\n\n    return [k1, k2, k3]\n  },\n\n  generateX25519KeyPair (): KeyPair {\n    const secretKey = x25519.utils.randomPrivateKey()\n    const publicKey = x25519.getPublicKey(secretKey)\n\n    return {\n      publicKey,\n      privateKey: secretKey\n    }\n  },\n\n  generateX25519KeyPairFromSeed (seed: Uint8Array): KeyPair {\n    const publicKey = x25519.getPublicKey(seed)\n\n    return {\n      publicKey,\n      privateKey: seed\n    }\n  },\n\n  generateX25519SharedKey (privateKey: Uint8Array | Uint8ArrayList, publicKey: Uint8Array | Uint8ArrayList): Uint8Array {\n    return x25519.getSharedSecret(privateKey.subarray(), publicKey.subarray())\n  },\n\n  chaCha20Poly1305Encrypt (plaintext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array): Uint8Array {\n    return chacha20poly1305(k, nonce, ad).encrypt(plaintext.subarray())\n  },\n\n  chaCha20Poly1305Decrypt (ciphertext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array, dst?: Uint8Array): Uint8Array {\n    return chacha20poly1305(k, nonce, ad).decrypt(ciphertext.subarray(), dst)\n  }\n}\n", "import { pureJsCrypto } from './js.js'\n\nexport const defaultCrypto = pureJsCrypto\n", "import type { ICrypto, KeyPair } from './types.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\n/** Underlying crypto implementation, meant to be overridable */\nexport interface ICryptoInterface {\n  hashSHA256(data: Uint8Array | Uint8ArrayList): Uint8Array\n\n  getHKDF(ck: Uint8Array, ikm: Uint8Array): [Uint8Array, Uint8Array, Uint8Array]\n\n  generateX25519KeyPair(): KeyPair\n  generateX25519KeyPairFromSeed(seed: Uint8Array): KeyPair\n  generateX25519SharedKey(privateKey: Uint8Array | Uint8ArrayList, publicKey: Uint8Array | Uint8ArrayList): Uint8Array\n\n  chaCha20Poly1305Encrypt(plaintext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array): Uint8ArrayList | Uint8Array\n  chaCha20Poly1305Decrypt(ciphertext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array, dst?: Uint8Array): Uint8ArrayList | Uint8Array\n}\n\nexport function wrapCrypto (crypto: ICryptoInterface): ICrypto {\n  return {\n    generateKeypair: crypto.generateX25519KeyPair,\n    dh: (keypair, publicKey) => crypto.generateX25519SharedKey(keypair.privateKey, publicKey).subarray(0, 32),\n    encrypt: crypto.chaCha20Poly1305Encrypt,\n    decrypt: crypto.chaCha20Poly1305Decrypt,\n    hash: crypto.hashSHA256,\n    hkdf: crypto.getHKDF\n  }\n}\n", "import { type Uint8ArrayList } from 'uint8arraylist'\nimport { allocUnsafe as uint8ArrayAllocUnsafe } from 'uint8arrays/alloc'\nimport type { LengthDecoderFunction } from 'it-length-prefixed'\n\nexport const uint16BEEncode = (value: number): Uint8Array => {\n  const target = uint8ArrayAllocUnsafe(2)\n  target[0] = value >> 8\n  target[1] = value\n  return target\n}\nuint16BEEncode.bytes = 2\n\nexport const uint16BEDecode: LengthDecoderFunction = (data: Uint8Array | Uint8ArrayList): number => {\n  if (data.length < 2) throw RangeError('Could not decode int16BE')\n\n  if (data instanceof Uint8Array) {\n    let value = 0\n    value += data[0] << 8\n    value += data[1]\n    return value\n  }\n\n  return data.getUint16(0)\n}\nuint16BEDecode.bytes = 2\n", "import type { Counter, Metrics } from '@libp2p/interface'\n\nexport type MetricsRegistry = Record<string, Counter>\n\nexport function registerMetrics (metrics: Metrics): MetricsRegistry {\n  return {\n    xxHandshakeSuccesses: metrics.registerCounter(\n      'libp2p_noise_xxhandshake_successes_total', {\n        help: 'Total count of noise xxHandshakes successes_'\n      }),\n\n    xxHandshakeErrors: metrics.registerCounter(\n      'libp2p_noise_xxhandshake_error_total', {\n        help: 'Total count of noise xxHandshakes errors'\n      }),\n\n    encryptedPackets: metrics.registerCounter(\n      'libp2p_noise_encrypted_packets_total', {\n        help: 'Total count of noise encrypted packets successfully'\n      }),\n\n    decryptedPackets: metrics.registerCounter(\n      'libp2p_noise_decrypted_packets_total', {\n        help: 'Total count of noise decrypted packets'\n      }),\n\n    decryptErrors: metrics.registerCounter(\n      'libp2p_noise_decrypt_errors_total', {\n        help: 'Total count of noise decrypt errors'\n      })\n  }\n}\n", "import { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { DUMP_SESSION_KEYS } from './constants.js'\nimport type { CipherState } from './protocol.js'\nimport type { KeyPair } from './types.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport function logLocalStaticKeys (s: KeyPair | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (s) {\n    keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${uint8ArrayToString(s.publicKey, 'hex')}`)\n    keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${uint8ArrayToString(s.privateKey, 'hex')}`)\n  } else {\n    keyLogger('Missing local static keys.')\n  }\n}\n\nexport function logLocalEphemeralKeys (e: KeyPair | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (e) {\n    keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${uint8ArrayToString(e.publicKey, 'hex')}`)\n    keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${uint8ArrayToString(e.privateKey, 'hex')}`)\n  } else {\n    keyLogger('Missing local ephemeral keys.')\n  }\n}\n\nexport function logRemoteStaticKey (rs: Uint8Array | Uint8ArrayList | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (rs) {\n    keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${uint8ArrayToString(rs.subarray(), 'hex')}`)\n  } else {\n    keyLogger('Missing remote static public key.')\n  }\n}\n\nexport function logRemoteEphemeralKey (re: Uint8Array | Uint8ArrayList | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (re) {\n    keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${uint8ArrayToString(re.subarray(), 'hex')}`)\n  } else {\n    keyLogger('Missing remote ephemeral keys.')\n  }\n}\n\nexport function logCipherState (cs1: CipherState, cs2: CipherState, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  keyLogger(`CIPHER_STATE_1 ${cs1.n.getUint64()} ${cs1.k && uint8ArrayToString(cs1.k, 'hex')}`)\n  keyLogger(`CIPHER_STATE_2 ${cs2.n.getUint64()} ${cs2.k && uint8ArrayToString(cs2.k, 'hex')}`)\n}\n", "export class UnexpectedPeerError extends Error {\n  public code: string\n\n  constructor (message = 'Unexpected Peer') {\n    super(message)\n    this.code = UnexpectedPeerError.code\n  }\n\n  static readonly code = 'ERR_UNEXPECTED_PEER'\n}\n\nexport class InvalidCryptoExchangeError extends Error {\n  public code: string\n\n  constructor (message = 'Invalid crypto exchange') {\n    super(message)\n    this.code = InvalidCryptoExchangeError.code\n  }\n\n  static readonly code = 'ERR_INVALID_CRYPTO_EXCHANGE'\n}\n", "import { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\n\nexport const MIN_NONCE = 0\n// For performance reasons, the nonce is represented as a JS `number`\n// Although JS `number` can safely represent integers up to 2 ** 53 - 1, we choose to only use\n// 4 bytes to store the data for performance reason.\n// This is a slight deviation from the noise spec, which describes the max nonce as 2 ** 64 - 2\n// The effect is that this implementation will need a new handshake to be performed after fewer messages are exchanged than other implementations with full uint64 nonces.\n// this MAX_NONCE is still a large number of messages, so the practical effect of this is negligible.\nexport const MAX_NONCE = 0xffffffff\n\nconst ERR_MAX_NONCE = 'Cipherstate has reached maximum n, a new handshake must be performed'\n\n/**\n * The nonce is an uint that's increased over time.\n * Maintaining different representations help improve performance.\n */\nexport class Nonce {\n  private n: number\n  private readonly bytes: Uint8Array\n  private readonly view: DataView\n\n  constructor (n = MIN_NONCE) {\n    this.n = n\n    this.bytes = uint8ArrayAlloc(12)\n    this.view = new DataView(this.bytes.buffer, this.bytes.byteOffset, this.bytes.byteLength)\n    this.view.setUint32(4, n, true)\n  }\n\n  increment (): void {\n    this.n++\n    // Even though we're treating the nonce as 8 bytes, RFC7539 specifies 12 bytes for a nonce.\n    this.view.setUint32(4, this.n, true)\n  }\n\n  getBytes (): Uint8Array {\n    return this.bytes\n  }\n\n  getUint64 (): number {\n    return this.n\n  }\n\n  assertValue (): void {\n    if (this.n > MAX_NONCE) {\n      throw new Error(ERR_MAX_NONCE)\n    }\n  }\n}\n", "import { Uint8ArrayList } from 'uint8arraylist'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport { InvalidCryptoExchangeError } from './errors.js'\nimport { Nonce } from './nonce.js'\nimport type { ICipherState, ISymmetricState, IHandshakeState, KeyPair, ICrypto } from './types.js'\n\n// Code in this file is a direct translation of a subset of the noise protocol https://noiseprotocol.org/noise.html,\n// agnostic to libp2p's usage of noise\n\nexport const ZEROLEN = uint8ArrayAlloc(0)\n\ninterface ICipherStateWithKey extends ICipherState {\n  k: Uint8Array\n}\n\nexport class CipherState implements ICipherState {\n  public k?: Uint8Array\n  public n: Nonce\n  private readonly crypto: ICrypto\n\n  constructor (crypto: ICrypto, k: Uint8Array | undefined = undefined, n = 0) {\n    this.crypto = crypto\n    this.k = k\n    this.n = new Nonce(n)\n  }\n\n  public hasKey (): this is ICipherStateWithKey {\n    return Boolean(this.k)\n  }\n\n  public encryptWithAd (ad: Uint8Array, plaintext: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    if (!this.hasKey()) {\n      return plaintext\n    }\n\n    this.n.assertValue()\n    const e = this.crypto.encrypt(plaintext, this.n.getBytes(), ad, this.k)\n    this.n.increment()\n\n    return e\n  }\n\n  public decryptWithAd (ad: Uint8Array, ciphertext: Uint8Array | Uint8ArrayList, dst?: Uint8Array): Uint8Array | Uint8ArrayList {\n    if (!this.hasKey()) {\n      return ciphertext\n    }\n\n    this.n.assertValue()\n    const plaintext = this.crypto.decrypt(ciphertext, this.n.getBytes(), ad, this.k, dst)\n    this.n.increment()\n\n    return plaintext\n  }\n}\n\nexport class SymmetricState implements ISymmetricState {\n  public cs: CipherState\n  public ck: Uint8Array\n  public h: Uint8Array\n  private readonly crypto: ICrypto\n\n  constructor (crypto: ICrypto, protocolName: string) {\n    this.crypto = crypto\n\n    const protocolNameBytes = uint8ArrayFromString(protocolName, 'utf-8')\n    this.h = hashProtocolName(crypto, protocolNameBytes)\n\n    this.ck = this.h\n    this.cs = new CipherState(crypto)\n  }\n\n  public mixKey (ikm: Uint8Array): void {\n    const [ck, tempK] = this.crypto.hkdf(this.ck, ikm)\n    this.ck = ck\n    this.cs = new CipherState(this.crypto, tempK)\n  }\n\n  public mixHash (data: Uint8Array | Uint8ArrayList): void {\n    this.h = this.crypto.hash(new Uint8ArrayList(this.h, data))\n  }\n\n  public encryptAndHash (plaintext: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const ciphertext = this.cs.encryptWithAd(this.h, plaintext)\n    this.mixHash(ciphertext)\n    return ciphertext\n  }\n\n  public decryptAndHash (ciphertext: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const plaintext = this.cs.decryptWithAd(this.h, ciphertext)\n    this.mixHash(ciphertext)\n    return plaintext\n  }\n\n  public split (): [CipherState, CipherState] {\n    const [tempK1, tempK2] = this.crypto.hkdf(this.ck, ZEROLEN)\n    return [new CipherState(this.crypto, tempK1), new CipherState(this.crypto, tempK2)]\n  }\n}\n\n// const MESSAGE_PATTERNS = ['e', 's', 'ee', 'es', 'se', 'ss'] as const\n// type MessagePattern = Array<typeof MESSAGE_PATTERNS[number]>\n\nexport interface HandshakeStateInit {\n  crypto: ICrypto\n  protocolName: string\n  initiator: boolean\n  prologue: Uint8Array\n  s?: KeyPair\n  e?: KeyPair\n  rs?: Uint8Array | Uint8ArrayList\n  re?: Uint8Array | Uint8ArrayList\n}\n\nexport abstract class AbstractHandshakeState implements IHandshakeState {\n  public ss: SymmetricState\n  public s?: KeyPair\n  public e?: KeyPair\n  public rs?: Uint8Array | Uint8ArrayList\n  public re?: Uint8Array | Uint8ArrayList\n  public initiator: boolean\n  protected readonly crypto: ICrypto\n\n  constructor (init: HandshakeStateInit) {\n    const { crypto, protocolName, prologue, initiator, s, e, rs, re } = init\n    this.crypto = crypto\n    this.ss = new SymmetricState(crypto, protocolName)\n    this.ss.mixHash(prologue)\n    this.initiator = initiator\n    this.s = s\n    this.e = e\n    this.rs = rs\n    this.re = re\n  }\n\n  protected writeE (): Uint8Array {\n    if (this.e) {\n      throw new Error('ephemeral keypair is already set')\n    }\n    const e = this.crypto.generateKeypair()\n    this.ss.mixHash(e.publicKey)\n    this.e = e\n    return e.publicKey\n  }\n\n  protected writeS (): Uint8Array | Uint8ArrayList {\n    if (!this.s) {\n      throw new Error('static keypair is not set')\n    }\n    return this.ss.encryptAndHash(this.s.publicKey)\n  }\n\n  protected writeEE (): void {\n    if (!this.e) {\n      throw new Error('ephemeral keypair is not set')\n    }\n    if (!this.re) {\n      throw new Error('remote ephemeral public key is not set')\n    }\n    this.ss.mixKey(this.crypto.dh(this.e, this.re))\n  }\n\n  protected writeES (): void {\n    if (this.initiator) {\n      if (!this.e) {\n        throw new Error('ephemeral keypair is not set')\n      }\n      if (!this.rs) {\n        throw new Error('remote static public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.e, this.rs))\n    } else {\n      if (!this.s) {\n        throw new Error('static keypair is not set')\n      }\n      if (!this.re) {\n        throw new Error('remote ephemeral public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.s, this.re))\n    }\n  }\n\n  protected writeSE (): void {\n    if (this.initiator) {\n      if (!this.s) {\n        throw new Error('static keypair is not set')\n      }\n      if (!this.re) {\n        throw new Error('remote ephemeral public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.s, this.re))\n    } else {\n      if (!this.e) {\n        throw new Error('ephemeral keypair is not set')\n      }\n      if (!this.rs) {\n        throw new Error('remote static public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.e, this.rs))\n    }\n  }\n\n  protected readE (message: Uint8ArrayList, offset = 0): void {\n    if (this.re) {\n      throw new Error('remote ephemeral public key is already set')\n    }\n    if (message.byteLength < offset + 32) {\n      throw new Error('message is not long enough')\n    }\n    this.re = message.sublist(offset, offset + 32)\n    this.ss.mixHash(this.re)\n  }\n\n  protected readS (message: Uint8ArrayList, offset = 0): number {\n    if (this.rs) {\n      throw new Error('remote static public key is already set')\n    }\n    const cipherLength = 32 + (this.ss.cs.hasKey() ? 16 : 0)\n    if (message.byteLength < offset + cipherLength) {\n      throw new Error('message is not long enough')\n    }\n    const temp = message.sublist(offset, offset + cipherLength)\n    this.rs = this.ss.decryptAndHash(temp)\n    return cipherLength\n  }\n\n  protected readEE (): void {\n    this.writeEE()\n  }\n\n  protected readES (): void {\n    this.writeES()\n  }\n\n  protected readSE (): void {\n    this.writeSE()\n  }\n}\n\n/**\n * A IHandshakeState that's optimized for the XX pattern\n */\nexport class XXHandshakeState extends AbstractHandshakeState {\n  // e\n  writeMessageA (payload: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    return new Uint8ArrayList(this.writeE(), this.ss.encryptAndHash(payload))\n  }\n\n  // e, ee, s, es\n  writeMessageB (payload: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const e = this.writeE()\n    this.writeEE()\n    const encS = this.writeS()\n    this.writeES()\n\n    return new Uint8ArrayList(e, encS, this.ss.encryptAndHash(payload))\n  }\n\n  // s, se\n  writeMessageC (payload: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const encS = this.writeS()\n    this.writeSE()\n\n    return new Uint8ArrayList(encS, this.ss.encryptAndHash(payload))\n  }\n\n  // e\n  readMessageA (message: Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    try {\n      this.readE(message)\n\n      return this.ss.decryptAndHash(message.sublist(32))\n    } catch (e) {\n      throw new InvalidCryptoExchangeError(`handshake stage 0 validation fail: ${(e as Error).message}`)\n    }\n  }\n\n  // e, ee, s, es\n  readMessageB (message: Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    try {\n      this.readE(message)\n      this.readEE()\n      const consumed = this.readS(message, 32)\n      this.readES()\n\n      return this.ss.decryptAndHash(message.sublist(32 + consumed))\n    } catch (e) {\n      throw new InvalidCryptoExchangeError(`handshake stage 1 validation fail: ${(e as Error).message}`)\n    }\n  }\n\n  // s, se\n  readMessageC (message: Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    try {\n      const consumed = this.readS(message)\n      this.readSE()\n\n      return this.ss.decryptAndHash(message.sublist(consumed))\n    } catch (e) {\n      throw new InvalidCryptoExchangeError(`handshake stage 2 validation fail: ${(e as Error).message}`)\n    }\n  }\n}\n\nfunction hashProtocolName (crypto: ICrypto, protocolName: Uint8Array): Uint8Array {\n  if (protocolName.length <= 32) {\n    const h = uint8ArrayAlloc(32)\n    h.set(protocolName)\n    return h\n  } else {\n    return crypto.hash(protocolName)\n  }\n}\n", "/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nimport { type Codec, decodeMessage, encodeMessage, message } from 'protons-runtime'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface NoiseExtensions {\n  webtransportCerthashes: Uint8Array[]\n}\n\nexport namespace NoiseExtensions {\n  let _codec: Codec<NoiseExtensions>\n\n  export const codec = (): Codec<NoiseExtensions> => {\n    if (_codec == null) {\n      _codec = message<NoiseExtensions>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.webtransportCerthashes != null) {\n          for (const value of obj.webtransportCerthashes) {\n            w.uint32(10)\n            w.bytes(value)\n          }\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length) => {\n        const obj: any = {\n          webtransportCerthashes: []\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.webtransportCerthashes.push(reader.bytes())\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<NoiseExtensions>): Uint8Array => {\n    return encodeMessage(obj, NoiseExtensions.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList): NoiseExtensions => {\n    return decodeMessage(buf, NoiseExtensions.codec())\n  }\n}\n\nexport interface NoiseHandshakePayload {\n  identityKey: Uint8Array\n  identitySig: Uint8Array\n  extensions?: NoiseExtensions\n}\n\nexport namespace NoiseHandshakePayload {\n  let _codec: Codec<NoiseHandshakePayload>\n\n  export const codec = (): Codec<NoiseHandshakePayload> => {\n    if (_codec == null) {\n      _codec = message<NoiseHandshakePayload>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.identityKey != null && obj.identityKey.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.identityKey)\n        }\n\n        if ((obj.identitySig != null && obj.identitySig.byteLength > 0)) {\n          w.uint32(18)\n          w.bytes(obj.identitySig)\n        }\n\n        if (obj.extensions != null) {\n          w.uint32(34)\n          NoiseExtensions.codec().encode(obj.extensions, w)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length) => {\n        const obj: any = {\n          identityKey: uint8ArrayAlloc(0),\n          identitySig: uint8ArrayAlloc(0)\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.identityKey = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.identitySig = reader.bytes()\n              break\n            }\n            case 4: {\n              obj.extensions = NoiseExtensions.codec().decode(reader, reader.uint32())\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<NoiseHandshakePayload>): Uint8Array => {\n    return encodeMessage(obj, NoiseHandshakePayload.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList): NoiseHandshakePayload => {\n    return decodeMessage(buf, NoiseHandshakePayload.codec())\n  }\n}\n", "import { unmarshalPublicKey } from '@libp2p/crypto/keys'\nimport { type Uint8ArrayList } from 'uint8arraylist'\nimport { equals, toString } from 'uint8arrays'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { UnexpectedPeerError } from './errors.js'\nimport { type NoiseExtensions, NoiseHandshakePayload } from './proto/payload.js'\nimport type { PrivateKey } from '@libp2p/interface'\n\nexport async function createHandshakePayload (\n  privateKey: PrivateKey,\n  staticPublicKey: Uint8Array | Uint8ArrayList,\n  extensions?: NoiseExtensions\n): Promise<Uint8Array | Uint8ArrayList> {\n  const identitySig = await privateKey.sign(getSignaturePayload(staticPublicKey))\n\n  return NoiseHandshakePayload.encode({\n    identityKey: privateKey.public.bytes,\n    identitySig,\n    extensions\n  })\n}\n\nexport async function decodeHandshakePayload (\n  payloadBytes: Uint8Array | Uint8ArrayList,\n  remoteStaticKey?: Uint8Array | Uint8ArrayList,\n  remoteIdentityKey?: Uint8Array | Uint8ArrayList\n): Promise<NoiseHandshakePayload> {\n  try {\n    const payload = NoiseHandshakePayload.decode(payloadBytes)\n    if (remoteIdentityKey) {\n      const remoteIdentityKeyBytes = remoteIdentityKey.subarray()\n      if (!equals(remoteIdentityKeyBytes, payload.identityKey)) {\n        throw new Error(`Payload identity key ${toString(payload.identityKey, 'hex')} does not match expected remote identity key ${toString(remoteIdentityKeyBytes, 'hex')}`)\n      }\n    }\n\n    if (!remoteStaticKey) {\n      throw new Error('Remote static does not exist')\n    }\n\n    const signaturePayload = getSignaturePayload(remoteStaticKey)\n    const publicKey = unmarshalPublicKey(payload.identityKey)\n\n    if (!(await publicKey.verify(signaturePayload, payload.identitySig))) {\n      throw new Error('Invalid payload signature')\n    }\n\n    return payload\n  } catch (e) {\n    throw new UnexpectedPeerError((e as Error).message)\n  }\n}\n\nexport function getSignaturePayload (publicKey: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n  const prefix = uint8ArrayFromString('noise-libp2p-static-key:')\n\n  if (publicKey instanceof Uint8Array) {\n    return uint8ArrayConcat([prefix, publicKey], prefix.length + publicKey.length)\n  }\n\n  publicKey.prepend(prefix)\n\n  return publicKey\n}\n", "import {\n  logLocalStaticKeys,\n  logLocalEphemeralKeys,\n  logRemoteEphemeralKey,\n  logRemoteStaticKey,\n  logCipherState\n} from './logger.js'\nimport { ZEROLEN, XXHandshakeState } from './protocol.js'\nimport { createHandshakePayload, decodeHandshakePayload } from './utils.js'\nimport type { HandshakeResult, HandshakeParams } from './types.js'\n\nexport async function performHandshakeInitiator (init: HandshakeParams): Promise<HandshakeResult> {\n  const { log, connection, crypto, privateKey, prologue, s, remoteIdentityKey, extensions } = init\n\n  const payload = await createHandshakePayload(privateKey, s.publicKey, extensions)\n  const xx = new XXHandshakeState({\n    crypto,\n    protocolName: 'Noise_XX_25519_ChaChaPoly_SHA256',\n    initiator: true,\n    prologue,\n    s\n  })\n\n  logLocalStaticKeys(xx.s, log)\n  log.trace('Stage 0 - Initiator starting to send first message.')\n  await connection.write(xx.writeMessageA(ZEROLEN))\n  log.trace('Stage 0 - Initiator finished sending first message.')\n  logLocalEphemeralKeys(xx.e, log)\n\n  log.trace('Stage 1 - Initiator waiting to receive first message from responder...')\n  const plaintext = xx.readMessageB(await connection.read())\n  log.trace('Stage 1 - Initiator received the message.')\n  logRemoteEphemeralKey(xx.re, log)\n  logRemoteStaticKey(xx.rs, log)\n\n  log.trace(\"Initiator going to check remote's signature...\")\n  const receivedPayload = await decodeHandshakePayload(plaintext, xx.rs, remoteIdentityKey)\n  log.trace('All good with the signature!')\n\n  log.trace('Stage 2 - Initiator sending third handshake message.')\n  await connection.write(xx.writeMessageC(payload))\n  log.trace('Stage 2 - Initiator sent message with signed payload.')\n\n  const [cs1, cs2] = xx.ss.split()\n  logCipherState(cs1, cs2, log)\n\n  return {\n    payload: receivedPayload,\n    encrypt: (plaintext) => cs1.encryptWithAd(ZEROLEN, plaintext),\n    decrypt: (ciphertext, dst) => cs2.decryptWithAd(ZEROLEN, ciphertext, dst)\n  }\n}\n\nexport async function performHandshakeResponder (init: HandshakeParams): Promise<HandshakeResult> {\n  const { log, connection, crypto, privateKey, prologue, s, remoteIdentityKey, extensions } = init\n\n  const payload = await createHandshakePayload(privateKey, s.publicKey, extensions)\n  const xx = new XXHandshakeState({\n    crypto,\n    protocolName: 'Noise_XX_25519_ChaChaPoly_SHA256',\n    initiator: false,\n    prologue,\n    s\n  })\n\n  logLocalStaticKeys(xx.s, log)\n  log.trace('Stage 0 - Responder waiting to receive first message.')\n  xx.readMessageA(await connection.read())\n  log.trace('Stage 0 - Responder received first message.')\n  logRemoteEphemeralKey(xx.re, log)\n\n  log.trace('Stage 1 - Responder sending out first message with signed payload and static key.')\n  await connection.write(xx.writeMessageB(payload))\n  log.trace('Stage 1 - Responder sent the second handshake message with signed payload.')\n  logLocalEphemeralKeys(xx.e, log)\n\n  log.trace('Stage 2 - Responder waiting for third handshake message...')\n  const plaintext = xx.readMessageC(await connection.read())\n  log.trace('Stage 2 - Responder received the message, finished handshake.')\n  const receivedPayload = await decodeHandshakePayload(plaintext, xx.rs, remoteIdentityKey)\n\n  const [cs1, cs2] = xx.ss.split()\n  logCipherState(cs1, cs2, log)\n\n  return {\n    payload: receivedPayload,\n    encrypt: (plaintext) => cs2.encryptWithAd(ZEROLEN, plaintext),\n    decrypt: (ciphertext, dst) => cs1.decryptWithAd(ZEROLEN, ciphertext, dst)\n  }\n}\n", "import { Uint8ArrayList } from 'uint8arraylist'\nimport { NOISE_MSG_MAX_LENGTH_BYTES, NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG } from './constants.js'\nimport { uint16BEEncode } from './encoder.js'\nimport type { MetricsRegistry } from './metrics.js'\nimport type { HandshakeResult } from './types.js'\nimport type { Transform } from 'it-stream-types'\n\nconst CHACHA_TAG_LENGTH = 16\n\n// Returns generator that encrypts payload from the user\nexport function encryptStream (handshake: HandshakeResult, metrics?: MetricsRegistry): Transform<AsyncGenerator<Uint8Array | Uint8ArrayList>> {\n  return async function * (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG) {\n        let end = i + NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG\n        if (end > chunk.length) {\n          end = chunk.length\n        }\n\n        let data: Uint8Array | Uint8ArrayList\n\n        if (chunk instanceof Uint8Array) {\n          data = handshake.encrypt(chunk.subarray(i, end))\n        } else {\n          data = handshake.encrypt(chunk.sublist(i, end))\n        }\n\n        metrics?.encryptedPackets.increment()\n\n        yield new Uint8ArrayList(uint16BEEncode(data.byteLength), data)\n      }\n    }\n  }\n}\n\n// Decrypt received payload to the user\nexport function decryptStream (handshake: HandshakeResult, metrics?: MetricsRegistry): Transform<AsyncGenerator<Uint8ArrayList>, AsyncGenerator<Uint8Array | Uint8ArrayList>> {\n  return async function * (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES) {\n        let end = i + NOISE_MSG_MAX_LENGTH_BYTES\n        if (end > chunk.length) {\n          end = chunk.length\n        }\n\n        if (end - CHACHA_TAG_LENGTH < i) {\n          throw new Error('Invalid chunk')\n        }\n\n        const encrypted = chunk.sublist(i, end)\n        // memory allocation is not cheap so reuse the encrypted Uint8Array\n        // see https://github.com/ChainSafe/js-libp2p-noise/pull/242#issue-1422126164\n        // this is ok because chacha20 reads bytes one by one and don't reread after that\n        // it's also tested in https://github.com/ChainSafe/as-chacha20poly1305/pull/1/files#diff-25252846b58979dcaf4e41d47b3eadd7e4f335e7fb98da6c049b1f9cd011f381R48\n        const dst = chunk.subarray(i, end - CHACHA_TAG_LENGTH)\n        try {\n          const plaintext = handshake.decrypt(encrypted, dst)\n          metrics?.decryptedPackets.increment()\n          yield plaintext\n        } catch (e) {\n          metrics?.decryptErrors.increment()\n          throw e\n        }\n      }\n    }\n  }\n}\n", "import { unmarshalPrivateKey } from '@libp2p/crypto/keys'\nimport { type MultiaddrConnection, type SecuredConnection, type PeerId, CodeError, type PrivateKey } from '@libp2p/interface'\nimport { peerIdFromKeys } from '@libp2p/peer-id'\nimport { decode } from 'it-length-prefixed'\nimport { lpStream, type LengthPrefixedStream } from 'it-length-prefixed-stream'\nimport { duplexPair } from 'it-pair/duplex'\nimport { pipe } from 'it-pipe'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport { NOISE_MSG_MAX_LENGTH_BYTES } from './constants.js'\nimport { defaultCrypto } from './crypto/index.js'\nimport { wrapCrypto, type ICryptoInterface } from './crypto.js'\nimport { uint16BEDecode, uint16BEEncode } from './encoder.js'\nimport { type MetricsRegistry, registerMetrics } from './metrics.js'\nimport { performHandshakeInitiator, performHandshakeResponder } from './performHandshake.js'\nimport { decryptStream, encryptStream } from './streaming.js'\nimport type { NoiseComponents } from './index.js'\nimport type { NoiseExtensions } from './proto/payload.js'\nimport type { HandshakeResult, ICrypto, INoiseConnection, KeyPair } from './types.js'\nimport type { Duplex } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface NoiseInit {\n  /**\n   * x25519 private key, reuse for faster handshakes\n   */\n  staticNoiseKey?: Uint8Array\n  extensions?: NoiseExtensions\n  crypto?: ICryptoInterface\n  prologueBytes?: Uint8Array\n}\n\nexport class Noise implements INoiseConnection {\n  public protocol = '/noise'\n  public crypto: ICrypto\n\n  private readonly prologue: Uint8Array\n  private readonly staticKey: KeyPair\n  private readonly extensions?: NoiseExtensions\n  private readonly metrics?: MetricsRegistry\n  private readonly components: NoiseComponents\n\n  constructor (components: NoiseComponents, init: NoiseInit = {}) {\n    const { staticNoiseKey, extensions, crypto, prologueBytes } = init\n    const { metrics } = components\n\n    this.components = components\n    const _crypto = crypto ?? defaultCrypto\n    this.crypto = wrapCrypto(_crypto)\n    this.extensions = extensions\n    this.metrics = metrics ? registerMetrics(metrics) : undefined\n\n    if (staticNoiseKey) {\n      // accepts x25519 private key of length 32\n      this.staticKey = _crypto.generateX25519KeyPairFromSeed(staticNoiseKey)\n    } else {\n      this.staticKey = _crypto.generateX25519KeyPair()\n    }\n    this.prologue = prologueBytes ?? uint8ArrayAlloc(0)\n  }\n\n  /**\n   * Encrypt outgoing data to the remote party (handshake as initiator)\n   *\n   * @param localPeer - PeerId of the receiving peer\n   * @param connection - streaming iterable duplex that will be encrypted\n   * @param remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer.\n   */\n  public async secureOutbound <Stream extends Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>> = MultiaddrConnection> (localPeer: PeerId, connection: Stream, remotePeer?: PeerId): Promise<SecuredConnection<Stream, NoiseExtensions>> {\n    const wrappedConnection = lpStream(\n      connection,\n      {\n        lengthEncoder: uint16BEEncode,\n        lengthDecoder: uint16BEDecode,\n        maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n      }\n    )\n\n    if (!localPeer.privateKey) {\n      throw new CodeError('local peerId does not contain private key', 'ERR_NO_PRIVATE_KEY')\n    }\n    const privateKey = await unmarshalPrivateKey(localPeer.privateKey)\n\n    const remoteIdentityKey = remotePeer?.publicKey\n\n    const handshake = await this.performHandshakeInitiator(\n      wrappedConnection,\n      privateKey,\n      remoteIdentityKey\n    )\n    const conn = await this.createSecureConnection(wrappedConnection, handshake)\n\n    connection.source = conn.source\n    connection.sink = conn.sink\n\n    return {\n      conn: connection,\n      remoteExtensions: handshake.payload.extensions,\n      remotePeer: await peerIdFromKeys(handshake.payload.identityKey)\n    }\n  }\n\n  /**\n   * Decrypt incoming data (handshake as responder).\n   *\n   * @param localPeer - PeerId of the receiving peer.\n   * @param connection - streaming iterable duplex that will be encrypted.\n   * @param remotePeer - optional PeerId of the initiating peer, if known. This may only exist during transport upgrades.\n   */\n  public async secureInbound <Stream extends Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>> = MultiaddrConnection> (localPeer: PeerId, connection: Stream, remotePeer?: PeerId): Promise<SecuredConnection<Stream, NoiseExtensions>> {\n    const wrappedConnection = lpStream(\n      connection,\n      {\n        lengthEncoder: uint16BEEncode,\n        lengthDecoder: uint16BEDecode,\n        maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n      }\n    )\n\n    if (!localPeer.privateKey) {\n      throw new CodeError('local peerId does not contain private key', 'ERR_NO_PRIVATE_KEY')\n    }\n    const privateKey = await unmarshalPrivateKey(localPeer.privateKey)\n\n    const remoteIdentityKey = remotePeer?.publicKey\n\n    const handshake = await this.performHandshakeResponder(\n      wrappedConnection,\n      privateKey,\n      remoteIdentityKey\n    )\n    const conn = await this.createSecureConnection(wrappedConnection, handshake)\n\n    connection.source = conn.source\n    connection.sink = conn.sink\n\n    return {\n      conn: connection,\n      remoteExtensions: handshake.payload.extensions,\n      remotePeer: await peerIdFromKeys(handshake.payload.identityKey)\n    }\n  }\n\n  /**\n   * Perform XX handshake as initiator.\n   */\n  private async performHandshakeInitiator (\n    connection: LengthPrefixedStream,\n    // TODO: pass private key in noise constructor via Components\n    privateKey: PrivateKey,\n    remoteIdentityKey?: Uint8Array | Uint8ArrayList\n  ): Promise<HandshakeResult> {\n    let result: HandshakeResult\n    try {\n      result = await performHandshakeInitiator({\n        connection,\n        privateKey,\n        remoteIdentityKey,\n        log: this.components.logger.forComponent('libp2p:noise:xxhandshake'),\n        crypto: this.crypto,\n        prologue: this.prologue,\n        s: this.staticKey,\n        extensions: this.extensions\n      })\n      this.metrics?.xxHandshakeSuccesses.increment()\n    } catch (e: unknown) {\n      this.metrics?.xxHandshakeErrors.increment()\n      throw e\n    }\n\n    return result\n  }\n\n  /**\n   * Perform XX handshake as responder.\n   */\n  private async performHandshakeResponder (\n    connection: LengthPrefixedStream,\n    // TODO: pass private key in noise constructor via Components\n    privateKey: PrivateKey,\n    remoteIdentityKey?: Uint8Array | Uint8ArrayList\n  ): Promise<HandshakeResult> {\n    let result: HandshakeResult\n    try {\n      result = await performHandshakeResponder({\n        connection,\n        privateKey,\n        remoteIdentityKey,\n        log: this.components.logger.forComponent('libp2p:noise:xxhandshake'),\n        crypto: this.crypto,\n        prologue: this.prologue,\n        s: this.staticKey,\n        extensions: this.extensions\n      })\n      this.metrics?.xxHandshakeSuccesses.increment()\n    } catch (e: unknown) {\n      this.metrics?.xxHandshakeErrors.increment()\n      throw e\n    }\n\n    return result\n  }\n\n  private async createSecureConnection (\n    connection: LengthPrefixedStream<Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>>>,\n    handshake: HandshakeResult\n  ): Promise<Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>>> {\n    // Create encryption box/unbox wrapper\n    const [secure, user] = duplexPair<Uint8Array | Uint8ArrayList>()\n    const network = connection.unwrap()\n\n    await pipe(\n      secure, // write to wrapper\n      encryptStream(handshake, this.metrics), // encrypt data + prefix with message length\n      network, // send to the remote peer\n      (source) => decode(source, { lengthDecoder: uint16BEDecode }), // read message length prefix\n      decryptStream(handshake, this.metrics), // decrypt the incoming data\n      secure // pipe to the wrapper\n    )\n\n    return user\n  }\n}\n", "import { Noise } from './noise.js'\nimport type { NoiseInit } from './noise.js'\nimport type { NoiseExtensions } from './proto/payload.js'\nimport type { ComponentLogger, ConnectionEncrypter, Metrics } from '@libp2p/interface'\nexport type { ICryptoInterface } from './crypto.js'\nexport { pureJsCrypto } from './crypto/js.js'\n\nexport interface NoiseComponents {\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\nexport function noise (init: NoiseInit = {}): (components: NoiseComponents) => ConnectionEncrypter<NoiseExtensions> {\n  return (components: NoiseComponents) => new Noise(components, init)\n}\n", "import { noise } from '@chainsafe/libp2p-noise'\nimport { type CreateListenerOptions, transportSymbol, type Transport, type Listener, type ComponentLogger, type Logger, type Connection, type CounterGroup, type Metrics, type PeerId } from '@libp2p/interface'\nimport * as p from '@libp2p/peer-id'\nimport { protocols } from '@multiformats/multiaddr'\nimport { WebRTCDirect } from '@multiformats/multiaddr-matcher'\nimport * as multihashes from 'multihashes'\nimport { concat } from 'uint8arrays/concat'\nimport { fromString as uint8arrayFromString } from 'uint8arrays/from-string'\nimport { dataChannelError, inappropriateMultiaddr, unimplemented, invalidArgument } from '../error.js'\nimport { WebRTCMultiaddrConnection } from '../maconn.js'\nimport { DataChannelMuxerFactory } from '../muxer.js'\nimport { createStream } from '../stream.js'\nimport { isFirefox } from '../util.js'\nimport { RTCPeerConnection } from '../webrtc/index.js'\nimport * as sdp from './sdp.js'\nimport { genUfrag } from './util.js'\nimport type { WebRTCDialOptions } from './options.js'\nimport type { DataChannelOptions } from '../index.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * The time to wait, in milliseconds, for the data channel handshake to complete\n */\nconst HANDSHAKE_TIMEOUT_MS = 10_000\n\n/**\n * Created by converting the hexadecimal protocol code to an integer.\n *\n * {@link https://github.com/multiformats/multiaddr/blob/master/protocols.csv}\n */\nexport const WEBRTC_CODE: number = protocols('webrtc-direct').code\n\n/**\n * Created by converting the hexadecimal protocol code to an integer.\n *\n * {@link https://github.com/multiformats/multiaddr/blob/master/protocols.csv}\n */\nexport const CERTHASH_CODE: number = protocols('certhash').code\n\n/**\n * The peer for this transport\n */\nexport interface WebRTCDirectTransportComponents {\n  peerId: PeerId\n  metrics?: Metrics\n  logger: ComponentLogger\n}\n\nexport interface WebRTCMetrics {\n  dialerEvents: CounterGroup\n}\n\nexport interface WebRTCTransportDirectInit {\n  dataChannel?: DataChannelOptions\n}\n\nexport class WebRTCDirectTransport implements Transport {\n  private readonly log: Logger\n  private readonly metrics?: WebRTCMetrics\n  private readonly components: WebRTCDirectTransportComponents\n  private readonly init: WebRTCTransportDirectInit\n  constructor (components: WebRTCDirectTransportComponents, init: WebRTCTransportDirectInit = {}) {\n    this.log = components.logger.forComponent('libp2p:webrtc-direct')\n    this.components = components\n    this.init = init\n    if (components.metrics != null) {\n      this.metrics = {\n        dialerEvents: components.metrics.registerCounterGroup('libp2p_webrtc-direct_dialer_events_total', {\n          label: 'event',\n          help: 'Total count of WebRTC-direct dial events by type'\n        })\n      }\n    }\n  }\n\n  /**\n   * Dial a given multiaddr\n   */\n  async dial (ma: Multiaddr, options: WebRTCDialOptions): Promise<Connection> {\n    const rawConn = await this._connect(ma, options)\n    this.log('dialing address: %a', ma)\n    return rawConn\n  }\n\n  /**\n   * Create transport listeners no supported by browsers\n   */\n  createListener (options: CreateListenerOptions): Listener {\n    throw unimplemented('WebRTCTransport.createListener')\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can listen on\n   */\n  listenFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    return multiaddrs.filter(WebRTCDirect.exactMatch)\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can dial\n   */\n  dialFilter (multiaddrs: Multiaddr[]): Multiaddr[] {\n    return this.listenFilter(multiaddrs)\n  }\n\n  /**\n   * Implement toString() for WebRTCTransport\n   */\n  readonly [Symbol.toStringTag] = '@libp2p/webrtc-direct'\n\n  /**\n   * Symbol.for('@libp2p/transport')\n   */\n  readonly [transportSymbol] = true\n\n  /**\n   * Connect to a peer using a multiaddr\n   */\n  async _connect (ma: Multiaddr, options: WebRTCDialOptions): Promise<Connection> {\n    const controller = new AbortController()\n    const signal = controller.signal\n\n    const remotePeerString = ma.getPeerId()\n    if (remotePeerString === null) {\n      throw inappropriateMultiaddr(\"we need to have the remote's PeerId\")\n    }\n    const theirPeerId = p.peerIdFromString(remotePeerString)\n\n    const remoteCerthash = sdp.decodeCerthash(sdp.certhash(ma))\n\n    // ECDSA is preferred over RSA here. From our testing we find that P-256 elliptic\n    // curve is supported by Pion, webrtc-rs, as well as Chromium (P-228 and P-384\n    // was not supported in Chromium). We use the same hash function as found in the\n    // multiaddr if it is supported.\n    const certificate = await RTCPeerConnection.generateCertificate({\n      name: 'ECDSA',\n      namedCurve: 'P-256',\n      hash: sdp.toSupportedHashFunction(remoteCerthash.name)\n    } as any)\n\n    const peerConnection = new RTCPeerConnection({ certificates: [certificate] })\n\n    try {\n      // create data channel for running the noise handshake. Once the data channel is opened,\n      // the remote will initiate the noise handshake. This is used to confirm the identity of\n      // the peer.\n      const dataChannelOpenPromise = new Promise<RTCDataChannel>((resolve, reject) => {\n        const handshakeDataChannel = peerConnection.createDataChannel('', { negotiated: true, id: 0 })\n        const handshakeTimeout = setTimeout(() => {\n          const error = `Data channel was never opened: state: ${handshakeDataChannel.readyState}`\n          this.log.error(error)\n          this.metrics?.dialerEvents.increment({ open_error: true })\n          reject(dataChannelError('data', error))\n        }, HANDSHAKE_TIMEOUT_MS)\n\n        handshakeDataChannel.onopen = (_) => {\n          clearTimeout(handshakeTimeout)\n          resolve(handshakeDataChannel)\n        }\n\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/error_event\n        handshakeDataChannel.onerror = (event: Event) => {\n          clearTimeout(handshakeTimeout)\n          const errorTarget = event.target?.toString() ?? 'not specified'\n          const error = `Error opening a data channel for handshaking: ${errorTarget}`\n          this.log.error(error)\n          // NOTE: We use unknown error here but this could potentially be considered a reset by some standards.\n          this.metrics?.dialerEvents.increment({ unknown_error: true })\n          reject(dataChannelError('data', error))\n        }\n      })\n\n      const ufrag = 'libp2p+webrtc+v1/' + genUfrag(32)\n\n      // Create offer and munge sdp with ufrag == pwd. This allows the remote to\n      // respond to STUN messages without performing an actual SDP exchange.\n      // This is because it can infer the passwd field by reading the USERNAME\n      // attribute of the STUN message.\n      const offerSdp = await peerConnection.createOffer()\n      const mungedOfferSdp = sdp.munge(offerSdp, ufrag)\n      await peerConnection.setLocalDescription(mungedOfferSdp)\n\n      // construct answer sdp from multiaddr and ufrag\n      const answerSdp = sdp.fromMultiAddr(ma, ufrag)\n      await peerConnection.setRemoteDescription(answerSdp)\n\n      // wait for peerconnection.onopen to fire, or for the datachannel to open\n      const handshakeDataChannel = await dataChannelOpenPromise\n\n      const myPeerId = this.components.peerId\n\n      // Do noise handshake.\n      // Set the Noise Prologue to libp2p-webrtc-noise:<FINGERPRINTS> before starting the actual Noise handshake.\n      // <FINGERPRINTS> is the concatenation of the of the two TLS fingerprints of A and B in their multihash byte representation, sorted in ascending order.\n      const fingerprintsPrologue = this.generateNoisePrologue(peerConnection, remoteCerthash.code, ma)\n\n      // Since we use the default crypto interface and do not use a static key or early data,\n      // we pass in undefined for these parameters.\n      const connectionEncrypter = noise({ prologueBytes: fingerprintsPrologue })(this.components)\n\n      const wrappedChannel = createStream({\n        channel: handshakeDataChannel,\n        direction: 'inbound',\n        logger: this.components.logger,\n        ...(this.init.dataChannel ?? {})\n      })\n      const wrappedDuplex = {\n        ...wrappedChannel,\n        sink: wrappedChannel.sink.bind(wrappedChannel),\n        source: (async function * () {\n          for await (const list of wrappedChannel.source) {\n            for (const buf of list) {\n              yield buf\n            }\n          }\n        }())\n      }\n\n      // Creating the connection before completion of the noise\n      // handshake ensures that the stream opening callback is set up\n      const maConn = new WebRTCMultiaddrConnection(this.components, {\n        peerConnection,\n        remoteAddr: ma,\n        timeline: {\n          open: Date.now()\n        },\n        metrics: this.metrics?.dialerEvents\n      })\n\n      const eventListeningName = isFirefox ? 'iceconnectionstatechange' : 'connectionstatechange'\n\n      peerConnection.addEventListener(eventListeningName, () => {\n        switch (peerConnection.connectionState) {\n          case 'failed':\n          case 'disconnected':\n          case 'closed':\n            maConn.close().catch((err) => {\n              this.log.error('error closing connection', err)\n            }).finally(() => {\n              // Remove the event listener once the connection is closed\n              controller.abort()\n            })\n            break\n          default:\n            break\n        }\n      }, { signal })\n\n      // Track opened peer connection\n      this.metrics?.dialerEvents.increment({ peer_connection: true })\n\n      const muxerFactory = new DataChannelMuxerFactory(this.components, {\n        peerConnection,\n        metrics: this.metrics?.dialerEvents,\n        dataChannelOptions: this.init.dataChannel\n      })\n\n      // For outbound connections, the remote is expected to start the noise handshake.\n      // Therefore, we need to secure an inbound noise connection from the remote.\n      await connectionEncrypter.secureInbound(myPeerId, wrappedDuplex, theirPeerId)\n\n      return await options.upgrader.upgradeOutbound(maConn, { skipProtection: true, skipEncryption: true, muxerFactory })\n    } catch (err) {\n      peerConnection.close()\n      throw err\n    }\n  }\n\n  /**\n   * Generate a noise prologue from the peer connection's certificate.\n   * noise prologue = bytes('libp2p-webrtc-noise:') + noise-responder fingerprint + noise-initiator fingerprint\n   */\n  private generateNoisePrologue (pc: RTCPeerConnection, hashCode: multihashes.HashCode, ma: Multiaddr): Uint8Array {\n    if (pc.getConfiguration().certificates?.length === 0) {\n      throw invalidArgument('no local certificate')\n    }\n\n    const localFingerprint = sdp.getLocalFingerprint(pc, {\n      log: this.log\n    })\n    if (localFingerprint == null) {\n      throw invalidArgument('no local fingerprint found')\n    }\n\n    const localFpString = localFingerprint.trim().toLowerCase().replaceAll(':', '')\n    const localFpArray = uint8arrayFromString(localFpString, 'hex')\n    const local = multihashes.encode(localFpArray, hashCode)\n    const remote: Uint8Array = sdp.mbdecoder.decode(sdp.certhash(ma))\n    const prefix = uint8arrayFromString('libp2p-webrtc-noise:')\n\n    return concat([prefix, local, remote])\n  }\n}\n", "import { bases } from 'multiformats/basics'\nimport * as multihashes from 'multihashes'\nimport { inappropriateMultiaddr, invalidArgument, invalidFingerprint, unsupportedHashAlgorithm } from '../error.js'\nimport { CERTHASH_CODE } from './transport.js'\nimport type { LoggerOptions } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { HashCode, HashName } from 'multihashes'\n\n/**\n * Get base2 | identity decoders\n */\n// @ts-expect-error - Not easy to combine these types.\nexport const mbdecoder: any = Object.values(bases).map(b => b.decoder).reduce((d, b) => d.or(b))\n\nexport function getLocalFingerprint (pc: RTCPeerConnection, options: LoggerOptions): string | undefined {\n  // try to fetch fingerprint from local certificate\n  const localCert = pc.getConfiguration().certificates?.at(0)\n  if (localCert == null || localCert.getFingerprints == null) {\n    options.log.trace('fetching fingerprint from local SDP')\n    const localDescription = pc.localDescription\n    if (localDescription == null) {\n      return undefined\n    }\n    return getFingerprintFromSdp(localDescription.sdp)\n  }\n\n  options.log.trace('fetching fingerprint from local certificate')\n\n  if (localCert.getFingerprints().length === 0) {\n    return undefined\n  }\n\n  const fingerprint = localCert.getFingerprints()[0].value\n  if (fingerprint == null) {\n    throw invalidFingerprint('', 'no fingerprint on local certificate')\n  }\n\n  return fingerprint\n}\n\nconst fingerprintRegex = /^a=fingerprint:(?:\\w+-[0-9]+)\\s(?<fingerprint>(:?[0-9a-fA-F]{2})+)$/m\nexport function getFingerprintFromSdp (sdp: string): string | undefined {\n  const searchResult = sdp.match(fingerprintRegex)\n  return searchResult?.groups?.fingerprint\n}\n/**\n * Get base2 | identity decoders\n */\nfunction ipv (ma: Multiaddr): string {\n  for (const proto of ma.protoNames()) {\n    if (proto.startsWith('ip')) {\n      return proto.toUpperCase()\n    }\n  }\n\n  return 'IP6'\n}\n\n// Extract the certhash from a multiaddr\nexport function certhash (ma: Multiaddr): string {\n  const tups = ma.stringTuples()\n  const certhash = tups.filter((tup) => tup[0] === CERTHASH_CODE).map((tup) => tup[1])[0]\n\n  if (certhash === undefined || certhash === '') {\n    throw inappropriateMultiaddr(`Couldn't find a certhash component of multiaddr: ${ma.toString()}`)\n  }\n\n  return certhash\n}\n\n/**\n * Convert a certhash into a multihash\n */\nexport function decodeCerthash (certhash: string): { code: HashCode, name: HashName, length: number, digest: Uint8Array } {\n  const mbdecoded = mbdecoder.decode(certhash)\n  return multihashes.decode(mbdecoded)\n}\n\n/**\n * Extract the fingerprint from a multiaddr\n */\nexport function ma2Fingerprint (ma: Multiaddr): string[] {\n  const mhdecoded = decodeCerthash(certhash(ma))\n  const prefix = toSupportedHashFunction(mhdecoded.name)\n  const fingerprint = mhdecoded.digest.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '')\n  const sdp = fingerprint.match(/.{1,2}/g)\n\n  if (sdp == null) {\n    throw invalidFingerprint(fingerprint, ma.toString())\n  }\n\n  return [`${prefix.toUpperCase()} ${sdp.join(':').toUpperCase()}`, fingerprint]\n}\n\n/**\n * Normalize the hash name from a given multihash has name\n */\nexport function toSupportedHashFunction (name: multihashes.HashName): string {\n  switch (name) {\n    case 'sha1':\n      return 'sha-1'\n    case 'sha2-256':\n      return 'sha-256'\n    case 'sha2-512':\n      return 'sha-512'\n    default:\n      throw unsupportedHashAlgorithm(name)\n  }\n}\n\n/**\n * Convert a multiaddr into a SDP\n */\nfunction ma2sdp (ma: Multiaddr, ufrag: string): string {\n  const { host, port } = ma.toOptions()\n  const ipVersion = ipv(ma)\n  const [CERTFP] = ma2Fingerprint(ma)\n\n  return `v=0\no=- 0 0 IN ${ipVersion} ${host}\ns=-\nc=IN ${ipVersion} ${host}\nt=0 0\na=ice-lite\nm=application ${port} UDP/DTLS/SCTP webrtc-datachannel\na=mid:0\na=setup:passive\na=ice-ufrag:${ufrag}\na=ice-pwd:${ufrag}\na=fingerprint:${CERTFP}\na=sctp-port:5000\na=max-message-size:16384\na=candidate:1467250027 1 UDP 1467250027 ${host} ${port} typ host\\r\\n`\n}\n\n/**\n * Create an answer SDP from a multiaddr\n */\nexport function fromMultiAddr (ma: Multiaddr, ufrag: string): RTCSessionDescriptionInit {\n  return {\n    type: 'answer',\n    sdp: ma2sdp(ma, ufrag)\n  }\n}\n\n/**\n * Replace (munge) the ufrag and password values in a SDP\n */\nexport function munge (desc: RTCSessionDescriptionInit, ufrag: string): RTCSessionDescriptionInit {\n  if (desc.sdp === undefined) {\n    throw invalidArgument(\"Can't munge a missing SDP\")\n  }\n\n  desc.sdp = desc.sdp\n    .replace(/\\na=ice-ufrag:[^\\n]*\\n/, '\\na=ice-ufrag:' + ufrag + '\\n')\n    .replace(/\\na=ice-pwd:[^\\n]*\\n/, '\\na=ice-pwd:' + ufrag + '\\n')\n  return desc\n}\n", "const charset = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/')\nexport const genUfrag = (len: number): string => [...Array(len)].map(() => charset.at(Math.floor(Math.random() * charset.length))).join('')\n", "/**\n * @packageDocumentation\n *\n * A [libp2p transport](https://docs.libp2p.io/concepts/transports/overview/) based on [WebRTC datachannels](https://webrtc.org/).\n *\n * [WebRTC](https://www.w3.org/TR/webrtc/) is a specification that allows real-time communication between nodes - it's commonly used in browser video conferencing applications but it also provides a reliable data transport mechanism called [data channels](https://www.w3.org/TR/webrtc/#peer-to-peer-data-api) which libp2p uses to facilitate [protocol streams](https://docs.libp2p.io/concepts/multiplex/overview/) between peers.\n *\n * There are two transports exposed by this module, [webRTC](https://github.com/libp2p/specs/blob/master/webrtc/webrtc.md) and [webRTCDirect](https://github.com/libp2p/specs/blob/master/webrtc/webrtc-direct.md).\n *\n * ## WebRTC vs WebRTC Direct\n *\n * The connection establishment phase of WebRTC involves a handshake using [SDP](https://en.wikipedia.org/wiki/Session_Description_Protocol) during which two peers will exchange information such as open ports, network addresses and required capabilities.\n *\n * A third party is usually necessary to carry out this handshake, forwarding messages between the two peers until they can make a direct connection between themselves.\n *\n * The WebRTC transport uses libp2p [Circuit Relay](https://docs.libp2p.io/concepts/nat/circuit-relay/)s to forward SDP messages. Once a direct connection is formed the relay plays no further part in the exchange.\n *\n * WebRTC Direct uses a technique known as [SDP munging](https://webrtchacks.com/not-a-guide-to-sdp-munging/) to skip the handshake step, instead encoding enough information in the connection request that the responder can derive what would have been in the handshake messages and so requires no third parties to establish a connection.\n *\n * A WebRTC Direct multiaddr also includes a certhash of the target peer - this is used to allow opening a connection to the remote, which would otherwise be denied due to use of a self-signed certificate.\n *\n * In both cases, once the connection is established a [Noise handshake](https://noiseprotocol.org/noise.html) is carried out to ensure that the remote peer has the private key that corresponds to the public key that makes up their PeerId, giving you both encryption and authentication.\n *\n * ## Support\n *\n * WebRTC is supported in both Node.js and browsers.\n *\n * At the time of writing, WebRTC Direct is dial-only in browsers and not supported in Node.js at all.\n *\n * Support in Node.js is possible but PRs will need to be opened to [libdatachannel](https://github.com/paullouisageneau/libdatachannel) and the appropriate APIs exposed in [node-datachannel](https://github.com/murat-dogan/node-datachannel).\n *\n * For both WebRTC and WebRTC Direct, support is arriving soon in go-libp2p but they are unsupported in rust-libp2p.\n *\n * See the WebRTC section of https://connectivity.libp2p.io for more information.\n *\n * @example WebRTC\n *\n * WebRTC requires use of a relay to connect two nodes. The listener first discovers a relay server and makes a reservation, then the dialer can connect via the relayed address.\n *\n * ```TypeScript\n * import { noise } from '@chainsafe/libp2p-noise'\n * import { yamux } from '@chainsafe/libp2p-yamux'\n * import { echo } from '@libp2p/echo'\n * import { circuitRelayTransport, circuitRelayServer } from '@libp2p/circuit-relay-v2'\n * import { identify } from '@libp2p/identify'\n * import { webRTC } from '@libp2p/webrtc'\n * import { webSockets } from '@libp2p/websockets'\n * import * as filters from '@libp2p/websockets/filters'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n * import delay from 'delay'\n * import { pipe } from 'it-pipe'\n * import { createLibp2p } from 'libp2p'\n * import type { Multiaddr } from '@multiformats/multiaddr'\n *\n * // the relay server listens on a transport dialable by the listener and the\n * // dialer, and has a relay service configured\n * const relay = await createLibp2p({\n *   addresses: {\n *   listen: ['/ip4/127.0.0.1/tcp/0/ws']\n *   },\n *   transports: [\n *     webSockets({filter: filters.all})\n *   ],\n *   connectionEncryption: [noise()],\n *   streamMuxers: [yamux()],\n *   services: {\n *     identify: identify(),\n *     relay: circuitRelayServer()\n *   }\n * })\n *\n * // the listener has a WebSocket transport to dial the relay, a Circuit Relay\n * // transport to make a reservation, and a WebRTC transport to accept incoming\n * // WebRTC connections\n * const listener = await createLibp2p({\n *   addresses: {\n *   listen: ['/webrtc']\n *   },\n *   transports: [\n *     webSockets({filter: filters.all}),\n *     webRTC(),\n *     circuitRelayTransport({\n *       discoverRelays: 1\n *     })\n *   ],\n *   connectionEncryption: [noise()],\n *   streamMuxers: [yamux()],\n *   services: {\n *     identify: identify(),\n *     echo: echo()\n *   }\n * })\n *\n * // the listener dials the relay (or discovers a public relay via some other\n * // method)\n * await listener.dial(relay.getMultiaddrs(), {\n *   signal: AbortSignal.timeout(5000)\n * })\n *\n * let webRTCMultiaddr: Multiaddr | undefined\n *\n * // wait for the listener to make a reservation on the relay\n * while (true) {\n *   webRTCMultiaddr = listener.getMultiaddrs().find(ma => WebRTC.matches(ma))\n *\n *   if (webRTCMultiaddr != null) {\n *     break\n *   }\n *\n *   // try again later\n *   await delay(1000)\n * }\n *\n * // the dialer has Circuit Relay, WebSocket and WebRTC transports to dial\n * // the listener via the relay, complete the SDP handshake and establish a\n * // direct WebRTC connection\n * const dialer = await createLibp2p({\n *   transports: [\n *     webSockets({filter: filters.all}),\n *     webRTC(),\n *     circuitRelayTransport()\n *   ],\n *   connectionEncryption: [noise()],\n *   streamMuxers: [yamux()],\n *   services: {\n *     identify: identify(),\n *     echo: echo()\n *   }\n * })\n *\n * // dial the listener and open an echo protocol stream\n * const stream = await dialer.dialProtocol(webRTCMultiaddr, dialer.services.echo.protocol, {\n *   signal: AbortSignal.timeout(5000)\n * })\n *\n * // we can now stop the relay\n * await relay.stop()\n *\n * // send/receive some data from the remote peer via a direct connection\n * await pipe(\n *   [new TextEncoder().encode('hello world')],\n *   stream,\n *   async source => {\n *     for await (const buf of source) {\n *       console.info(new TextDecoder().decode(buf.subarray()))\n *     }\n *   }\n * )\n * ```\n *\n * @example WebRTC Direct\n *\n * At the time of writing WebRTC Direct is dial-only in browsers and unsupported in Node.js.\n *\n * The only implementation that supports a WebRTC Direct listener is go-libp2p and it's not yet enabled by default.\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { noise } from '@chainsafe/libp2p-noise'\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { pipe } from 'it-pipe'\n * import { fromString, toString } from 'uint8arrays'\n * import { webRTCDirect } from '@libp2p/webrtc'\n *\n * const node = await createLibp2p({\n *   transports: [\n *     webRTCDirect()\n *   ],\n *   connectionEncryption: [\n *     noise()\n *   ]\n * })\n *\n * await node.start()\n *\n * // this multiaddr corresponds to a remote node running a WebRTC Direct listener\n * const ma = multiaddr('/ip4/0.0.0.0/udp/56093/webrtc-direct/certhash/uEiByaEfNSLBexWBNFZy_QB1vAKEj7JAXDizRs4_SnTflsQ')\n * const stream = await node.dialProtocol(ma, '/my-protocol/1.0.0', {\n *   signal: AbortSignal.timeout(10_000)\n * })\n *\n * await pipe(\n *   [fromString(`Hello js-libp2p-webrtc\\n`)],\n *   stream,\n *   async function (source) {\n *     for await (const buf of source) {\n *       console.info(toString(buf.subarray()))\n *     }\n *   }\n * )\n * ```\n */\n\nimport { WebRTCTransport } from './private-to-private/transport.js'\nimport { WebRTCDirectTransport, type WebRTCTransportDirectInit, type WebRTCDirectTransportComponents } from './private-to-public/transport.js'\nimport type { WebRTCTransportComponents, WebRTCTransportInit } from './private-to-private/transport.js'\nimport type { Transport } from '@libp2p/interface'\n\nexport interface DataChannelOptions {\n  /**\n   * The maximum message size sendable over the channel in bytes (default 16KB)\n   */\n  maxMessageSize?: number\n\n  /**\n   * If the channel's `bufferedAmount` grows over this amount in bytes, wait\n   * for it to drain before sending more data (default: 16MB)\n   */\n  maxBufferedAmount?: number\n\n  /**\n   * When `bufferedAmount` is above `maxBufferedAmount`, we pause sending until\n   * the `bufferedAmountLow` event fires - this controls how long we wait for\n   * that event in ms (default: 30s)\n   */\n  bufferedAmountLowEventTimeout?: number\n\n  /**\n   * When closing a stream, we wait for `bufferedAmount` to become 0 before\n   * closing the underlying RTCDataChannel - this controls how long we wait\n   * in ms (default: 30s)\n   */\n  drainTimeout?: number\n\n  /**\n   * When closing a stream we first send a FIN flag to the remote and wait\n   * for a FIN_ACK reply before closing the underlying RTCDataChannel - this\n   * controls how long we wait for the acknowledgement in ms (default: 5s)\n   */\n  closeTimeout?: number\n\n  /**\n   * When sending the first data message, if the channel is not in the \"open\"\n   * state, wait this long for the \"open\" event to fire.\n   */\n  openTimeout?: number\n}\n\n/**\n * @param {WebRTCTransportDirectInit} init - WebRTC direct transport configuration\n * @param init.dataChannel - DataChannel configurations\n * @param {number} init.dataChannel.maxMessageSize - Max message size that can be sent through the DataChannel. Larger messages will be chunked into smaller messages below this size (default 16kb)\n * @param {number} init.dataChannel.maxBufferedAmount - Max buffered amount a DataChannel can have (default 16mb)\n * @param {number} init.dataChannel.bufferedAmountLowEventTimeout - If max buffered amount is reached, this is the max time that is waited before the buffer is cleared (default 30 seconds)\n * @returns\n */\nfunction webRTCDirect (init?: WebRTCTransportDirectInit): (components: WebRTCDirectTransportComponents) => Transport {\n  return (components: WebRTCDirectTransportComponents) => new WebRTCDirectTransport(components, init)\n}\n\n/**\n * @param {WebRTCTransportInit} init - WebRTC transport configuration\n * @param {RTCConfiguration} init.rtcConfiguration - RTCConfiguration\n * @param init.dataChannel - DataChannel configurations\n * @param {number} init.dataChannel.maxMessageSize - Max message size that can be sent through the DataChannel. Larger messages will be chunked into smaller messages below this size (default 16kb)\n * @param {number} init.dataChannel.maxBufferedAmount - Max buffered amount a DataChannel can have (default 16mb)\n * @param {number} init.dataChannel.bufferedAmountLowEventTimeout - If max buffered amount is reached, this is the max time that is waited before the buffer is cleared (default 30 seconds)\n * @returns\n */\nfunction webRTC (init?: WebRTCTransportInit): (components: WebRTCTransportComponents) => Transport {\n  return (components: WebRTCTransportComponents) => new WebRTCTransport(components, init)\n}\n\nexport { webRTC, webRTCDirect }\n"],
  "mappings": "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Cd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,cAAc;AAAA,MACd,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,cAAc;AAAA,MACd,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AA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",
  "names": ["base", "encode", "length", "i", "j", "decode", "string", "textDecoder", "textEncoder", "concat", "length", "name", "code", "alphabet", "string", "decode", "string", "alphabet", "codes", "encode", "rfc4648", "baseX", "rfc4648", "identity", "codes", "require_src", "concat", "name", "encode", "decode", "codes", "encode", "MSB", "REST", "MSBALL", "INT", "read", "MSB", "REST", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "require_constants", "name", "encode", "length", "i", "j", "decode", "string", "equals", "fromString", "toString", "decode", "encode", "name", "alphabet", "string", "codes", "toString", "fromString", "encode", "decode", "encode", "decode", "decode", "init_varint", "code", "decode", "equals", "init_varint", "code", "digest", "from", "name", "code", "encode", "digest", "sha256", "name", "from", "identity_exports", "identity", "encode", "init_identity", "init_varint", "version", "code", "digest", "equals", "base", "decode", "length", "cid", "message", "init_varint", "bases", "init_identity", "identity_exports", "allocUnsafe", "name", "encode", "decode", "string", "allocUnsafe", "bases", "toString", "base", "fromString", "string", "base", "concat", "length", "allocUnsafe", "require_src", "varint", "codes", "name", "decode", "code", "encode", "digest", "length", "codes", "code", "from", "BrowserInfo", "name", "version", "NodeInfo", "version", "SearchBotDeviceInfo", "name", "version", "BotInfo", "ReactNativeInfo", "browser", "name", "version", "event", "Message", "Flag", "__FlagValues", "length", "err", "message", "Message", "Type", "__TypeValues", "length", "message", "Message", "Message", "Message", "crypto", "message", "crypto", "message", "NoiseExtensions", "length", "NoiseHandshakePayload", "crypto", "plaintext", "crypto", "multihashes", "certhash", "name", "handshakeDataChannel"]
}
