// node_modules/race-signal/dist/src/index.js
var AbortError = class extends Error {
  type;
  code;
  constructor(message, code) {
    super(message ?? "The operation was aborted");
    this.type = "aborted";
    this.name = "AbortError";
    this.code = code ?? "ABORT_ERR";
  }
};
async function raceSignal(promise, signal, opts) {
  if (signal == null) {
    return promise;
  }
  if (signal.aborted) {
    return Promise.reject(new AbortError(opts?.errorMessage, opts?.errorCode));
  }
  let listener;
  const error = new AbortError(opts?.errorMessage, opts?.errorCode);
  try {
    return await Promise.race([
      promise,
      new Promise((resolve, reject) => {
        listener = () => {
          reject(error);
        };
        signal.addEventListener("abort", listener);
      })
    ]);
  } finally {
    if (listener != null) {
      signal.removeEventListener("abort", listener);
    }
  }
}

export {
  raceSignal
};
//# sourceMappingURL=chunk-3W5ODUXV.js.map
