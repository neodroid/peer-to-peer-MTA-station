import {
  lpStream
} from "./chunk-WI4NAQ2P.js";

// node_modules/it-protobuf-stream/dist/src/index.js
function pbStream(duplex, opts) {
  const lp = lpStream(duplex, opts);
  const W = {
    read: async (proto, options) => {
      const value = await lp.read(options);
      return proto.decode(value);
    },
    write: async (message, proto, options) => {
      await lp.write(proto.encode(message), options);
    },
    writeV: async (messages, proto, options) => {
      await lp.writeV(messages.map((message) => proto.encode(message)), options);
    },
    pb: (proto) => {
      return {
        read: async (options) => W.read(proto, options),
        write: async (d, options) => W.write(d, proto, options),
        writeV: async (d, options) => W.writeV(d, proto, options),
        unwrap: () => W
      };
    },
    unwrap: () => {
      return lp.unwrap();
    }
  };
  return W;
}

export {
  pbStream
};
//# sourceMappingURL=chunk-Z2JWY6QB.js.map
