import {
  raceSignal
} from "./chunk-3W5ODUXV.js";
import {
  Uint8ArrayList
} from "./chunk-SHVKZIHG.js";
import {
  pDefer
} from "./chunk-GYD5GS2D.js";
import {
  decode,
  encode,
  encodingLength
} from "./chunk-JLOXJLWY.js";

// node_modules/it-byte-stream/dist/src/pushable.js
var QueuelessPushable = class {
  readNext;
  haveNext;
  ended;
  nextResult;
  constructor() {
    this.ended = false;
    this.readNext = pDefer();
    this.haveNext = pDefer();
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  async next() {
    if (this.nextResult == null) {
      await this.haveNext.promise;
    }
    if (this.nextResult == null) {
      throw new Error("HaveNext promise resolved but nextResult was undefined");
    }
    const nextResult = this.nextResult;
    this.nextResult = void 0;
    this.readNext.resolve();
    this.readNext = pDefer();
    return nextResult;
  }
  async throw(err) {
    this.ended = true;
    if (err != null) {
      this.haveNext.reject(err);
    }
    const result = {
      done: true,
      value: void 0
    };
    return result;
  }
  async return() {
    const result = {
      done: true,
      value: void 0
    };
    await this._push(void 0);
    return result;
  }
  async push(value, options) {
    await this._push(value, options);
  }
  async end(err, options) {
    if (err != null) {
      await this.throw(err);
    } else {
      await this._push(void 0, options);
    }
  }
  async _push(value, options) {
    if (value != null && this.ended) {
      throw new Error("Cannot push value onto an ended pushable");
    }
    if (this.nextResult != null) {
      await this.readNext.promise;
      if (this.nextResult != null) {
        throw new Error("NeedNext promise resolved but nextResult was not consumed");
      }
    }
    if (value != null) {
      this.nextResult = { done: false, value };
    } else {
      this.ended = true;
      this.nextResult = { done: true, value: void 0 };
    }
    this.haveNext.resolve();
    this.haveNext = pDefer();
    await raceSignal(this.readNext.promise, options?.signal, options);
  }
};
function pushable() {
  return new QueuelessPushable();
}

// node_modules/it-byte-stream/dist/src/index.js
var CodeError = class extends Error {
  code;
  constructor(message, code) {
    super(message);
    this.code = code;
  }
};
var AbortError = class extends CodeError {
  type;
  constructor(message) {
    super(message, "ABORT_ERR");
    this.type = "aborted";
  }
};
function byteStream(duplex, opts) {
  const write = pushable();
  duplex.sink(write).catch(async (err) => {
    await write.end(err);
  });
  duplex.sink = async (source2) => {
    for await (const buf of source2) {
      await write.push(buf);
    }
    await write.end();
  };
  let source = duplex.source;
  if (duplex.source[Symbol.iterator] != null) {
    source = duplex.source[Symbol.iterator]();
  } else if (duplex.source[Symbol.asyncIterator] != null) {
    source = duplex.source[Symbol.asyncIterator]();
  }
  const readBuffer = new Uint8ArrayList();
  const W = {
    read: async (bytes, options) => {
      options?.signal?.throwIfAborted();
      let listener;
      const abortPromise = new Promise((resolve, reject) => {
        listener = () => {
          reject(new AbortError("Read aborted"));
        };
        options?.signal?.addEventListener("abort", listener);
      });
      try {
        if (bytes == null) {
          const { done, value } = await Promise.race([
            source.next(),
            abortPromise
          ]);
          if (done === true) {
            return new Uint8ArrayList();
          }
          return value;
        }
        while (readBuffer.byteLength < bytes) {
          const { value, done } = await Promise.race([
            source.next(),
            abortPromise
          ]);
          if (done === true) {
            throw new CodeError("unexpected end of input", "ERR_UNEXPECTED_EOF");
          }
          readBuffer.append(value);
        }
        const buf = readBuffer.sublist(0, bytes);
        readBuffer.consume(bytes);
        return buf;
      } finally {
        if (listener != null) {
          options?.signal?.removeEventListener("abort", listener);
        }
      }
    },
    write: async (data, options) => {
      options?.signal?.throwIfAborted();
      if (data instanceof Uint8Array) {
        await write.push(data, options);
      } else {
        await write.push(data.subarray(), options);
      }
    },
    unwrap: () => {
      if (readBuffer.byteLength > 0) {
        const originalStream = duplex.source;
        duplex.source = async function* () {
          if (opts?.yieldBytes === false) {
            yield readBuffer;
          } else {
            yield* readBuffer;
          }
          yield* originalStream;
        }();
      }
      return duplex;
    }
  };
  return W;
}

// node_modules/it-length-prefixed-stream/dist/src/index.js
var CodeError2 = class extends Error {
  code;
  constructor(message, code) {
    super(message);
    this.code = code;
  }
};
function lpStream(duplex, opts = {}) {
  const bytes = byteStream(duplex, opts);
  if (opts.maxDataLength != null && opts.maxLengthLength == null) {
    opts.maxLengthLength = encodingLength(opts.maxDataLength);
  }
  const decodeLength = opts?.lengthDecoder ?? decode;
  const encodeLength = opts?.lengthEncoder ?? encode;
  const W = {
    read: async (options) => {
      let dataLength = -1;
      const lengthBuffer = new Uint8ArrayList();
      while (true) {
        lengthBuffer.append(await bytes.read(1, options));
        try {
          dataLength = decodeLength(lengthBuffer);
        } catch (err) {
          if (err instanceof RangeError) {
            continue;
          }
          throw err;
        }
        if (opts?.maxLengthLength != null && lengthBuffer.byteLength > opts.maxLengthLength) {
          throw new CodeError2("message length length too long", "ERR_MSG_LENGTH_TOO_LONG");
        }
        if (dataLength > -1) {
          break;
        }
      }
      if (opts?.maxDataLength != null && dataLength > opts.maxDataLength) {
        throw new CodeError2("message length too long", "ERR_MSG_DATA_TOO_LONG");
      }
      return bytes.read(dataLength, options);
    },
    write: async (data, options) => {
      await bytes.write(new Uint8ArrayList(encodeLength(data.byteLength), data), options);
    },
    writeV: async (data, options) => {
      const list = new Uint8ArrayList(...data.flatMap((buf) => [encodeLength(buf.byteLength), buf]));
      await bytes.write(list, options);
    },
    unwrap: () => {
      return bytes.unwrap();
    }
  };
  return W;
}

export {
  lpStream
};
//# sourceMappingURL=chunk-WI4NAQ2P.js.map
