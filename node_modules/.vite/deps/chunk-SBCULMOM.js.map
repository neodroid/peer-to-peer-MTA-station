{
  "version": 3,
  "sources": ["../../uint8arrays/src/xor.ts", "../../uint8arrays/src/compare.ts"],
  "sourcesContent": ["import { allocUnsafe } from '#alloc'\nimport { asUint8Array } from '#util/as-uint8array'\n\n/**\n * Returns the xor distance between two arrays\n */\nexport function xor (a: Uint8Array, b: Uint8Array): Uint8Array {\n  if (a.length !== b.length) {\n    throw new Error('Inputs should have the same length')\n  }\n\n  const result = allocUnsafe(a.length)\n\n  for (let i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ b[i]\n  }\n\n  return asUint8Array(result)\n}\n", "/**\n * Can be used with Array.sort to sort and array with Uint8Array entries\n */\nexport function compare (a: Uint8Array, b: Uint8Array): number {\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] < b[i]) {\n      return -1\n    }\n\n    if (a[i] > b[i]) {\n      return 1\n    }\n  }\n\n  if (a.byteLength > b.byteLength) {\n    return 1\n  }\n\n  if (a.byteLength < b.byteLength) {\n    return -1\n  }\n\n  return 0\n}\n"],
  "mappings": ";;;;;;AAMM,SAAU,IAAK,GAAe,GAAa;AAC/C,MAAI,EAAE,WAAW,EAAE,QAAQ;AACzB,UAAM,IAAI,MAAM,oCAAoC;EACtD;AAEA,QAAM,SAAS,YAAY,EAAE,MAAM;AAEnC,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,WAAO,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;EACxB;AAEA,SAAO,aAAa,MAAM;AAC5B;;;ACfM,SAAU,QAAS,GAAe,GAAa;AACnD,WAAS,IAAI,GAAG,IAAI,EAAE,YAAY,KAAK;AACrC,QAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG;AACf,aAAO;IACT;AAEA,QAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG;AACf,aAAO;IACT;EACF;AAEA,MAAI,EAAE,aAAa,EAAE,YAAY;AAC/B,WAAO;EACT;AAEA,MAAI,EAAE,aAAa,EAAE,YAAY;AAC/B,WAAO;EACT;AAEA,SAAO;AACT;",
  "names": []
}
