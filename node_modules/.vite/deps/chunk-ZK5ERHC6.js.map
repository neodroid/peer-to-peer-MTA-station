{
  "version": 3,
  "sources": ["../../@multiformats/mafmt/src/index.ts"],
  "sourcesContent": ["import { multiaddr } from '@multiformats/multiaddr'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface MatchesFunction { (a: string | Uint8Array | Multiaddr): boolean }\nexport interface PartialMatchesFunction { (protos: string[]): boolean | string[] | null }\n\nexport interface Mafmt {\n  toString: () => string\n  input?: Array<(Mafmt | (() => Mafmt))>\n  matches: MatchesFunction\n  partialMatch: PartialMatchesFunction\n}\n\n/*\n * Valid combinations\n */\nexport const DNS4 = base('dns4')\nexport const DNS6 = base('dns6')\nexport const DNSADDR = base('dnsaddr')\nexport const DNS = or(\n  base('dns'),\n  DNSADDR,\n  DNS4,\n  DNS6\n)\n\nexport const IP = or(base('ip4'), base('ip6'))\nexport const TCP = or(\n  and(IP, base('tcp')),\n  and(DNS, base('tcp'))\n)\nexport const UDP = and(IP, base('udp'))\nexport const UTP = and(UDP, base('utp'))\n\nexport const QUIC = and(UDP, base('quic'))\nexport const QUICV1 = and(UDP, base('quic-v1'))\n\nconst _WebSockets = or(\n  and(TCP, base('ws')),\n  and(DNS, base('ws'))\n)\n\nexport const WebSockets = or(\n  and(_WebSockets, base('p2p')),\n  _WebSockets\n)\n\nconst _WebSocketsSecure = or(\n  and(TCP, base('wss')),\n  and(DNS, base('wss')),\n  and(TCP, base('tls'), base('ws')),\n  and(DNS, base('tls'), base('ws'))\n)\n\nexport const WebSocketsSecure = or(\n  and(_WebSocketsSecure, base('p2p')),\n  _WebSocketsSecure\n)\n\nexport const HTTP = or(\n  and(TCP, base('http')),\n  and(IP, base('http')),\n  and(DNS, base('http'))\n)\n\nexport const HTTPS = or(\n  and(TCP, base('https')),\n  and(IP, base('https')),\n  and(DNS, base('https'))\n)\n\nconst _WebRTCDirect = and(UDP, base('webrtc-direct'), base('certhash'))\nexport const WebRTCDirect = or(\n  and(_WebRTCDirect, base('p2p')),\n  _WebRTCDirect\n)\n\nconst _WebTransport = and(QUICV1, base('webtransport'), base('certhash'), base('certhash'))\nexport const WebTransport = or(\n  and(_WebTransport, base('p2p')),\n  _WebTransport\n)\n\n/**\n * @deprecated\n */\nexport const P2PWebRTCStar = or(\n  and(WebSockets, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSockets, base('p2p-webrtc-star')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'))\n)\n\nexport const WebSocketStar = or(\n  and(WebSockets, base('p2p-websocket-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')),\n  and(WebSockets, base('p2p-websocket-star')),\n  and(WebSocketsSecure, base('p2p-websocket-star'))\n)\n\n/**\n * @deprecated\n */\nexport const P2PWebRTCDirect = or(\n  and(HTTP, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTPS, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTP, base('p2p-webrtc-direct')),\n  and(HTTPS, base('p2p-webrtc-direct'))\n)\n\nexport const Reliable = or(\n  _WebSockets,\n  _WebSocketsSecure,\n  HTTP,\n  HTTPS,\n  P2PWebRTCStar,\n  P2PWebRTCDirect,\n  TCP,\n  UTP,\n  QUIC,\n  DNS,\n  WebRTCDirect,\n  WebTransport\n)\n\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport const Stardust = or(\n  and(Reliable, base('p2p-stardust'), base('p2p')),\n  and(Reliable, base('p2p-stardust'))\n)\n\nconst _P2P = or(\n  and(Reliable, base('p2p')),\n  P2PWebRTCStar,\n  P2PWebRTCDirect,\n  WebRTCDirect,\n  WebTransport,\n  base('p2p')\n)\n\nconst _Circuit = or(\n  and(_P2P, base('p2p-circuit'), _P2P),\n  and(_P2P, base('p2p-circuit')),\n  and(base('p2p-circuit'), _P2P),\n  and(Reliable, base('p2p-circuit')),\n  and(base('p2p-circuit'), Reliable),\n  base('p2p-circuit')\n)\n\nconst CircuitRecursive = (): Mafmt => or(\n  and(_Circuit, CircuitRecursive),\n  _Circuit\n)\n\nexport const Circuit = CircuitRecursive()\n\nexport const P2P = or(\n  and(Circuit, _P2P, Circuit),\n  and(_P2P, Circuit),\n  and(Circuit, _P2P),\n  Circuit,\n  _P2P\n)\n\nexport const IPFS = P2P\n\nexport const WebRTC = or(\n  and(Circuit, base('webrtc'), base('p2p')),\n  and(Circuit, base('webrtc')),\n  and(Reliable, base('webrtc'), base('p2p')),\n  and(Reliable, base('webrtc')),\n  base('webrtc')\n)\n\n/*\n * Validation funcs\n */\n\nfunction makeMatchesFunction (partialMatch: PartialMatchesFunction): (a: string | Uint8Array | Multiaddr) => boolean {\n  function matches (a: string | Uint8Array | Multiaddr): boolean {\n    let ma\n\n    try {\n      ma = multiaddr(a)\n    } catch (err: any) { // catch error\n      return false // also if it's invalid it's probably not matching as well so return false\n    }\n\n    const out = partialMatch(ma.protoNames())\n    if (out === null) {\n      return false\n    }\n\n    if (out === true || out === false) {\n      return out\n    }\n\n    return out.length === 0\n  }\n\n  return matches\n}\n\nfunction and (...args: Array<Mafmt | (() => Mafmt)>): Mafmt {\n  function partialMatch (a: string[]): boolean | string[] | null {\n    if (a.length < args.length) {\n      return null\n    }\n\n    let out: boolean | string[] | null = a\n\n    args.some((arg) => {\n      out = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n\n      if (Array.isArray(out)) {\n        a = out\n      }\n\n      if (out === null) {\n        return true\n      }\n\n      return false\n    })\n\n    return out\n  }\n\n  return {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch\n  }\n}\n\nfunction or (...args: Array<Mafmt | (() => Mafmt)>): Mafmt {\n  function partialMatch (a: string[]): boolean | string[] | null {\n    let out = null\n    args.some((arg) => {\n      const res = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n      if (res != null) {\n        out = res\n        return true\n      }\n      return false\n    })\n\n    return out\n  }\n\n  const result = {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch\n  }\n\n  return result\n}\n\nfunction base (n: string): Mafmt {\n  const name = n\n\n  function matches (a: string | Uint8Array | Multiaddr): boolean {\n    let ma: Multiaddr\n\n    try {\n      ma = multiaddr(a)\n    } catch (err: any) { // catch error\n      return false // also if it's invalid it's probably not matching as well so return false\n    }\n\n    const pnames = ma.protoNames()\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true\n    }\n    return false\n  }\n\n  function partialMatch (protos: string[]): boolean | string[] | null {\n    if (protos.length === 0) {\n      return null\n    }\n\n    if (protos[0] === name) {\n      return protos.slice(1)\n    }\n    return null\n  }\n\n  return {\n    toString: function () { return name },\n    matches,\n    partialMatch\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
