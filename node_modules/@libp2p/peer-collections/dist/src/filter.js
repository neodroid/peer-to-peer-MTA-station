import { createScalableCuckooFilter } from '@libp2p/utils/filters';
/**
 * Uses a Bloom filter to implement a mechansim for deduplicating PeerIds in a
 * way that uses a fixed amount of memory.
 */
export class PeerFilter {
    filter;
    constructor(size, errorRate) {
        this.filter = createScalableCuckooFilter(size, errorRate);
    }
    has(peerId) {
        return this.filter.has(peerId.toBytes());
    }
    add(peerId) {
        this.filter.add(peerId.toBytes());
    }
    remove(peerId) {
        this.filter.remove?.(peerId.toBytes());
    }
}
export function peerFilter(size) {
    return new PeerFilter(size);
}
//# sourceMappingURL=filter.js.map